
stm32f407_FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d4c  08006d4c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d54  08006d54  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08006d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          00000514  200000c0  200000c0  000200c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005d4  200005d4  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   000143d3  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000287f  00000000  00000000  00034502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001198  00000000  00000000  00036d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d93  00000000  00000000  00037f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c9f  00000000  00000000  00038cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013585  00000000  00000000  0005b952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d043c  00000000  00000000  0006eed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005320  00000000  00000000  0013f314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00144634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c0c 	.word	0x08006c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08006c0c 	.word	0x08006c0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b64      	ldr	r3, [pc, #400]	; (8000718 <MX_GPIO_Init+0x1ac>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	; (8000718 <MX_GPIO_Init+0x1ac>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	; (8000718 <MX_GPIO_Init+0x1ac>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b56      	ldr	r3, [pc, #344]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b4f      	ldr	r3, [pc, #316]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a4e      	ldr	r2, [pc, #312]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b48      	ldr	r3, [pc, #288]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a47      	ldr	r2, [pc, #284]	; (8000718 <MX_GPIO_Init+0x1ac>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <MX_GPIO_Init+0x1ac>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2110      	movs	r1, #16
 8000612:	4842      	ldr	r0, [pc, #264]	; (800071c <MX_GPIO_Init+0x1b0>)
 8000614:	f001 f8f8 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	21c0      	movs	r1, #192	; 0xc0
 800061c:	483f      	ldr	r0, [pc, #252]	; (800071c <MX_GPIO_Init+0x1b0>)
 800061e:	f001 f8f3 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	483d      	ldr	r0, [pc, #244]	; (8000720 <MX_GPIO_Init+0x1b4>)
 800062a:	f001 f8ed 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000634:	483a      	ldr	r0, [pc, #232]	; (8000720 <MX_GPIO_Init+0x1b4>)
 8000636:	f001 f8e7 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800063a:	2310      	movs	r3, #16
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4835      	ldr	r0, [pc, #212]	; (8000724 <MX_GPIO_Init+0x1b8>)
 8000650:	f000 ff3e 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000654:	2308      	movs	r3, #8
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000658:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	482c      	ldr	r0, [pc, #176]	; (800071c <MX_GPIO_Init+0x1b0>)
 800066a:	f000 ff31 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800066e:	23d0      	movs	r3, #208	; 0xd0
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000676:	2301      	movs	r3, #1
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067a:	2302      	movs	r3, #2
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4825      	ldr	r0, [pc, #148]	; (800071c <MX_GPIO_Init+0x1b0>)
 8000686:	f000 ff23 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <MX_GPIO_Init+0x1b4>)
 80006a4:	f000 ff14 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2302      	movs	r3, #2
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4817      	ldr	r0, [pc, #92]	; (8000720 <MX_GPIO_Init+0x1b4>)
 80006c2:	f000 ff05 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <MX_GPIO_Init+0x1b4>)
 80006dc:	f000 fef8 	bl	80014d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2009      	movs	r0, #9
 80006e6:	f000 fe9a 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006ea:	2009      	movs	r0, #9
 80006ec:	f000 feb3 	bl	8001456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 fe92 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006fa:	200a      	movs	r0, #10
 80006fc:	f000 feab 	bl	8001456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2017      	movs	r0, #23
 8000706:	f000 fe8a 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800070a:	2017      	movs	r0, #23
 800070c:	f000 fea3 	bl	8001456 <HAL_NVIC_EnableIRQ>

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40021000 	.word	0x40021000

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fd06 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f846 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff ff1a 	bl	800056c <MX_GPIO_Init>
  MX_TIM14_Init();
 8000738:	f000 fc76 	bl	8001028 <MX_TIM14_Init>
  MX_SPI1_Init();
 800073c:	f000 f8e0 	bl	8000900 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000740:	f000 fc3c 	bl	8000fbc <MX_TIM7_Init>
  MX_SPI2_Init();
 8000744:	f000 f912 	bl	800096c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000748:	f000 f946 	bl	80009d8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 800074c:	4816      	ldr	r0, [pc, #88]	; (80007a8 <main+0x80>)
 800074e:	f002 fc97 	bl	8003080 <HAL_TIM_Base_Start_IT>


//  HAL_SPI_Receive_IT(&hspi3, ptr_rx, 1);
//  HAL_SPI_Receive_IT(&hspi3, &RX_data, sizeof(RX_data));
//  HAL_SPI_Transmit(&hspi2, (uint8_t*)TX_Buffer, BUFFER_SIZE, 1000);
  HAL_SPI_Receive_IT(&hspi3, (uint8_t*)RX_Buffer, sizeof(RX_Buffer));
 8000752:	2264      	movs	r2, #100	; 0x64
 8000754:	4915      	ldr	r1, [pc, #84]	; (80007ac <main+0x84>)
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <main+0x88>)
 8000758:	f001 fefe 	bl	8002558 <HAL_SPI_Receive_IT>


  CANFDSPI_Init();
 800075c:	f005 f85c 	bl	8005818 <CANFDSPI_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag_send_frame == 1) {
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <main+0x8c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d111      	bne.n	800078c <main+0x64>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_HIGH);
 8000768:	2201      	movs	r2, #1
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <main+0x90>)
 800076e:	f001 f84b 	bl	8001808 <HAL_GPIO_WritePin>
		  mcp2518fd_transmit();
 8000772:	f005 f9c3 	bl	8005afc <mcp2518fd_transmit>
		  //debounce
		  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 fd52 	bl	8001220 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_LOW);
 800077c:	2200      	movs	r2, #0
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <main+0x90>)
 8000782:	f001 f841 	bl	8001808 <HAL_GPIO_WritePin>
		  flag_send_frame = 0;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <main+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	  }
	  if (flag_receive_frame == 1) {
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <main+0x94>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d1e5      	bne.n	8000760 <main+0x38>
		  mcp2518fd_receive();
 8000794:	f005 fa32 	bl	8005bfc <mcp2518fd_receive>
		  blink_led(2);
 8000798:	2002      	movs	r0, #2
 800079a:	f000 f87b 	bl	8000894 <blink_led>
		  flag_receive_frame = 0;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <main+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	  if (flag_send_frame == 1) {
 80007a4:	e7dc      	b.n	8000760 <main+0x38>
 80007a6:	bf00      	nop
 80007a8:	200002b4 	.word	0x200002b4
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	200001f4 	.word	0x200001f4
 80007b4:	20000140 	.word	0x20000140
 80007b8:	40020000 	.word	0x40020000
 80007bc:	20000141 	.word	0x20000141

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 fb79 	bl	8005ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <SystemClock_Config+0xcc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SystemClock_Config+0xd0>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082c:	2300      	movs	r3, #0
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000830:	2308      	movs	r3, #8
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000834:	23a8      	movs	r3, #168	; 0xa8
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f837 	bl	80018b8 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000850:	f000 f850 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2105      	movs	r1, #5
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fa98 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800087e:	f000 f839 	bl	80008f4 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <blink_led>:

/* USER CODE BEGIN 4 */

void blink_led(uint8_t times) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i <= times; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e012      	b.n	80008ca <blink_led+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_HIGH);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <blink_led+0x48>)
 80008aa:	f000 ffad 	bl	8001808 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f000 fcb6 	bl	8001220 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_LOW);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <blink_led+0x48>)
 80008ba:	f000 ffa5 	bl	8001808 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f000 fcae 	bl	8001220 <HAL_Delay>
	for (int i = 0; i <= times; i++) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dde8      	ble.n	80008a4 <blink_led+0x10>
	}

}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2202      	movs	r2, #2
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2201      	movs	r2, #1
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2210      	movs	r2, #16
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f001 fbd5 	bl	8002100 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f7ff ffca 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000144 	.word	0x20000144
 8000968:	40013000 	.word	0x40013000

0800096c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI2_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI2_Init+0x64>)
 800098c:	2202      	movs	r2, #2
 800098e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000992:	2201      	movs	r2, #1
 8000994:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009a0:	2208      	movs	r2, #8
 80009a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009be:	f001 fb9f 	bl	8002100 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009c8:	f7ff ff94 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000019c 	.word	0x2000019c
 80009d4:	40003800 	.word	0x40003800

080009d8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_SPI3_Init+0x5c>)
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <MX_SPI3_Init+0x60>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI3_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI3_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI3_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI3_Init+0x5c>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI3_Init+0x5c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI3_Init+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI3_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI3_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI3_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI3_Init+0x5c>)
 8000a1a:	220a      	movs	r2, #10
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI3_Init+0x5c>)
 8000a20:	f001 fb6e 	bl	8002100 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f7ff ff63 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001f4 	.word	0x200001f4
 8000a38:	40003c00 	.word	0x40003c00

08000a3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a67      	ldr	r2, [pc, #412]	; (8000bf8 <HAL_SPI_MspInit+0x1bc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d134      	bne.n	8000ac8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
 8000a62:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a65      	ldr	r2, [pc, #404]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a76:	623b      	str	r3, [r7, #32]
 8000a78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
 8000a7e:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b5c      	ldr	r3, [pc, #368]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a96:	2338      	movs	r3, #56	; 0x38
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4853      	ldr	r0, [pc, #332]	; (8000c00 <HAL_SPI_MspInit+0x1c4>)
 8000ab2:	f000 fd0d 	bl	80014d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2023      	movs	r0, #35	; 0x23
 8000abc:	f000 fcaf 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ac0:	2023      	movs	r0, #35	; 0x23
 8000ac2:	f000 fcc8 	bl	8001456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ac6:	e093      	b.n	8000bf0 <HAL_SPI_MspInit+0x1b4>
  else if(spiHandle->Instance==SPI2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a4d      	ldr	r2, [pc, #308]	; (8000c04 <HAL_SPI_MspInit+0x1c8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d135      	bne.n	8000b3e <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a48      	ldr	r2, [pc, #288]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b46      	ldr	r3, [pc, #280]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a41      	ldr	r2, [pc, #260]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4836      	ldr	r0, [pc, #216]	; (8000c00 <HAL_SPI_MspInit+0x1c4>)
 8000b28:	f000 fcd2 	bl	80014d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2024      	movs	r0, #36	; 0x24
 8000b32:	f000 fc74 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000b36:	2024      	movs	r0, #36	; 0x24
 8000b38:	f000 fc8d 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 8000b3c:	e058      	b.n	8000bf0 <HAL_SPI_MspInit+0x1b4>
  else if(spiHandle->Instance==SPI3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <HAL_SPI_MspInit+0x1cc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d153      	bne.n	8000bf0 <HAL_SPI_MspInit+0x1b4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a2a      	ldr	r2, [pc, #168]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_SPI_MspInit+0x1c0>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4814      	ldr	r0, [pc, #80]	; (8000c0c <HAL_SPI_MspInit+0x1d0>)
 8000bba:	f000 fc89 	bl	80014d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <HAL_SPI_MspInit+0x1d4>)
 8000bdc:	f000 fc78 	bl	80014d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2033      	movs	r0, #51	; 0x33
 8000be6:	f000 fc1a 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000bea:	2033      	movs	r0, #51	; 0x33
 8000bec:	f000 fc33 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40003800 	.word	0x40003800
 8000c08:	40003c00 	.word	0x40003c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020800 	.word	0x40020800

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 fa96 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cbc:	2008      	movs	r0, #8
 8000cbe:	f000 fdd7 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  flag_receive_frame = 1;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <EXTI3_IRQHandler+0x20>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
  ext3_cnt++;
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <EXTI3_IRQHandler+0x24>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <EXTI3_IRQHandler+0x24>)
 8000cd2:	801a      	strh	r2, [r3, #0]
//  mcp2518fd_receive();

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000141 	.word	0x20000141
 8000cdc:	20000260 	.word	0x20000260

08000ce0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ce4:	2010      	movs	r0, #16
 8000ce6:	f000 fdc3 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
  counter_btn++;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <EXTI4_IRQHandler+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <EXTI4_IRQHandler+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
  flag_send_frame = 1;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <EXTI4_IRQHandler+0x24>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000258 	.word	0x20000258
 8000d04:	20000140 	.word	0x20000140

08000d08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d0c:	2080      	movs	r0, #128	; 0x80
 8000d0e:	f000 fdaf 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ext5_cnt++;
 8000d12:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <EXTI9_5_IRQHandler+0x18>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a01      	ldr	r2, [pc, #4]	; (8000d20 <EXTI9_5_IRQHandler+0x18>)
 8000d1a:	6013      	str	r3, [r2, #0]
//  mcp2518fd_receive();

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000264 	.word	0x20000264

08000d24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <SPI1_IRQHandler+0x10>)
 8000d2a:	f001 fd47 	bl	80027bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
//  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000144 	.word	0x20000144

08000d38 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <SPI2_IRQHandler+0x10>)
 8000d3e:	f001 fd3d 	bl	80027bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000019c 	.word	0x2000019c

08000d4c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <TIM8_TRG_COM_TIM14_IRQHandler+0x74>)
 8000d52:	f002 fa05 	bl	8003160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
	if(counter_timer >= 100000) {
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x78>)
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5c:	491a      	ldr	r1, [pc, #104]	; (8000dc8 <TIM8_TRG_COM_TIM14_IRQHandler+0x7c>)
 8000d5e:	428a      	cmp	r2, r1
 8000d60:	f173 0300 	sbcs.w	r3, r3, #0
 8000d64:	d30b      	bcc.n	8000d7e <TIM8_TRG_COM_TIM14_IRQHandler+0x32>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <TIM8_TRG_COM_TIM14_IRQHandler+0x80>)
 8000d6a:	f000 fd66 	bl	800183a <HAL_GPIO_TogglePin>
	  counter_timer = 0;
 8000d6e:	4915      	ldr	r1, [pc, #84]	; (8000dc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x78>)
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e9c1 2300 	strd	r2, r3, [r1]
 8000d7c:	e008      	b.n	8000d90 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>
	}
	else {
	  counter_timer++;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x78>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	1c54      	adds	r4, r2, #1
 8000d86:	f143 0500 	adc.w	r5, r3, #0
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x78>)
 8000d8c:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (transmitTimeout_Flag == 0) {
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <TIM8_TRG_COM_TIM14_IRQHandler+0x84>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d111      	bne.n	8000dbc <TIM8_TRG_COM_TIM14_IRQHandler+0x70>
		if (transmitTimeout_Cnt >= TRANSMIT_TIMEOUT) {
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d306      	bcc.n	8000db2 <TIM8_TRG_COM_TIM14_IRQHandler+0x66>
			//reset counter
			transmitTimeout_Cnt = 0;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
			//timeout!
			transmitTimeout_Flag = 1;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <TIM8_TRG_COM_TIM14_IRQHandler+0x84>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
		}
	}


  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000db0:	e004      	b.n	8000dbc <TIM8_TRG_COM_TIM14_IRQHandler+0x70>
			transmitTimeout_Cnt++;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	200002b4 	.word	0x200002b4
 8000dc4:	20000250 	.word	0x20000250
 8000dc8:	000186a0 	.word	0x000186a0
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	2000005c 	.word	0x2000005c
 8000dd4:	20000438 	.word	0x20000438
 8000dd8:	08006c68 	.word	0x08006c68

08000ddc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <SPI3_IRQHandler+0x24>)
 8000de2:	f001 fceb 	bl	80027bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */
  spi3_cnt++;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SPI3_IRQHandler+0x28>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SPI3_IRQHandler+0x28>)
 8000dee:	6013      	str	r3, [r2, #0]
//  HAL_SPI_Receive_IT(&hspi3, &RX_data, sizeof(RX_data));
//  HAL_SPI_Receive_IT(&hspi3, &RX_data, 1);
  HAL_SPI_Receive_IT(&hspi3, (uint8_t*)RX_Buffer, sizeof(RX_Buffer));
 8000df0:	2264      	movs	r2, #100	; 0x64
 8000df2:	4905      	ldr	r1, [pc, #20]	; (8000e08 <SPI3_IRQHandler+0x2c>)
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <SPI3_IRQHandler+0x24>)
 8000df6:	f001 fbaf 	bl	8002558 <HAL_SPI_Receive_IT>
//  HAL_SPI_Receive(&hspi3, RX_Buffer, sizeof(RX_Buffer), 1000);
//  RX_Buffer[RX_index] = *ptr_rx;
//  RX_index++;

  /* USER CODE END SPI3_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001f4 	.word	0x200001f4
 8000e04:	2000025c 	.word	0x2000025c
 8000e08:	200000dc 	.word	0x200000dc

08000e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return 1;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_kill>:

int _kill(int pid, int sig)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e26:	f005 f89d 	bl	8005f64 <__errno>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2216      	movs	r2, #22
 8000e2e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_exit>:

void _exit (int status)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffe7 	bl	8000e1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e4e:	e7fe      	b.n	8000e4e <_exit+0x12>

08000e50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	e00a      	b.n	8000e78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e62:	f3af 8000 	nop.w
 8000e66:	4601      	mov	r1, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	60ba      	str	r2, [r7, #8]
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf0      	blt.n	8000e62 <_read+0x12>
  }

  return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e009      	b.n	8000eb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dbf1      	blt.n	8000e9c <_write+0x12>
  }
  return len;
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_close>:

int _close(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eea:	605a      	str	r2, [r3, #4]
  return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_isatty>:

int _isatty(int file)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f005 f802 	bl	8005f64 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000268 	.word	0x20000268
 8000f94:	200005d8 	.word	0x200005d8

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_TIM7_Init+0x64>)
 8000fcc:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_TIM7_Init+0x68>)
 8000fce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_TIM7_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_TIM7_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_TIM7_Init+0x64>)
 8000fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_TIM7_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_TIM7_Init+0x64>)
 8000fec:	f001 fff9 	bl	8002fe2 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ff6:	f7ff fc7d 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_TIM7_Init+0x64>)
 8001008:	f002 fa7a 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001012:	f7ff fc6f 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000026c 	.word	0x2000026c
 8001024:	40001400 	.word	0x40001400

08001028 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_TIM14_Init+0x3c>)
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <MX_TIM14_Init+0x40>)
 8001030:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1-1;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_TIM14_Init+0x3c>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_TIM14_Init+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 84-1;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_TIM14_Init+0x3c>)
 8001040:	2253      	movs	r2, #83	; 0x53
 8001042:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_TIM14_Init+0x3c>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_TIM14_Init+0x3c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_TIM14_Init+0x3c>)
 8001052:	f001 ffc6 	bl	8002fe2 <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800105c:	f7ff fc4a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200002b4 	.word	0x200002b4
 8001068:	40002000 	.word	0x40002000

0800106c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_TIM_Base_MspInit+0x70>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10e      	bne.n	800109c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800109a:	e01a      	b.n	80010d2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_TIM_Base_MspInit+0x78>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d115      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_TIM_Base_MspInit+0x74>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	202d      	movs	r0, #45	; 0x2d
 80010c8:	f000 f9a9 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80010cc:	202d      	movs	r0, #45	; 0x2d
 80010ce:	f000 f9c2 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40001400 	.word	0x40001400
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40002000 	.word	0x40002000

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001112:	f7ff ff41 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f004 ff2b 	bl	8005f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fb05 	bl	8000728 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 800112c:	08006d5c 	.word	0x08006d5c
  ldr r2, =_sbss
 8001130:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001134:	200005d4 	.word	0x200005d4

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f94f 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fd50 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f967 	bl	8001472 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f92f 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	200002fc 	.word	0x200002fc

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200002fc 	.word	0x200002fc

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d004      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e00c      	b.n	80014c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2205      	movs	r2, #5
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e16b      	b.n	80017c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 815a 	bne.w	80017be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d005      	beq.n	8001522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151e:	2b02      	cmp	r3, #2
 8001520:	d130      	bne.n	8001584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 0201 	and.w	r2, r3, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b03      	cmp	r3, #3
 800158e:	d017      	beq.n	80015c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80b4 	beq.w	80017be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b60      	ldr	r3, [pc, #384]	; (80017dc <HAL_GPIO_Init+0x30c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a5f      	ldr	r2, [pc, #380]	; (80017dc <HAL_GPIO_Init+0x30c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <HAL_GPIO_Init+0x30c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a5b      	ldr	r2, [pc, #364]	; (80017e0 <HAL_GPIO_Init+0x310>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_GPIO_Init+0x314>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d02b      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a51      	ldr	r2, [pc, #324]	; (80017e8 <HAL_GPIO_Init+0x318>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d025      	beq.n	80016f2 <HAL_GPIO_Init+0x222>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a50      	ldr	r2, [pc, #320]	; (80017ec <HAL_GPIO_Init+0x31c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01f      	beq.n	80016ee <HAL_GPIO_Init+0x21e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4f      	ldr	r2, [pc, #316]	; (80017f0 <HAL_GPIO_Init+0x320>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4e      	ldr	r2, [pc, #312]	; (80017f4 <HAL_GPIO_Init+0x324>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x216>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <HAL_GPIO_Init+0x328>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x212>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x32c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x20e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x330>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x20a>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e00e      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016da:	2308      	movs	r3, #8
 80016dc:	e00c      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016de:	2306      	movs	r3, #6
 80016e0:	e00a      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e008      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e004      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x228>
 80016f6:	2300      	movs	r3, #0
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	f002 0203 	and.w	r2, r2, #3
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	4093      	lsls	r3, r2
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001708:	4935      	ldr	r1, [pc, #212]	; (80017e0 <HAL_GPIO_Init+0x310>)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_GPIO_Init+0x334>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_GPIO_Init+0x334>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_GPIO_Init+0x334>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <HAL_GPIO_Init+0x334>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_GPIO_Init+0x334>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_GPIO_Init+0x334>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_GPIO_Init+0x334>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_GPIO_Init+0x334>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	f67f ae90 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40021400 	.word	0x40021400
 80017fc:	40021800 	.word	0x40021800
 8001800:	40021c00 	.word	0x40021c00
 8001804:	40013c00 	.word	0x40013c00

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800184c:	887a      	ldrh	r2, [r7, #2]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	041a      	lsls	r2, r3, #16
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43d9      	mvns	r1, r3
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	400b      	ands	r3, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f806 	bl	80018a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e267      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d00c      	beq.n	80018fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b82      	ldr	r3, [pc, #520]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d05b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d157      	bne.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e242      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x74>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6f      	ldr	r2, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6c      	ldr	r2, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 8001950:	4b69      	ldr	r3, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a68      	ldr	r2, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a65      	ldr	r2, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc4a 	bl	8001208 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc46 	bl	8001208 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e207      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xc0>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc36 	bl	8001208 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc32 	bl	8001208 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1f3      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1c7      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x244>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fbeb 	bl	8001208 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fbe7 	bl	8001208 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1a8      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4925      	ldr	r1, [pc, #148]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x244>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fbca 	bl	8001208 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbc6 	bl	8001208 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e187      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d036      	beq.n	8001b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x248>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fbaa 	bl	8001208 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fba6 	bl	8001208 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e167      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x200>
 8001ad6:	e01b      	b.n	8001b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x248>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb93 	bl	8001208 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00e      	b.n	8001b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fb8f 	bl	8001208 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d907      	bls.n	8001b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e150      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ea      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8097 	beq.w	8001c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a7c      	ldr	r2, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a73      	ldr	r2, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb4f 	bl	8001208 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff fb4b 	bl	8001208 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e10c      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a63      	ldr	r2, [pc, #396]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x324>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x30c>
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a5e      	ldr	r2, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5b      	ldr	r2, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x324>
 8001bc4:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fb10 	bl	8001208 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb0c 	bl	8001208 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0cb      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7ff fafa 	bl	8001208 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff faf6 	bl	8001208 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0b5      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a1 	beq.w	8001d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d05c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d141      	bne.n	8001cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff faca 	bl	8001208 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fac6 	bl	8001208 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e087      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fa9f 	bl	8001208 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fa9b 	bl	8001208 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e05c      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x416>
 8001cec:	e054      	b.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fa88 	bl	8001208 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff fa84 	bl	8001208 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e045      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x444>
 8001d1a:	e03d      	b.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e038      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4ec>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d028      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d121      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0cc      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d90c      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d044      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e067      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f9b6 	bl	8001208 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff f9b2 	bl	8001208 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e04f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20c      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f916 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	40023800 	.word	0x40023800
 8001f68:	08006c58 	.word	0x08006c58
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f78:	b090      	sub	sp, #64	; 0x40
 8001f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f84:	2300      	movs	r3, #0
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8c:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	f200 80a1 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x3a>
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fac:	e09b      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fb2:	e098      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d028      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	627a      	str	r2, [r7, #36]	; 0x24
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fe0:	fb03 f201 	mul.w	r2, r3, r1
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	fb00 f303 	mul.w	r3, r0, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	4a43      	ldr	r2, [pc, #268]	; (80020fc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fee:	fba0 1202 	umull	r1, r2, r0, r2
 8001ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffa:	4413      	add	r3, r2
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	2200      	movs	r2, #0
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	61fa      	str	r2, [r7, #28]
 8002006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800200a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800200e:	f7fe f92f 	bl	8000270 <__aeabi_uldivmod>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4613      	mov	r3, r2
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201a:	e053      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	2200      	movs	r2, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	617a      	str	r2, [r7, #20]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800202e:	f04f 0b00 	mov.w	fp, #0
 8002032:	4652      	mov	r2, sl
 8002034:	465b      	mov	r3, fp
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0159      	lsls	r1, r3, #5
 8002040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002044:	0150      	lsls	r0, r2, #5
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	ebb2 080a 	subs.w	r8, r2, sl
 800204e:	eb63 090b 	sbc.w	r9, r3, fp
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800205e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002062:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002066:	ebb2 0408 	subs.w	r4, r2, r8
 800206a:	eb63 0509 	sbc.w	r5, r3, r9
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	00eb      	lsls	r3, r5, #3
 8002078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207c:	00e2      	lsls	r2, r4, #3
 800207e:	4614      	mov	r4, r2
 8002080:	461d      	mov	r5, r3
 8002082:	eb14 030a 	adds.w	r3, r4, sl
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	eb45 030b 	adc.w	r3, r5, fp
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a4:	4621      	mov	r1, r4
 80020a6:	028a      	lsls	r2, r1, #10
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	2200      	movs	r2, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	60fa      	str	r2, [r7, #12]
 80020b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b8:	f7fe f8da 	bl	8000270 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3740      	adds	r7, #64	; 0x40
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	017d7840 	.word	0x017d7840

08002100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07b      	b.n	800220a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d009      	beq.n	8002138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
 800212a:	e005      	b.n	8002138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fc72 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0104 	and.w	r1, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0210 	and.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b08c      	sub	sp, #48	; 0x30
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x26>
 8002234:	2302      	movs	r3, #2
 8002236:	e18a      	b.n	800254e <HAL_SPI_TransmitReceive+0x33c>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002240:	f7fe ffe2 	bl	8001208 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800224c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800225a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800225e:	2b01      	cmp	r3, #1
 8002260:	d00f      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x70>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002268:	d107      	bne.n	800227a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <HAL_SPI_TransmitReceive+0x68>
 8002272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002276:	2b04      	cmp	r3, #4
 8002278:	d003      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002280:	e15b      	b.n	800253a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x82>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x82>
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800229a:	e14e      	b.n	800253a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d003      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	887a      	ldrh	r2, [r7, #2]
 80022c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d007      	beq.n	8002304 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800230c:	d178      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_SPI_TransmitReceive+0x10a>
 8002316:	8b7b      	ldrh	r3, [r7, #26]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d166      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	1c9a      	adds	r2, r3, #2
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002340:	e053      	b.n	80023ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11b      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x176>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_SPI_TransmitReceive+0x176>
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d113      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d119      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x1b8>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d014      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	b292      	uxth	r2, r2
 80023ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	1c9a      	adds	r2, r3, #2
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023c6:	2301      	movs	r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023ca:	f7fe ff1d 	bl	8001208 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d807      	bhi.n	80023ea <HAL_SPI_TransmitReceive+0x1d8>
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d003      	beq.n	80023ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023e8:	e0a7      	b.n	800253a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1a6      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x130>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1a1      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x130>
 80023fe:	e07c      	b.n	80024fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_SPI_TransmitReceive+0x1fc>
 8002408:	8b7b      	ldrh	r3, [r7, #26]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d16b      	bne.n	80024e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002434:	e057      	b.n	80024e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d11c      	bne.n	800247e <HAL_SPI_TransmitReceive+0x26c>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d017      	beq.n	800247e <HAL_SPI_TransmitReceive+0x26c>
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d114      	bne.n	800247e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d119      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x2ae>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d014      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024bc:	2301      	movs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024c0:	f7fe fea2 	bl	8001208 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d803      	bhi.n	80024d8 <HAL_SPI_TransmitReceive+0x2c6>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d102      	bne.n	80024de <HAL_SPI_TransmitReceive+0x2cc>
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024e4:	e029      	b.n	800253a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1a2      	bne.n	8002436 <HAL_SPI_TransmitReceive+0x224>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d19d      	bne.n	8002436 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fc7a 	bl	8002df8 <SPI_EndRxTxTransaction>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002516:	e010      	b.n	800253a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	e000      	b.n	800253a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002538:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800254a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800254e:	4618      	mov	r0, r3
 8002550:	3730      	adds	r7, #48	; 0x30
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d110      	bne.n	8002594 <HAL_SPI_Receive_IT+0x3c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800257a:	d10b      	bne.n	8002594 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2204      	movs	r2, #4
 8002580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f882 	bl	8002694 <HAL_SPI_TransmitReceive_IT>
 8002590:	4603      	mov	r3, r0
 8002592:	e076      	b.n	8002682 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_SPI_Receive_IT+0x4a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e06f      	b.n	8002682 <HAL_SPI_Receive_IT+0x12a>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ba:	e05d      	b.n	8002678 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_SPI_Receive_IT+0x70>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025cc:	e054      	b.n	8002678 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2204      	movs	r2, #4
 80025d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a1e      	ldr	r2, [pc, #120]	; (800268c <HAL_SPI_Receive_IT+0x134>)
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
 8002614:	e002      	b.n	800261c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_SPI_Receive_IT+0x138>)
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002624:	d10f      	bne.n	8002646 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002654:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d008      	beq.n	8002676 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e000      	b.n	8002678 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002676:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	08002bd5 	.word	0x08002bd5
 8002690:	08002b8b 	.word	0x08002b8b

08002694 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_SPI_TransmitReceive_IT+0x20>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e075      	b.n	80027a0 <HAL_SPI_TransmitReceive_IT+0x10c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ca:	7dbb      	ldrb	r3, [r7, #22]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d00d      	beq.n	80026ec <HAL_SPI_TransmitReceive_IT+0x58>
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026d6:	d106      	bne.n	80026e6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_SPI_TransmitReceive_IT+0x52>
 80026e0:	7dbb      	ldrb	r3, [r7, #22]
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026ea:	e054      	b.n	8002796 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_SPI_TransmitReceive_IT+0x6a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_TransmitReceive_IT+0x6a>
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002702:	e048      	b.n	8002796 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b04      	cmp	r3, #4
 800270e:	d003      	beq.n	8002718 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2205      	movs	r2, #5
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	887a      	ldrh	r2, [r7, #2]
 800272e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_SPI_TransmitReceive_IT+0x118>)
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
 8002756:	e005      	b.n	8002764 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <HAL_SPI_TransmitReceive_IT+0x120>)
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002772:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d008      	beq.n	8002794 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e000      	b.n	8002796 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002794:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	08002acd 	.word	0x08002acd
 80027b0:	08002b2d 	.word	0x08002b2d
 80027b4:	08002a09 	.word	0x08002a09
 80027b8:	08002a6d 	.word	0x08002a6d

080027bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
    return;
 80027fa:	e0ce      	b.n	800299a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_SPI_IRQHandler+0x5e>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
    return;
 8002818:	e0bf      	b.n	800299a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <HAL_SPI_IRQHandler+0x7e>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80b0 	beq.w	800299a <HAL_SPI_IRQHandler+0x1de>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80aa 	beq.w	800299a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d011      	beq.n	8002880 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	e00b      	b.n	8002898 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
        return;
 8002896:	e080      	b.n	800299a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d014      	beq.n	80028cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00c      	beq.n	80028f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0208 	orr.w	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04f      	beq.n	8002998 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002906:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d104      	bne.n	8002924 <HAL_SPI_IRQHandler+0x168>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d034      	beq.n	800298e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0203 	bic.w	r2, r2, #3
 8002932:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d011      	beq.n	8002960 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_SPI_IRQHandler+0x1e4>)
 8002942:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fd9e 	bl	800148a <HAL_DMA_Abort_IT>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_SPI_IRQHandler+0x1e4>)
 800296e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fd88 	bl	800148a <HAL_DMA_Abort_IT>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800298c:	e003      	b.n	8002996 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f81c 	bl	80029cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002994:	e000      	b.n	8002998 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002996:	bf00      	nop
    return;
 8002998:	bf00      	nop
  }
}
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	080029e1 	.word	0x080029e1

080029a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff ffe6 	bl	80029cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f103 020c 	add.w	r2, r3, #12
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a52:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa0c 	bl	8002e7c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10f      	bne.n	8002ac4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9dc 	bl	8002e7c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10f      	bne.n	8002b24 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9ac 	bl	8002e7c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c9a      	adds	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b70:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f97d 	bl	8002e7c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f103 020c 	add.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9cc 	bl	8002f64 <SPI_CloseRx_ISR>
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	b292      	uxth	r2, r2
 8002be8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f9a9 	bl	8002f64 <SPI_CloseRx_ISR>
  }
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c2c:	f7fe faec 	bl	8001208 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c3c:	f7fe fae4 	bl	8001208 <HAL_GetTick>
 8002c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	015b      	lsls	r3, r3, #5
 8002c48:	0d1b      	lsrs	r3, r3, #20
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c52:	e054      	b.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d050      	beq.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c5c:	f7fe fad4 	bl	8001208 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d902      	bls.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d13d      	bne.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8a:	d111      	bne.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c94:	d004      	beq.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9e:	d107      	bne.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb8:	d10f      	bne.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e017      	b.n	8002d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d19b      	bne.n	8002c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000

08002d2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d40:	d111      	bne.n	8002d66 <SPI_EndRxTransaction+0x3a>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4a:	d004      	beq.n	8002d56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d107      	bne.n	8002d66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6e:	d12a      	bne.n	8002dc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d012      	beq.n	8002da0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff ff49 	bl	8002c1c <SPI_WaitFlagStateUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02d      	beq.n	8002dec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e026      	b.n	8002dee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2101      	movs	r1, #1
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff ff36 	bl	8002c1c <SPI_WaitFlagStateUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01a      	beq.n	8002dec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e013      	b.n	8002dee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2101      	movs	r1, #1
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ff23 	bl	8002c1c <SPI_WaitFlagStateUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e000      	b.n	8002dee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <SPI_EndRxTxTransaction+0x7c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <SPI_EndRxTxTransaction+0x80>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0d5b      	lsrs	r3, r3, #21
 8002e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e22:	d112      	bne.n	8002e4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fef4 	bl	8002c1c <SPI_WaitFlagStateUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00f      	b.n	8002e6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d0f2      	beq.n	8002e4a <SPI_EndRxTxTransaction+0x52>
 8002e64:	e000      	b.n	8002e68 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e66:	bf00      	nop
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000
 8002e78:	165e9f81 	.word	0x165e9f81

08002e7c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <SPI_CloseRxTx_ISR+0xe0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a35      	ldr	r2, [pc, #212]	; (8002f60 <SPI_CloseRxTx_ISR+0xe4>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a5b      	lsrs	r3, r3, #9
 8002e90:	2264      	movs	r2, #100	; 0x64
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e98:	f7fe f9b6 	bl	8001208 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0220 	bic.w	r2, r2, #32
 8002eac:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ec0:	e009      	b.n	8002ed6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0eb      	beq.n	8002eae <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	2164      	movs	r1, #100	; 0x64
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff8c 	bl	8002df8 <SPI_EndRxTxTransaction>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d115      	bne.n	8002f44 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d107      	bne.n	8002f34 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fd39 	bl	80029a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f32:	e00e      	b.n	8002f52 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fd3b 	bl	80029b8 <HAL_SPI_TxRxCpltCallback>
}
 8002f42:	e006      	b.n	8002f52 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fd3d 	bl	80029cc <HAL_SPI_ErrorCallback>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	057619f1 	.word	0x057619f1

08002f64 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002f7c:	f7fe f944 	bl	8001208 <HAL_GetTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	2164      	movs	r1, #100	; 0x64
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fed0 	bl	8002d2c <SPI_EndRxTransaction>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fce9 	bl	80029a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002fd2:	e002      	b.n	8002fda <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fcf9 	bl	80029cc <HAL_SPI_ErrorCallback>
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e041      	b.n	8003078 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fe f82f 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f000 f9cd 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d001      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e04e      	b.n	8003136 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <HAL_TIM_Base_Start_IT+0xc4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d022      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d01d      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <HAL_TIM_Base_Start_IT+0xc8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d018      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_TIM_Base_Start_IT+0xcc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_TIM_Base_Start_IT+0xd0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_TIM_Base_Start_IT+0xd4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_TIM_Base_Start_IT+0xd8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_TIM_Base_Start_IT+0xdc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b06      	cmp	r3, #6
 8003110:	d010      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	e007      	b.n	8003134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40010400 	.word	0x40010400
 8003158:	40014000 	.word	0x40014000
 800315c:	40001800 	.word	0x40001800

08003160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d122      	bne.n	80031bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0202 	mvn.w	r2, #2
 800318c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8ee 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8e0 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8f1 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d122      	bne.n	8003210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d11b      	bne.n	8003210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0204 	mvn.w	r2, #4
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8c4 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8b6 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8c7 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d122      	bne.n	8003264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b08      	cmp	r3, #8
 800322a:	d11b      	bne.n	8003264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0208 	mvn.w	r2, #8
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2204      	movs	r2, #4
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f89a 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f88c 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f89d 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d122      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b10      	cmp	r3, #16
 800327e:	d11b      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0210 	mvn.w	r2, #16
 8003288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2208      	movs	r2, #8
 800328e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f870 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f862 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f873 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0201 	mvn.w	r2, #1
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fafe 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	2b80      	cmp	r3, #128	; 0x80
 80032f0:	d10e      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d107      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f97e 	bl	800360c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f838 	bl	80033ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b20      	cmp	r3, #32
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0220 	mvn.w	r2, #32
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f948 	bl	80035f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a40      	ldr	r2, [pc, #256]	; (80034d4 <TIM_Base_SetConfig+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d00f      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <TIM_Base_SetConfig+0x118>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <TIM_Base_SetConfig+0x11c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <TIM_Base_SetConfig+0x120>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <TIM_Base_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <TIM_Base_SetConfig+0x114>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02b      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d027      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <TIM_Base_SetConfig+0x118>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d023      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2b      	ldr	r2, [pc, #172]	; (80034dc <TIM_Base_SetConfig+0x11c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <TIM_Base_SetConfig+0x120>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01b      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <TIM_Base_SetConfig+0x124>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d017      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <TIM_Base_SetConfig+0x128>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a27      	ldr	r2, [pc, #156]	; (80034ec <TIM_Base_SetConfig+0x12c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <TIM_Base_SetConfig+0x130>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <TIM_Base_SetConfig+0x134>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <TIM_Base_SetConfig+0x138>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a23      	ldr	r2, [pc, #140]	; (80034fc <TIM_Base_SetConfig+0x13c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <TIM_Base_SetConfig+0x114>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d003      	beq.n	80034b8 <TIM_Base_SetConfig+0xf8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <TIM_Base_SetConfig+0x124>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d103      	bne.n	80034c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	615a      	str	r2, [r3, #20]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40010400 	.word	0x40010400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800
 80034f4:	40001800 	.word	0x40001800
 80034f8:	40001c00 	.word	0x40001c00
 80034fc:	40002000 	.word	0x40002000

08003500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e05a      	b.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a21      	ldr	r2, [pc, #132]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d01d      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40010400 	.word	0x40010400
 80035f0:	40014000 	.word	0x40014000
 80035f4:	40001800 	.word	0x40001800

080035f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 800362a:	2302      	movs	r3, #2
 800362c:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <DRV_CANFDSPI_Reset+0x3c>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <DRV_CANFDSPI_Reset+0x3c>)
 800363a:	2200      	movs	r2, #0
 800363c:	705a      	strb	r2, [r3, #1]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 800363e:	89fb      	ldrh	r3, [r7, #14]
 8003640:	79f8      	ldrb	r0, [r7, #7]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <DRV_CANFDSPI_Reset+0x40>)
 8003644:	4905      	ldr	r1, [pc, #20]	; (800365c <DRV_CANFDSPI_Reset+0x3c>)
 8003646:	f002 f9ff 	bl	8005a48 <DRV_SPI_TransferData>
 800364a:	4603      	mov	r3, r0
 800364c:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800364e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000300 	.word	0x20000300
 8003660:	20000364 	.word	0x20000364

08003664 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	603a      	str	r2, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
 8003670:	460b      	mov	r3, r1
 8003672:	80bb      	strh	r3, [r7, #4]
    uint16_t spiTransferSize = 3;
 8003674:	2303      	movs	r3, #3
 8003676:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800367c:	88bb      	ldrh	r3, [r7, #4]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b29b      	uxth	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3330      	adds	r3, #48	; 0x30
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <DRV_CANFDSPI_ReadByte+0x60>)
 8003690:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003692:	88bb      	ldrh	r3, [r7, #4]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <DRV_CANFDSPI_ReadByte+0x60>)
 8003698:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = 0;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <DRV_CANFDSPI_ReadByte+0x60>)
 800369c:	2200      	movs	r2, #0
 800369e:	709a      	strb	r2, [r3, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	79f8      	ldrb	r0, [r7, #7]
 80036a4:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <DRV_CANFDSPI_ReadByte+0x64>)
 80036a6:	4907      	ldr	r1, [pc, #28]	; (80036c4 <DRV_CANFDSPI_ReadByte+0x60>)
 80036a8:	f002 f9ce 	bl	8005a48 <DRV_SPI_TransferData>
 80036ac:	4603      	mov	r3, r0
 80036ae:	737b      	strb	r3, [r7, #13]

    // Update data
    *rxd = spiReceiveBuffer[2];
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <DRV_CANFDSPI_ReadByte+0x64>)
 80036b2:	789a      	ldrb	r2, [r3, #2]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80036b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000300 	.word	0x20000300
 80036c8:	20000364 	.word	0x20000364

080036cc <DRV_CANFDSPI_WriteByte>:

    return spiTransferError_ReadByte;
}

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
 80036d6:	460b      	mov	r3, r1
 80036d8:	80bb      	strh	r3, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	71bb      	strb	r3, [r7, #6]
    uint16_t spiTransferSize = 3;
 80036de:	2303      	movs	r3, #3
 80036e0:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3320      	adds	r3, #32
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <DRV_CANFDSPI_WriteByte+0x5c>)
 80036fa:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80036fc:	88bb      	ldrh	r3, [r7, #4]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003702:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = txd;
 8003704:	4a08      	ldr	r2, [pc, #32]	; (8003728 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003706:	79bb      	ldrb	r3, [r7, #6]
 8003708:	7093      	strb	r3, [r2, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 800370a:	89fb      	ldrh	r3, [r7, #14]
 800370c:	79f8      	ldrb	r0, [r7, #7]
 800370e:	4a07      	ldr	r2, [pc, #28]	; (800372c <DRV_CANFDSPI_WriteByte+0x60>)
 8003710:	4905      	ldr	r1, [pc, #20]	; (8003728 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003712:	f002 f999 	bl	8005a48 <DRV_SPI_TransferData>
 8003716:	4603      	mov	r3, r0
 8003718:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800371a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000300 	.word	0x20000300
 800372c:	20000364 	.word	0x20000364

08003730 <DRV_CANFDSPI_WriteWord>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	603a      	str	r2, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
 800373c:	460b      	mov	r3, r1
 800373e:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 8003740:	2306      	movs	r3, #6
 8003742:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	72fb      	strb	r3, [r7, #11]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8003748:	88bb      	ldrh	r3, [r7, #4]
 800374a:	0a1b      	lsrs	r3, r3, #8
 800374c:	b29b      	uxth	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	b2db      	uxtb	r3, r3
 8003756:	3320      	adds	r3, #32
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <DRV_CANFDSPI_WriteWord+0x78>)
 800375c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800375e:	88bb      	ldrh	r3, [r7, #4]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <DRV_CANFDSPI_WriteWord+0x78>)
 8003764:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e00b      	b.n	8003784 <DRV_CANFDSPI_WriteWord+0x54>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	40da      	lsrs	r2, r3
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	3302      	adds	r3, #2
 8003778:	b2d1      	uxtb	r1, r2
 800377a:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <DRV_CANFDSPI_WriteWord+0x78>)
 800377c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	3301      	adds	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d9f0      	bls.n	800376c <DRV_CANFDSPI_WriteWord+0x3c>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 800378a:	89bb      	ldrh	r3, [r7, #12]
 800378c:	79f8      	ldrb	r0, [r7, #7]
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <DRV_CANFDSPI_WriteWord+0x7c>)
 8003790:	4905      	ldr	r1, [pc, #20]	; (80037a8 <DRV_CANFDSPI_WriteWord+0x78>)
 8003792:	f002 f959 	bl	8005a48 <DRV_SPI_TransferData>
 8003796:	4603      	mov	r3, r0
 8003798:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 800379a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000300 	.word	0x20000300
 80037ac:	20000364 	.word	0x20000364

080037b0 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	603a      	str	r2, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	460b      	mov	r3, r1
 80037be:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80037c0:	2304      	movs	r3, #4
 80037c2:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80037c8:	88bb      	ldrh	r3, [r7, #4]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3330      	adds	r3, #48	; 0x30
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <DRV_CANFDSPI_ReadHalfWord+0x9c>)
 80037dc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80037de:	88bb      	ldrh	r3, [r7, #4]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <DRV_CANFDSPI_ReadHalfWord+0x9c>)
 80037e4:	705a      	strb	r2, [r3, #1]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80037e6:	8abb      	ldrh	r3, [r7, #20]
 80037e8:	79f8      	ldrb	r0, [r7, #7]
 80037ea:	4a19      	ldr	r2, [pc, #100]	; (8003850 <DRV_CANFDSPI_ReadHalfWord+0xa0>)
 80037ec:	4917      	ldr	r1, [pc, #92]	; (800384c <DRV_CANFDSPI_ReadHalfWord+0x9c>)
 80037ee:	f002 f92b 	bl	8005a48 <DRV_SPI_TransferData>
 80037f2:	4603      	mov	r3, r0
 80037f4:	74fb      	strb	r3, [r7, #19]
    if (spiTransferError) {
 80037f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <DRV_CANFDSPI_ReadHalfWord+0x54>
        return spiTransferError;
 80037fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003802:	e01e      	b.n	8003842 <DRV_CANFDSPI_ReadHalfWord+0x92>
    }

    // Update data
    *rxd = 0;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 800380a:	2302      	movs	r3, #2
 800380c:	75fb      	strb	r3, [r7, #23]
 800380e:	e013      	b.n	8003838 <DRV_CANFDSPI_ReadHalfWord+0x88>
        x = (uint32_t) spiReceiveBuffer[i];
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <DRV_CANFDSPI_ReadHalfWord+0xa0>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	60fb      	str	r3, [r7, #12]
        *rxd += x << ((i - 2)*8);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	3b02      	subs	r3, #2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	b29b      	uxth	r3, r3
 800382a:	4413      	add	r3, r2
 800382c:	b29a      	uxth	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	3301      	adds	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d9e8      	bls.n	8003810 <DRV_CANFDSPI_ReadHalfWord+0x60>
    }

    return spiTransferError;
 800383e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000300 	.word	0x20000300
 8003850:	20000364 	.word	0x20000364

08003854 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
 800385e:	460b      	mov	r3, r1
 8003860:	80bb      	strh	r3, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 8003866:	2304      	movs	r3, #4
 8003868:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	72fb      	strb	r3, [r7, #11]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800386e:	88bb      	ldrh	r3, [r7, #4]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	b29b      	uxth	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3320      	adds	r3, #32
 800387e:	b2da      	uxtb	r2, r3
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <DRV_CANFDSPI_WriteHalfWord+0x78>)
 8003882:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <DRV_CANFDSPI_WriteHalfWord+0x78>)
 800388a:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e00b      	b.n	80038aa <DRV_CANFDSPI_WriteHalfWord+0x56>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	411a      	asrs	r2, r3
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	3302      	adds	r3, #2
 800389e:	b2d1      	uxtb	r1, r2
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <DRV_CANFDSPI_WriteHalfWord+0x78>)
 80038a2:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	3301      	adds	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d9f0      	bls.n	8003892 <DRV_CANFDSPI_WriteHalfWord+0x3e>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80038b0:	89bb      	ldrh	r3, [r7, #12]
 80038b2:	79f8      	ldrb	r0, [r7, #7]
 80038b4:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <DRV_CANFDSPI_WriteHalfWord+0x7c>)
 80038b6:	4905      	ldr	r1, [pc, #20]	; (80038cc <DRV_CANFDSPI_WriteHalfWord+0x78>)
 80038b8:	f002 f8c6 	bl	8005a48 <DRV_SPI_TransferData>
 80038bc:	4603      	mov	r3, r0
 80038be:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 80038c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000300 	.word	0x20000300
 80038d0:	20000364 	.word	0x20000364

080038d4 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60ba      	str	r2, [r7, #8]
 80038dc:	461a      	mov	r2, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	460b      	mov	r3, r1
 80038e4:	81bb      	strh	r3, [r7, #12]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	3302      	adds	r3, #2
 80038ee:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80038f4:	89bb      	ldrh	r3, [r7, #12]
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3330      	adds	r3, #48	; 0x30
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 8003908:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800390a:	89bb      	ldrh	r3, [r7, #12]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 8003910:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8003912:	2302      	movs	r3, #2
 8003914:	82fb      	strh	r3, [r7, #22]
 8003916:	e006      	b.n	8003926 <DRV_CANFDSPI_ReadByteArray+0x52>
        spiTransmitBuffer[i] = 0;
 8003918:	8afb      	ldrh	r3, [r7, #22]
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 800391c:	2100      	movs	r1, #0
 800391e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003920:	8afb      	ldrh	r3, [r7, #22]
 8003922:	3301      	adds	r3, #1
 8003924:	82fb      	strh	r3, [r7, #22]
 8003926:	8afa      	ldrh	r2, [r7, #22]
 8003928:	8abb      	ldrh	r3, [r7, #20]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3f4      	bcc.n	8003918 <DRV_CANFDSPI_ReadByteArray+0x44>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 800392e:	8abb      	ldrh	r3, [r7, #20]
 8003930:	7bf8      	ldrb	r0, [r7, #15]
 8003932:	4a10      	ldr	r2, [pc, #64]	; (8003974 <DRV_CANFDSPI_ReadByteArray+0xa0>)
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 8003936:	f002 f887 	bl	8005a48 <DRV_SPI_TransferData>
 800393a:	4603      	mov	r3, r0
 800393c:	74fb      	strb	r3, [r7, #19]

    // Update data
    for (i = 0; i < nBytes; i++) {
 800393e:	2300      	movs	r3, #0
 8003940:	82fb      	strh	r3, [r7, #22]
 8003942:	e00a      	b.n	800395a <DRV_CANFDSPI_ReadByteArray+0x86>
        rxd[i] = spiReceiveBuffer[i + 2];
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	1c9a      	adds	r2, r3, #2
 8003948:	8afb      	ldrh	r3, [r7, #22]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	440b      	add	r3, r1
 800394e:	4909      	ldr	r1, [pc, #36]	; (8003974 <DRV_CANFDSPI_ReadByteArray+0xa0>)
 8003950:	5c8a      	ldrb	r2, [r1, r2]
 8003952:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	3301      	adds	r3, #1
 8003958:	82fb      	strh	r3, [r7, #22]
 800395a:	8afa      	ldrh	r2, [r7, #22]
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	429a      	cmp	r2, r3
 8003960:	d3f0      	bcc.n	8003944 <DRV_CANFDSPI_ReadByteArray+0x70>
    }

    return spiTransferError;
 8003962:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000300 	.word	0x20000300
 8003974:	20000364 	.word	0x20000364

08003978 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60ba      	str	r2, [r7, #8]
 8003980:	461a      	mov	r2, r3
 8003982:	4603      	mov	r3, r0
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	460b      	mov	r3, r1
 8003988:	81bb      	strh	r3, [r7, #12]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	3302      	adds	r3, #2
 8003992:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8003998:	89bb      	ldrh	r3, [r7, #12]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29b      	uxth	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3320      	adds	r3, #32
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <DRV_CANFDSPI_WriteByteArray+0x80>)
 80039ac:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80039ae:	89bb      	ldrh	r3, [r7, #12]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <DRV_CANFDSPI_WriteByteArray+0x80>)
 80039b4:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 2; i < spiTransferSize; i++) {
 80039b6:	2302      	movs	r3, #2
 80039b8:	82fb      	strh	r3, [r7, #22]
 80039ba:	e00a      	b.n	80039d2 <DRV_CANFDSPI_WriteByteArray+0x5a>
        spiTransmitBuffer[i] = txd[i - 2];
 80039bc:	8afb      	ldrh	r3, [r7, #22]
 80039be:	3b02      	subs	r3, #2
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	441a      	add	r2, r3
 80039c4:	8afb      	ldrh	r3, [r7, #22]
 80039c6:	7811      	ldrb	r1, [r2, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <DRV_CANFDSPI_WriteByteArray+0x80>)
 80039ca:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80039cc:	8afb      	ldrh	r3, [r7, #22]
 80039ce:	3301      	adds	r3, #1
 80039d0:	82fb      	strh	r3, [r7, #22]
 80039d2:	8afa      	ldrh	r2, [r7, #22]
 80039d4:	8abb      	ldrh	r3, [r7, #20]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3f0      	bcc.n	80039bc <DRV_CANFDSPI_WriteByteArray+0x44>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80039da:	8abb      	ldrh	r3, [r7, #20]
 80039dc:	7bf8      	ldrb	r0, [r7, #15]
 80039de:	4a07      	ldr	r2, [pc, #28]	; (80039fc <DRV_CANFDSPI_WriteByteArray+0x84>)
 80039e0:	4905      	ldr	r1, [pc, #20]	; (80039f8 <DRV_CANFDSPI_WriteByteArray+0x80>)
 80039e2:	f002 f831 	bl	8005a48 <DRV_SPI_TransferData>
 80039e6:	4603      	mov	r3, r0
 80039e8:	74fb      	strb	r3, [r7, #19]

    return spiTransferError;
 80039ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000300 	.word	0x20000300
 80039fc:	20000364 	.word	0x20000364

08003a00 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60ba      	str	r2, [r7, #8]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	81bb      	strh	r3, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	833b      	strh	r3, [r7, #24]
    int8_t spiTransferError = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	75fb      	strb	r3, [r7, #23]

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8003a24:	89bb      	ldrh	r3, [r7, #12]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	3330      	adds	r3, #48	; 0x30
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8003a38:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8003a3a:	89bb      	ldrh	r3, [r7, #12]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8003a40:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8003a42:	2302      	movs	r3, #2
 8003a44:	83fb      	strh	r3, [r7, #30]
 8003a46:	e006      	b.n	8003a56 <DRV_CANFDSPI_ReadWordArray+0x56>
        spiTransmitBuffer[i] = 0;
 8003a48:	8bfb      	ldrh	r3, [r7, #30]
 8003a4a:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003a50:	8bfb      	ldrh	r3, [r7, #30]
 8003a52:	3301      	adds	r3, #1
 8003a54:	83fb      	strh	r3, [r7, #30]
 8003a56:	8bfa      	ldrh	r2, [r7, #30]
 8003a58:	8b3b      	ldrh	r3, [r7, #24]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3f4      	bcc.n	8003a48 <DRV_CANFDSPI_ReadWordArray+0x48>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003a5e:	8b3b      	ldrh	r3, [r7, #24]
 8003a60:	7bf8      	ldrb	r0, [r7, #15]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <DRV_CANFDSPI_ReadWordArray+0xdc>)
 8003a64:	491c      	ldr	r1, [pc, #112]	; (8003ad8 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8003a66:	f001 ffef 	bl	8005a48 <DRV_SPI_TransferData>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <DRV_CANFDSPI_ReadWordArray+0x7c>
        return spiTransferError;
 8003a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a7a:	e029      	b.n	8003ad0 <DRV_CANFDSPI_ReadWordArray+0xd0>
    }

    // Convert Byte array to Word array
    n = 2;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8003a80:	2300      	movs	r3, #0
 8003a82:	83fb      	strh	r3, [r7, #30]
 8003a84:	e01e      	b.n	8003ac4 <DRV_CANFDSPI_ReadWordArray+0xc4>
        w.word = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	83bb      	strh	r3, [r7, #28]
 8003a8e:	e00d      	b.n	8003aac <DRV_CANFDSPI_ReadWordArray+0xac>
            w.byte[j] = spiReceiveBuffer[n];
 8003a90:	8b7a      	ldrh	r2, [r7, #26]
 8003a92:	8bbb      	ldrh	r3, [r7, #28]
 8003a94:	4911      	ldr	r1, [pc, #68]	; (8003adc <DRV_CANFDSPI_ReadWordArray+0xdc>)
 8003a96:	5c8a      	ldrb	r2, [r1, r2]
 8003a98:	3320      	adds	r3, #32
 8003a9a:	443b      	add	r3, r7
 8003a9c:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8003aa0:	8bbb      	ldrh	r3, [r7, #28]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	83bb      	strh	r3, [r7, #28]
 8003aa6:	8b7b      	ldrh	r3, [r7, #26]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	837b      	strh	r3, [r7, #26]
 8003aac:	8bbb      	ldrh	r3, [r7, #28]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d9ee      	bls.n	8003a90 <DRV_CANFDSPI_ReadWordArray+0x90>
        }
        rxd[i] = w.word;
 8003ab2:	8bfb      	ldrh	r3, [r7, #30]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4413      	add	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8003abe:	8bfb      	ldrh	r3, [r7, #30]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	83fb      	strh	r3, [r7, #30]
 8003ac4:	8bfa      	ldrh	r2, [r7, #30]
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3dc      	bcc.n	8003a86 <DRV_CANFDSPI_ReadWordArray+0x86>
    }

    return spiTransferError;
 8003acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000300 	.word	0x20000300
 8003adc:	20000364 	.word	0x20000364

08003ae0 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8003af0:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <DRV_CANFDSPI_Configure+0x118>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	7a3b      	ldrb	r3, [r7, #8]
 8003b02:	f362 0304 	bfi	r3, r2, #0, #5
 8003b06:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	7a3b      	ldrb	r3, [r7, #8]
 8003b14:	f362 1345 	bfi	r3, r2, #5, #1
 8003b18:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	7a3b      	ldrb	r3, [r7, #8]
 8003b26:	f362 1386 	bfi	r3, r2, #6, #1
 8003b2a:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	7a7b      	ldrb	r3, [r7, #9]
 8003b38:	f362 0300 	bfi	r3, r2, #0, #1
 8003b3c:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	7a7b      	ldrb	r3, [r7, #9]
 8003b4a:	f362 0342 	bfi	r3, r2, #1, #2
 8003b4e:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	7a7b      	ldrb	r3, [r7, #9]
 8003b5c:	f362 1304 	bfi	r3, r2, #4, #1
 8003b60:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	7abb      	ldrb	r3, [r7, #10]
 8003b6e:	f362 0300 	bfi	r3, r2, #0, #1
 8003b72:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	7abb      	ldrb	r3, [r7, #10]
 8003b80:	f362 0341 	bfi	r3, r2, #1, #1
 8003b84:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	7abb      	ldrb	r3, [r7, #10]
 8003b92:	f362 0382 	bfi	r3, r2, #2, #1
 8003b96:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	7abb      	ldrb	r3, [r7, #10]
 8003ba4:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ba8:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	7abb      	ldrb	r3, [r7, #10]
 8003bb6:	f362 1304 	bfi	r3, r2, #4, #1
 8003bba:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f362 1307 	bfi	r3, r2, #4, #4
 8003bcc:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fdab 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <DRV_CANFDSPI_Configure+0x10c>
        return -1;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e001      	b.n	8003bf0 <DRV_CANFDSPI_Configure+0x110>
    }

    return spiTransferError;
 8003bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000000c 	.word	0x2000000c

08003bfc <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8003c04:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8003c0a:	7b3b      	ldrb	r3, [r7, #12]
 8003c0c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003c10:	b2d9      	uxtb	r1, r3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	7813      	ldrb	r3, [r2, #0]
 8003c16:	f361 0304 	bfi	r3, r1, #0, #5
 8003c1a:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8003c1c:	7b3b      	ldrb	r3, [r7, #12]
 8003c1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c22:	b2d9      	uxtb	r1, r3
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	7813      	ldrb	r3, [r2, #0]
 8003c28:	f361 1345 	bfi	r3, r1, #5, #1
 8003c2c:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8003c2e:	7b3b      	ldrb	r3, [r7, #12]
 8003c30:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c34:	b2d9      	uxtb	r1, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	7813      	ldrb	r3, [r2, #0]
 8003c3a:	f361 1386 	bfi	r3, r1, #6, #1
 8003c3e:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8003c40:	7b7b      	ldrb	r3, [r7, #13]
 8003c42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c46:	b2d9      	uxtb	r1, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	7813      	ldrb	r3, [r2, #0]
 8003c4c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003c50:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8003c52:	7b7b      	ldrb	r3, [r7, #13]
 8003c54:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003c58:	b2d9      	uxtb	r1, r3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	7853      	ldrb	r3, [r2, #1]
 8003c5e:	f361 0301 	bfi	r3, r1, #0, #2
 8003c62:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8003c64:	7b7b      	ldrb	r3, [r7, #13]
 8003c66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c6a:	b2d9      	uxtb	r1, r3
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	7853      	ldrb	r3, [r2, #1]
 8003c70:	f361 0382 	bfi	r3, r1, #2, #1
 8003c74:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8003c76:	7bbb      	ldrb	r3, [r7, #14]
 8003c78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c7c:	b2d9      	uxtb	r1, r3
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	7853      	ldrb	r3, [r2, #1]
 8003c82:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c86:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8003c88:	7bbb      	ldrb	r3, [r7, #14]
 8003c8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c8e:	b2d9      	uxtb	r1, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	7853      	ldrb	r3, [r2, #1]
 8003c94:	f361 1304 	bfi	r3, r1, #4, #1
 8003c98:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ca0:	b2d9      	uxtb	r1, r3
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	7853      	ldrb	r3, [r2, #1]
 8003ca6:	f361 1345 	bfi	r3, r1, #5, #1
 8003caa:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003cb2:	b2d9      	uxtb	r1, r3
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	7853      	ldrb	r3, [r2, #1]
 8003cb8:	f361 1386 	bfi	r3, r1, #6, #1
 8003cbc:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
 8003cc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cc4:	b2d9      	uxtb	r1, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	7853      	ldrb	r3, [r2, #1]
 8003cca:	f361 13c7 	bfi	r3, r1, #7, #1
 8003cce:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cd6:	b2d9      	uxtb	r1, r3
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	7893      	ldrb	r3, [r2, #2]
 8003cdc:	f361 0303 	bfi	r3, r1, #0, #4
 8003ce0:	7093      	strb	r3, [r2, #2]

    return 0;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460a      	mov	r2, r1
 8003cfe:	71fb      	strb	r3, [r7, #7]
 8003d00:	4613      	mov	r3, r2
 8003d02:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8003d0c:	f107 020e 	add.w	r2, r7, #14
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	2103      	movs	r1, #3
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fca5 	bl	8003664 <DRV_CANFDSPI_ReadByte>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	e01a      	b.n	8003d62 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8003d2c:	7bbb      	ldrb	r3, [r7, #14]
 8003d2e:	f023 0307 	bic.w	r3, r3, #7
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8003d36:	7bba      	ldrb	r2, [r7, #14]
 8003d38:	79bb      	ldrb	r3, [r7, #6]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8003d40:	7bba      	ldrb	r2, [r7, #14]
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	2103      	movs	r1, #3
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fcc0 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8003d58:	f06f 0301 	mvn.w	r3, #1
 8003d5c:	e001      	b.n	8003d62 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8003d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	603a      	str	r2, [r7, #0]
 8003d76:	71fb      	strb	r3, [r7, #7]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <DRV_CANFDSPI_TransmitChannelConfigure+0xb0>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.TxEnable = 1;
 8003d8a:	7a3b      	ldrb	r3, [r7, #8]
 8003d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d90:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	7afb      	ldrb	r3, [r7, #11]
 8003d9e:	f362 0304 	bfi	r3, r2, #0, #5
 8003da2:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	7afb      	ldrb	r3, [r7, #11]
 8003db0:	f362 1347 	bfi	r3, r2, #5, #3
 8003db4:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	7abb      	ldrb	r3, [r7, #10]
 8003dc2:	f362 1346 	bfi	r3, r2, #5, #2
 8003dc6:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	7abb      	ldrb	r3, [r7, #10]
 8003dd4:	f362 0304 	bfi	r3, r2, #0, #5
 8003dd8:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	7a3b      	ldrb	r3, [r7, #8]
 8003de6:	f362 1386 	bfi	r3, r2, #6, #1
 8003dea:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003dec:	79bb      	ldrb	r3, [r7, #6]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	0052      	lsls	r2, r2, #1
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3350      	adds	r3, #80	; 0x50
 8003dfc:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	89b9      	ldrh	r1, [r7, #12]
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fc93 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x78>)
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8003e2e:	7b3b      	ldrb	r3, [r7, #12]
 8003e30:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e34:	b2d9      	uxtb	r1, r3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	7813      	ldrb	r3, [r2, #0]
 8003e3a:	f361 0300 	bfi	r3, r1, #0, #1
 8003e3e:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003e46:	b2d9      	uxtb	r1, r3
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	7813      	ldrb	r3, [r2, #0]
 8003e4c:	f361 0345 	bfi	r3, r1, #1, #5
 8003e50:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8003e52:	7bbb      	ldrb	r3, [r7, #14]
 8003e54:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003e58:	b2d9      	uxtb	r1, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	7813      	ldrb	r3, [r2, #0]
 8003e5e:	f361 1387 	bfi	r3, r1, #6, #2
 8003e62:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003e6a:	b2d9      	uxtb	r1, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	7853      	ldrb	r3, [r2, #1]
 8003e70:	f361 0304 	bfi	r3, r1, #0, #5
 8003e74:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003e7c:	b2d9      	uxtb	r1, r3
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	7853      	ldrb	r3, [r2, #1]
 8003e82:	f361 1347 	bfi	r3, r1, #5, #3
 8003e86:	7053      	strb	r3, [r2, #1]

    return 0;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b0a0      	sub	sp, #128	; 0x80
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60ba      	str	r2, [r7, #8]
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003eb4:	7bbb      	ldrb	r3, [r7, #14]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	0052      	lsls	r2, r2, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3350      	adds	r3, #80	; 0x50
 8003ec4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8003ec8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ecc:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8003ed0:	7bf8      	ldrb	r0, [r7, #15]
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	f7ff fd94 	bl	8003a00 <DRV_CANFDSPI_ReadWordArray>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003ede:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	e0c5      	b.n	8004078 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8003eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eee:	667b      	str	r3, [r7, #100]	; 0x64
//    ciFifoCon.txBF.TxEnable = 1;
    if (!ciFifoCon.txBF.TxEnable) {
 8003ef0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003ef4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8003efe:	f06f 0301 	mvn.w	r3, #1
 8003f02:	e0b9      	b.n	8004078 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	791b      	ldrb	r3, [r3, #4]
 8003f08:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fc42 	bl	8005798 <DRV_CANFDSPI_DlcToDataBytes>
 8003f14:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8003f16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d202      	bcs.n	8003f26 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8003f20:	f06f 0302 	mvn.w	r3, #2
 8003f24:	e0a8      	b.n	8004078 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8003f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8003f2e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8003f3c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f44:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];
//    uint8_t rxBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	78db      	ldrb	r3, [r3, #3]
 8003f5e:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	791b      	ldrb	r3, [r3, #4]
 8003f64:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	795b      	ldrb	r3, [r3, #5]
 8003f6a:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	799b      	ldrb	r3, [r3, #6]
 8003f70:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	79db      	ldrb	r3, [r3, #7]
 8003f76:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f7e:	e010      	b.n	8003fa2 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8003f80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	441a      	add	r2, r3
 8003f88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	3380      	adds	r3, #128	; 0x80
 8003f92:	443b      	add	r3, r7
 8003f94:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8003f98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003fa6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d8e8      	bhi.n	8003f80 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8003fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02b      	beq.n	800401e <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8003fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f1c3 0304 	rsb	r3, r3, #4
 8003fd6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8003fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003fec:	e010      	b.n	8004010 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8003fee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003ff2:	f103 0208 	add.w	r2, r3, #8
 8003ff6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3380      	adds	r3, #128	; 0x80
 8003ffe:	443b      	add	r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8004006:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800400a:	3301      	adds	r3, #1
 800400c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004010:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004014:	b29b      	uxth	r3, r3
 8004016:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800401a:	429a      	cmp	r2, r3
 800401c:	d8e7      	bhi.n	8003fee <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 800401e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004022:	b29a      	uxth	r2, r3
 8004024:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004028:	4413      	add	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	3308      	adds	r3, #8
 800402e:	b29b      	uxth	r3, r3
 8004030:	f107 0210 	add.w	r2, r7, #16
 8004034:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8004038:	7bf8      	ldrb	r0, [r7, #15]
 800403a:	f7ff fc9d 	bl	8003978 <DRV_CANFDSPI_WriteByteArray>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8004044:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 800404c:	f06f 0303 	mvn.w	r3, #3
 8004050:	e012      	b.n	8004078 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    //test
    //DRV_CANFDSPI_ReadByteArray(index, a, rxBuffer, txdNumBytes + 8 + n);
    //test

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8004052:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8004056:	7bb9      	ldrb	r1, [r7, #14]
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f810 	bl	8004080 <DRV_CANFDSPI_TransmitChannelUpdate>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8004066:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 800406e:	f06f 0304 	mvn.w	r3, #4
 8004072:	e001      	b.n	8004078 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8004074:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8004078:	4618      	mov	r0, r3
 800407a:	3780      	adds	r7, #128	; 0x80
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
 800408a:	460b      	mov	r3, r1
 800408c:	71bb      	strb	r3, [r7, #6]
 800408e:	4613      	mov	r3, r2
 8004090:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8004096:	79bb      	ldrb	r3, [r7, #6]
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	0052      	lsls	r2, r2, #1
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3351      	adds	r3, #81	; 0x51
 80040a6:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 80040ac:	7a7b      	ldrb	r3, [r7, #9]
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 80040b4:	797b      	ldrb	r3, [r7, #5]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 80040ba:	7a7b      	ldrb	r3, [r7, #9]
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80040c2:	7a7a      	ldrb	r2, [r7, #9]
 80040c4:	89b9      	ldrh	r1, [r7, #12]
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff faff 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e001      	b.n	80040e4 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80040e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	603a      	str	r2, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
 80040f8:	460b      	mov	r3, r1
 80040fa:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 800410a:	79bb      	ldrb	r3, [r7, #6]
 800410c:	333e      	adds	r3, #62	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	89b9      	ldrh	r1, [r7, #12]
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fb08 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8004124:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	603a      	str	r2, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
 800413c:	460b      	mov	r3, r1
 800413e:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 800414e:	79bb      	ldrb	r3, [r7, #6]
 8004150:	b29b      	uxth	r3, r3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	b29b      	uxth	r3, r3
 8004156:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800415a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	89b9      	ldrh	r1, [r7, #12]
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fae4 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800416c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	4604      	mov	r4, r0
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4623      	mov	r3, r4
 8004188:	71fb      	strb	r3, [r7, #7]
 800418a:	4603      	mov	r3, r0
 800418c:	71bb      	strb	r3, [r7, #6]
 800418e:	460b      	mov	r3, r1
 8004190:	717b      	strb	r3, [r7, #5]
 8004192:	4613      	mov	r3, r2
 8004194:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 800419a:	793b      	ldrb	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80041a0:	7a3b      	ldrb	r3, [r7, #8]
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	723b      	strb	r3, [r7, #8]
 80041a8:	e003      	b.n	80041b2 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80041aa:	7a3b      	ldrb	r3, [r7, #8]
 80041ac:	f36f 13c7 	bfc	r3, #7, #1
 80041b0:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80041b2:	797b      	ldrb	r3, [r7, #5]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	7a3b      	ldrb	r3, [r7, #8]
 80041bc:	f362 0304 	bfi	r3, r2, #0, #5
 80041c0:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80041c2:	79bb      	ldrb	r3, [r7, #6]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80041ca:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80041cc:	7a3a      	ldrb	r2, [r7, #8]
 80041ce:	89b9      	ldrh	r1, [r7, #12]
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fa7a 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}

080041e8 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	603a      	str	r2, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
 80041f4:	460b      	mov	r3, r1
 80041f6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	81bb      	strh	r3, [r7, #12]

#ifdef CAN_TXQUEUE_IMPLEMENTED
    if (channel == CAN_TXQUEUE_CH0) {
 8004200:	79bb      	ldrb	r3, [r7, #6]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 8004206:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800420a:	e034      	b.n	8004276 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8e>
    }
#endif

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <DRV_CANFDSPI_ReceiveChannelConfigure+0x98>)
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8004212:	7a3b      	ldrb	r3, [r7, #8]
 8004214:	f36f 13c7 	bfc	r3, #7, #1
 8004218:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8004222:	b2da      	uxtb	r2, r3
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	f362 0304 	bfi	r3, r2, #0, #5
 800422a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	f362 1347 	bfi	r3, r2, #5, #3
 800423c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	7a3b      	ldrb	r3, [r7, #8]
 800424a:	f362 1345 	bfi	r3, r2, #5, #1
 800424e:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8004250:	79bb      	ldrb	r3, [r7, #6]
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	0052      	lsls	r2, r2, #1
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	b29b      	uxth	r3, r3
 800425e:	3350      	adds	r3, #80	; 0x50
 8004260:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	89b9      	ldrh	r1, [r7, #12]
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fa61 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8004272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	2000000c 	.word	0x2000000c

08004284 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x54>)
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004298:	b2d9      	uxtb	r1, r3
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	7813      	ldrb	r3, [r2, #0]
 800429e:	f361 0345 	bfi	r3, r1, #1, #5
 80042a2:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80042aa:	b2d9      	uxtb	r1, r3
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	8813      	ldrh	r3, [r2, #0]
 80042b0:	f361 1388 	bfi	r3, r1, #6, #3
 80042b4:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80042b6:	7b3b      	ldrb	r3, [r7, #12]
 80042b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80042bc:	b2d9      	uxtb	r1, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	7813      	ldrb	r3, [r2, #0]
 80042c2:	f361 0300 	bfi	r3, r1, #0, #1
 80042c6:	7013      	strb	r3, [r2, #0]

    return 0;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	2000000c 	.word	0x2000000c

080042dc <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b0a0      	sub	sp, #128	; 0x80
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60ba      	str	r2, [r7, #8]
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	4603      	mov	r3, r0
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	460b      	mov	r3, r1
 80042ec:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	b29b      	uxth	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	0052      	lsls	r2, r2, #1
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	b29b      	uxth	r3, r3
 800430e:	3350      	adds	r3, #80	; 0x50
 8004310:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8004314:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004318:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800431c:	7bf8      	ldrb	r0, [r7, #15]
 800431e:	2303      	movs	r3, #3
 8004320:	f7ff fb6e 	bl	8003a00 <DRV_CANFDSPI_ReadWordArray>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800432a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	e114      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 800433c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800434a:	f06f 0301 	mvn.w	r3, #1
 800434e:	e108      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8004350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004352:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8004354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004356:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8004358:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	b29b      	uxth	r3, r3
 8004362:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 8004366:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800436a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800436e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 8004372:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004376:	3308      	adds	r3, #8
 8004378:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 800437c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 800438a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800438e:	3304      	adds	r3, #4
 8004390:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 8004394:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80043a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	3304      	adds	r3, #4
 80043ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80043b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80043b6:	2b4c      	cmp	r3, #76	; 0x4c
 80043b8:	d902      	bls.n	80043c0 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80043ba:	234c      	movs	r3, #76	; 0x4c
 80043bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80043c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f107 0214 	add.w	r2, r7, #20
 80043ca:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80043ce:	7bf8      	ldrb	r0, [r7, #15]
 80043d0:	f7ff fa80 	bl	80038d4 <DRV_CANFDSPI_ReadByteArray>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80043da:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80043e2:	f06f 0302 	mvn.w	r3, #2
 80043e6:	e0bc      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
	

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80043e8:	7d3b      	ldrb	r3, [r7, #20]
 80043ea:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80043ec:	7d7b      	ldrb	r3, [r7, #21]
 80043ee:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80043f0:	7dbb      	ldrb	r3, [r7, #22]
 80043f2:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 80043fe:	7e3b      	ldrb	r3, [r7, #24]
 8004400:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 8004402:	7e7b      	ldrb	r3, [r7, #25]
 8004404:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8004406:	7ebb      	ldrb	r3, [r7, #26]
 8004408:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 800440a:	7efb      	ldrb	r3, [r7, #27]
 800440c:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8004414:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d027      	beq.n	8004472 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 8004422:	7f3b      	ldrb	r3, [r7, #28]
 8004424:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8004426:	7f7b      	ldrb	r3, [r7, #29]
 8004428:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 800442a:	7fbb      	ldrb	r3, [r7, #30]
 800442c:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800442e:	7ffb      	ldrb	r3, [r7, #31]
 8004430:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8004438:	2300      	movs	r3, #0
 800443a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800443e:	e011      	b.n	8004464 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8004440:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004444:	f103 020c 	add.w	r2, r3, #12
 8004448:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	440b      	add	r3, r1
 8004450:	3280      	adds	r2, #128	; 0x80
 8004452:	443a      	add	r2, r7
 8004454:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8004458:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800445a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800445e:	3301      	adds	r3, #1
 8004460:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004464:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8004468:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800446c:	429a      	cmp	r2, r3
 800446e:	d3e7      	bcc.n	8004440 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8004470:	e01e      	b.n	80044b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8004478:	2300      	movs	r3, #0
 800447a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800447e:	e011      	b.n	80044a4 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8004480:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004484:	f103 0208 	add.w	r2, r3, #8
 8004488:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	440b      	add	r3, r1
 8004490:	3280      	adds	r2, #128	; 0x80
 8004492:	443a      	add	r2, r7
 8004494:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8004498:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800449a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800449e:	3301      	adds	r3, #1
 80044a0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80044a4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80044a8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3e7      	bcc.n	8004480 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80044b0:	7bba      	ldrb	r2, [r7, #14]
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f858 	bl	800456c <DRV_CANFDSPI_ReceiveChannelUpdate>
 80044bc:	4603      	mov	r3, r0
 80044be:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80044c2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80044ca:	f06f 0303 	mvn.w	r3, #3
 80044ce:	e048      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
    }
	
	//�Ķ�������ֵ��������֡�ĳ���
	switch(ba[4] & 0x0f)
 80044d0:	7e3b      	ldrb	r3, [r7, #24]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d842      	bhi.n	8004560 <DRV_CANFDSPI_ReceiveMessageGet+0x284>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <DRV_CANFDSPI_ReceiveMessageGet+0x204>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004521 	.word	0x08004521
 80044e4:	08004525 	.word	0x08004525
 80044e8:	08004529 	.word	0x08004529
 80044ec:	0800452d 	.word	0x0800452d
 80044f0:	08004531 	.word	0x08004531
 80044f4:	08004535 	.word	0x08004535
 80044f8:	08004539 	.word	0x08004539
 80044fc:	0800453d 	.word	0x0800453d
 8004500:	08004541 	.word	0x08004541
 8004504:	08004545 	.word	0x08004545
 8004508:	08004549 	.word	0x08004549
 800450c:	0800454d 	.word	0x0800454d
 8004510:	08004551 	.word	0x08004551
 8004514:	08004555 	.word	0x08004555
 8004518:	08004559 	.word	0x08004559
 800451c:	0800455d 	.word	0x0800455d
	{
		case 0x00:
			return 0;
 8004520:	2300      	movs	r3, #0
 8004522:	e01e      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x01:
			return 1;
 8004524:	2301      	movs	r3, #1
 8004526:	e01c      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x02:
			return 2;
 8004528:	2302      	movs	r3, #2
 800452a:	e01a      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x03:
			return 3;
 800452c:	2303      	movs	r3, #3
 800452e:	e018      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x04:
			return 4;
 8004530:	2304      	movs	r3, #4
 8004532:	e016      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x05:
			return 5;
 8004534:	2305      	movs	r3, #5
 8004536:	e014      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x06:
			return 6;
 8004538:	2306      	movs	r3, #6
 800453a:	e012      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x07:
			return 7;
 800453c:	2307      	movs	r3, #7
 800453e:	e010      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x08:
			return 8;
 8004540:	2308      	movs	r3, #8
 8004542:	e00e      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x09:
			return 12;
 8004544:	230c      	movs	r3, #12
 8004546:	e00c      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0a:
			return 16;
 8004548:	2310      	movs	r3, #16
 800454a:	e00a      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0b:
			return 20;
 800454c:	2314      	movs	r3, #20
 800454e:	e008      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0c:
			return 24;
 8004550:	2318      	movs	r3, #24
 8004552:	e006      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0d:
			return 32;
 8004554:	2320      	movs	r3, #32
 8004556:	e004      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0e:
			return 48;
 8004558:	2330      	movs	r3, #48	; 0x30
 800455a:	e002      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0f:
			return 64;
 800455c:	2340      	movs	r3, #64	; 0x40
 800455e:	e000      	b.n	8004562 <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		default:
			return 64;
 8004560:	2340      	movs	r3, #64	; 0x40
	}
    //return spiTransferError;
}
 8004562:	4618      	mov	r0, r3
 8004564:	3780      	adds	r7, #128	; 0x80
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop

0800456c <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	460a      	mov	r2, r1
 8004576:	71fb      	strb	r3, [r7, #7]
 8004578:	4613      	mov	r3, r2
 800457a:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8004588:	79bb      	ldrb	r3, [r7, #6]
 800458a:	b29b      	uxth	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	b29b      	uxth	r3, r3
 8004596:	3351      	adds	r3, #81	; 0x51
 8004598:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 800459a:	7a7b      	ldrb	r3, [r7, #9]
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80045a2:	7a7a      	ldrb	r2, [r7, #9]
 80045a4:	89f9      	ldrh	r1, [r7, #14]
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f88f 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 80045ae:	4603      	mov	r3, r0
 80045b0:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80045b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	4603      	mov	r3, r0
 80045c6:	460a      	mov	r2, r1
 80045c8:	71fb      	strb	r3, [r7, #7]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 80045d6:	231e      	movs	r3, #30
 80045d8:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 80045de:	f107 0208 	add.w	r2, r7, #8
 80045e2:	89b9      	ldrh	r1, [r7, #12]
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f8e2 	bl	80037b0 <DRV_CANFDSPI_ReadHalfWord>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80045f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	e01b      	b.n	8004636 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 80045fe:	893b      	ldrh	r3, [r7, #8]
 8004600:	b21a      	sxth	r2, r3
 8004602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004606:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800460a:	b21b      	sxth	r3, r3
 800460c:	4313      	orrs	r3, r2
 800460e:	b21b      	sxth	r3, r3
 8004610:	b29b      	uxth	r3, r3
 8004612:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8004614:	893a      	ldrh	r2, [r7, #8]
 8004616:	89b9      	ldrh	r1, [r7, #12]
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff f91a 	bl	8003854 <DRV_CANFDSPI_WriteHalfWord>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 800462c:	f06f 0301 	mvn.w	r3, #1
 8004630:	e001      	b.n	8004636 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8004632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	603a      	str	r2, [r7, #0]
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	460b      	mov	r3, r1
 800464c:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800465a:	79bb      	ldrb	r3, [r7, #6]
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	0052      	lsls	r2, r2, #1
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	b29b      	uxth	r3, r3
 8004668:	3354      	adds	r3, #84	; 0x54
 800466a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800466c:	f107 0208 	add.w	r2, r7, #8
 8004670:	89b9      	ldrh	r1, [r7, #12]
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fff5 	bl	8003664 <DRV_CANFDSPI_ReadByte>
 800467a:	4603      	mov	r3, r0
 800467c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800467e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	e007      	b.n	800469c <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 800468c:	7a3b      	ldrb	r3, [r7, #8]
 800468e:	f003 0317 	and.w	r3, r3, #23
 8004692:	b2da      	uxtb	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8004698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <DRV_CANFDSPI_TransmitChannelEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_TransmitChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT flags)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
 80046ae:	460b      	mov	r3, r1
 80046b0:	71bb      	strb	r3, [r7, #6]
 80046b2:	4613      	mov	r3, r2
 80046b4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80046be:	79bb      	ldrb	r3, [r7, #6]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	0052      	lsls	r2, r2, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3350      	adds	r3, #80	; 0x50
 80046ce:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80046d4:	f107 0208 	add.w	r2, r7, #8
 80046d8:	89b9      	ldrh	r1, [r7, #12]
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe ffc1 	bl	8003664 <DRV_CANFDSPI_ReadByte>
 80046e2:	4603      	mov	r3, r0
 80046e4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <DRV_CANFDSPI_TransmitChannelEventEnable+0x50>
        return -1;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	e01b      	b.n	800472c <DRV_CANFDSPI_TransmitChannelEventEnable+0x88>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_TX_FIFO_ALL_EVENTS);
 80046f4:	7a3b      	ldrb	r3, [r7, #8]
 80046f6:	b25a      	sxtb	r2, r3
 80046f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80046fc:	f003 0317 	and.w	r3, r3, #23
 8004700:	b25b      	sxtb	r3, r3
 8004702:	4313      	orrs	r3, r2
 8004704:	b25b      	sxtb	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 800470a:	7a3a      	ldrb	r2, [r7, #8]
 800470c:	89b9      	ldrh	r1, [r7, #12]
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe ffdb 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 8004716:	4603      	mov	r3, r0
 8004718:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <DRV_CANFDSPI_TransmitChannelEventEnable+0x84>
        return -2;
 8004722:	f06f 0301 	mvn.w	r3, #1
 8004726:	e001      	b.n	800472c <DRV_CANFDSPI_TransmitChannelEventEnable+0x88>
    }

    return spiTransferError;
 8004728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
 800473e:	460b      	mov	r3, r1
 8004740:	71bb      	strb	r3, [r7, #6]
 8004742:	4613      	mov	r3, r2
 8004744:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	81bb      	strh	r3, [r7, #12]

#ifdef CAN_TXQUEUE_IMPLEMENTED
    if (channel == CAN_TXQUEUE_CH0) return -100;
 800474e:	79bb      	ldrb	r3, [r7, #6]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8004754:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004758:	e036      	b.n	80047c8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
#endif

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800475a:	79bb      	ldrb	r3, [r7, #6]
 800475c:	b29b      	uxth	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	0052      	lsls	r2, r2, #1
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	b29b      	uxth	r3, r3
 8004768:	3350      	adds	r3, #80	; 0x50
 800476a:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 8004770:	f107 0208 	add.w	r2, r7, #8
 8004774:	89b9      	ldrh	r1, [r7, #12]
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe ff73 	bl	8003664 <DRV_CANFDSPI_ReadByte>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	e01b      	b.n	80047c8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8004790:	7a3b      	ldrb	r3, [r7, #8]
 8004792:	b25a      	sxtb	r2, r3
 8004794:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	b25b      	sxtb	r3, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 80047a6:	7a3a      	ldrb	r2, [r7, #8]
 80047a8:	89b9      	ldrh	r1, [r7, #12]
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ff8d 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 80047b2:	4603      	mov	r3, r0
 80047b4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80047b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 80047be:	f06f 0301 	mvn.w	r3, #1
 80047c2:	e001      	b.n	80047c8 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 80047c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80047e2:	f107 020e 	add.w	r2, r7, #14
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	f640 610c 	movw	r1, #3596	; 0xe0c
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe ff39 	bl	8003664 <DRV_CANFDSPI_ReadByte>
 80047f2:	4603      	mov	r3, r0
 80047f4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e015      	b.n	8004830 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8004804:	7bbb      	ldrb	r3, [r7, #14]
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 800480e:	7bba      	ldrb	r2, [r7, #14]
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	f640 610c 	movw	r1, #3596	; 0xe0c
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe ff58 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8004828:	f06f 0301 	mvn.w	r3, #1
 800482c:	e000      	b.n	8004830 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b09e      	sub	sp, #120	; 0x78
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	460a      	mov	r2, r1
 8004842:	71fb      	strb	r3, [r7, #7]
 8004844:	4613      	mov	r3, r2
 8004846:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH];
    uint32_t k;
    int8_t spiTransferError = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
 800484e:	2300      	movs	r3, #0
 8004850:	677b      	str	r3, [r7, #116]	; 0x74
 8004852:	e008      	b.n	8004866 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8004854:	f107 020c 	add.w	r2, r7, #12
 8004858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485a:	4413      	add	r3, r2
 800485c:	79ba      	ldrb	r2, [r7, #6]
 800485e:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
 8004860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004862:	3301      	adds	r3, #1
 8004864:	677b      	str	r3, [r7, #116]	; 0x74
 8004866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004868:	2b63      	cmp	r3, #99	; 0x63
 800486a:	d9f3      	bls.n	8004854 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 800486c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004870:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
 8004874:	2300      	movs	r3, #0
 8004876:	677b      	str	r3, [r7, #116]	; 0x74
 8004878:	e019      	b.n	80048ae <DRV_CANFDSPI_RamInit+0x76>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH);
 800487a:	f107 020c 	add.w	r2, r7, #12
 800487e:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8004882:	79f8      	ldrb	r0, [r7, #7]
 8004884:	2364      	movs	r3, #100	; 0x64
 8004886:	f7ff f877 	bl	8003978 <DRV_CANFDSPI_WriteByteArray>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        if (spiTransferError) {
 8004890:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <DRV_CANFDSPI_RamInit+0x66>
            return -1;
 8004898:	f04f 33ff 	mov.w	r3, #4294967295
 800489c:	e00c      	b.n	80048b8 <DRV_CANFDSPI_RamInit+0x80>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH;
 800489e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80048a2:	3364      	adds	r3, #100	; 0x64
 80048a4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
 80048a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048aa:	3301      	adds	r3, #1
 80048ac:	677b      	str	r3, [r7, #116]	; 0x74
 80048ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b0:	2b13      	cmp	r3, #19
 80048b2:	d9e2      	bls.n	800487a <DRV_CANFDSPI_RamInit+0x42>
    }

    return spiTransferError;
 80048b4:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3778      	adds	r7, #120	; 0x78
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	71fb      	strb	r3, [r7, #7]
 80048d2:	4603      	mov	r3, r0
 80048d4:	71bb      	strb	r3, [r7, #6]
 80048d6:	460b      	mov	r3, r1
 80048d8:	717b      	strb	r3, [r7, #5]
 80048da:	4613      	mov	r3, r2
 80048dc:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80048e2:	793b      	ldrb	r3, [r7, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d036      	beq.n	8004956 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	dc4c      	bgt.n	8004986 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d018      	beq.n	8004926 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80048f4:	e047      	b.n	8004986 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80048f6:	79ba      	ldrb	r2, [r7, #6]
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 f84b 	bl	8004998 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8004902:	4603      	mov	r3, r0
 8004904:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 800490e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004912:	e03d      	b.n	8004990 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8004914:	797a      	ldrb	r2, [r7, #5]
 8004916:	79b9      	ldrb	r1, [r7, #6]
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f8c4 	bl	8004aa8 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
            break;
 8004924:	e032      	b.n	800498c <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8004926:	79ba      	ldrb	r2, [r7, #6]
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 faf3 	bl	8004f18 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8004932:	4603      	mov	r3, r0
 8004934:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004942:	e025      	b.n	8004990 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8004944:	797a      	ldrb	r2, [r7, #5]
 8004946:	79b9      	ldrb	r1, [r7, #6]
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb72 	bl	8005034 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
            break;
 8004954:	e01a      	b.n	800498c <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8004956:	79ba      	ldrb	r2, [r7, #6]
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fd13 	bl	8005388 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	e00d      	b.n	8004990 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8004974:	797a      	ldrb	r2, [r7, #5]
 8004976:	79b9      	ldrb	r1, [r7, #6]
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fd92 	bl	80054a4 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
            break;
 8004984:	e002      	b.n	800498c <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8004986:	23ff      	movs	r3, #255	; 0xff
 8004988:	73fb      	strb	r3, [r7, #15]
            break;
 800498a:	bf00      	nop
    }

    return spiTransferError;
 800498c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}

08004998 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	460a      	mov	r2, r1
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80049ac:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x10c>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80049b2:	79bb      	ldrb	r3, [r7, #6]
 80049b4:	2b11      	cmp	r3, #17
 80049b6:	d863      	bhi.n	8004a80 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe8>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x28>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	08004a09 	.word	0x08004a09
 80049c8:	08004a09 	.word	0x08004a09
 80049cc:	08004a09 	.word	0x08004a09
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a27 	.word	0x08004a27
 80049e4:	08004a27 	.word	0x08004a27
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a27 	.word	0x08004a27
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a45 	.word	0x08004a45
 8004a00:	08004a45 	.word	0x08004a45
 8004a04:	08004a63 	.word	0x08004a63
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8004a0c:	233e      	movs	r3, #62	; 0x3e
 8004a0e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004a10:	7a7b      	ldrb	r3, [r7, #9]
 8004a12:	220f      	movs	r2, #15
 8004a14:	f362 0306 	bfi	r3, r2, #0, #7
 8004a18:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004a1a:	7a3b      	ldrb	r3, [r7, #8]
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	f362 0306 	bfi	r3, r2, #0, #7
 8004a22:	723b      	strb	r3, [r7, #8]
            break;
 8004a24:	e02f      	b.n	8004a86 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8004a2a:	237e      	movs	r3, #126	; 0x7e
 8004a2c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8004a2e:	7a7b      	ldrb	r3, [r7, #9]
 8004a30:	221f      	movs	r2, #31
 8004a32:	f362 0306 	bfi	r3, r2, #0, #7
 8004a36:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004a38:	7a3b      	ldrb	r3, [r7, #8]
 8004a3a:	221f      	movs	r2, #31
 8004a3c:	f362 0306 	bfi	r3, r2, #0, #7
 8004a40:	723b      	strb	r3, [r7, #8]
            break;
 8004a42:	e020      	b.n	8004a86 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004a48:	231e      	movs	r3, #30
 8004a4a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8004a4c:	7a7b      	ldrb	r3, [r7, #9]
 8004a4e:	2207      	movs	r2, #7
 8004a50:	f362 0306 	bfi	r3, r2, #0, #7
 8004a54:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004a56:	7a3b      	ldrb	r3, [r7, #8]
 8004a58:	2207      	movs	r2, #7
 8004a5a:	f362 0306 	bfi	r3, r2, #0, #7
 8004a5e:	723b      	strb	r3, [r7, #8]
            break;
 8004a60:	e011      	b.n	8004a86 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8004a66:	23fe      	movs	r3, #254	; 0xfe
 8004a68:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8004a6a:	7a7b      	ldrb	r3, [r7, #9]
 8004a6c:	223f      	movs	r2, #63	; 0x3f
 8004a6e:	f362 0306 	bfi	r3, r2, #0, #7
 8004a72:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8004a74:	7a3b      	ldrb	r3, [r7, #8]
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	f362 0306 	bfi	r3, r2, #0, #7
 8004a7c:	723b      	strb	r3, [r7, #8]
            break;
 8004a7e:	e002      	b.n	8004a86 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        default:
            return -1;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
 8004a84:	e009      	b.n	8004a9a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x102>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fe4f 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8004a92:	4603      	mov	r3, r0
 8004a94:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8004a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c

08004aa8 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	71bb      	strb	r3, [r7, #6]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004abe:	4be2      	ldr	r3, [pc, #904]	; (8004e48 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8004ac8:	7abb      	ldrb	r3, [r7, #10]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f362 0301 	bfi	r3, r2, #0, #2
 8004ad0:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8004ad6:	79bb      	ldrb	r3, [r7, #6]
 8004ad8:	2b11      	cmp	r3, #17
 8004ada:	f200 81f5 	bhi.w	8004ec8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b6b 	.word	0x08004b6b
 8004aec:	08004ba9 	.word	0x08004ba9
 8004af0:	08004be7 	.word	0x08004be7
 8004af4:	08004c25 	.word	0x08004c25
 8004af8:	08004c63 	.word	0x08004c63
 8004afc:	08004c9d 	.word	0x08004c9d
 8004b00:	08004cd1 	.word	0x08004cd1
 8004b04:	08004d03 	.word	0x08004d03
 8004b08:	08004d49 	.word	0x08004d49
 8004b0c:	08004d8f 	.word	0x08004d8f
 8004b10:	08004dcd 	.word	0x08004dcd
 8004b14:	08004e0b 	.word	0x08004e0b
 8004b18:	08004e4d 	.word	0x08004e4d
 8004b1c:	08004e8b 	.word	0x08004e8b
 8004b20:	08004be7 	.word	0x08004be7
 8004b24:	08004c9d 	.word	0x08004c9d
 8004b28:	08004d03 	.word	0x08004d03
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	221e      	movs	r2, #30
 8004b34:	f362 0304 	bfi	r3, r2, #0, #5
 8004b38:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004b3a:	7b7b      	ldrb	r3, [r7, #13]
 8004b3c:	2207      	movs	r2, #7
 8004b3e:	f362 0303 	bfi	r3, r2, #0, #4
 8004b42:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004b44:	7b3b      	ldrb	r3, [r7, #12]
 8004b46:	2207      	movs	r2, #7
 8004b48:	f362 0303 	bfi	r3, r2, #0, #4
 8004b4c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004b4e:	7a7b      	ldrb	r3, [r7, #9]
 8004b50:	221f      	movs	r2, #31
 8004b52:	f362 0306 	bfi	r3, r2, #0, #7
 8004b56:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	7a3b      	ldrb	r3, [r7, #8]
 8004b62:	f362 0305 	bfi	r3, r2, #0, #6
 8004b66:	723b      	strb	r3, [r7, #8]
            break;
 8004b68:	e1b1      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004b6e:	7bbb      	ldrb	r3, [r7, #14]
 8004b70:	220e      	movs	r2, #14
 8004b72:	f362 0304 	bfi	r3, r2, #0, #5
 8004b76:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004b78:	7b7b      	ldrb	r3, [r7, #13]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	f362 0303 	bfi	r3, r2, #0, #4
 8004b80:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004b82:	7b3b      	ldrb	r3, [r7, #12]
 8004b84:	2203      	movs	r2, #3
 8004b86:	f362 0303 	bfi	r3, r2, #0, #4
 8004b8a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004b8c:	7a7b      	ldrb	r3, [r7, #9]
 8004b8e:	220f      	movs	r2, #15
 8004b90:	f362 0306 	bfi	r3, r2, #0, #7
 8004b94:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	7a3b      	ldrb	r3, [r7, #8]
 8004ba0:	f362 0305 	bfi	r3, r2, #0, #6
 8004ba4:	723b      	strb	r3, [r7, #8]
            break;
 8004ba6:	e192      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	2208      	movs	r2, #8
 8004bb0:	f362 0304 	bfi	r3, r2, #0, #5
 8004bb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004bb6:	7b7b      	ldrb	r3, [r7, #13]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f362 0303 	bfi	r3, r2, #0, #4
 8004bbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004bc0:	7b3b      	ldrb	r3, [r7, #12]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f362 0303 	bfi	r3, r2, #0, #4
 8004bc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8004bca:	7a7b      	ldrb	r3, [r7, #9]
 8004bcc:	2209      	movs	r2, #9
 8004bce:	f362 0306 	bfi	r3, r2, #0, #7
 8004bd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	7a3b      	ldrb	r3, [r7, #8]
 8004bde:	f362 0305 	bfi	r3, r2, #0, #6
 8004be2:	723b      	strb	r3, [r7, #8]
            break;
 8004be4:	e173      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	2206      	movs	r2, #6
 8004bee:	f362 0304 	bfi	r3, r2, #0, #5
 8004bf2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004bf4:	7b7b      	ldrb	r3, [r7, #13]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f362 0303 	bfi	r3, r2, #0, #4
 8004bfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004bfe:	7b3b      	ldrb	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f362 0303 	bfi	r3, r2, #0, #4
 8004c06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004c08:	7a7b      	ldrb	r3, [r7, #9]
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	f362 0306 	bfi	r3, r2, #0, #7
 8004c10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	7a3b      	ldrb	r3, [r7, #8]
 8004c1c:	f362 0305 	bfi	r3, r2, #0, #6
 8004c20:	723b      	strb	r3, [r7, #8]
            break;
 8004c22:	e154      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8004c28:	7bbb      	ldrb	r3, [r7, #14]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	f362 0304 	bfi	r3, r2, #0, #5
 8004c30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004c32:	7b7b      	ldrb	r3, [r7, #13]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f362 0303 	bfi	r3, r2, #0, #4
 8004c3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004c3c:	7b3b      	ldrb	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f362 0303 	bfi	r3, r2, #0, #4
 8004c44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8004c46:	7a7b      	ldrb	r3, [r7, #9]
 8004c48:	2205      	movs	r2, #5
 8004c4a:	f362 0306 	bfi	r3, r2, #0, #7
 8004c4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	7a3b      	ldrb	r3, [r7, #8]
 8004c5a:	f362 0305 	bfi	r3, r2, #0, #6
 8004c5e:	723b      	strb	r3, [r7, #8]
            break;
 8004c60:	e135      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	f362 0304 	bfi	r3, r2, #0, #5
 8004c6e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004c70:	7b7b      	ldrb	r3, [r7, #13]
 8004c72:	f36f 0303 	bfc	r3, #0, #4
 8004c76:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004c78:	7b3b      	ldrb	r3, [r7, #12]
 8004c7a:	f36f 0303 	bfc	r3, #0, #4
 8004c7e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8004c80:	7a7b      	ldrb	r3, [r7, #9]
 8004c82:	2204      	movs	r2, #4
 8004c84:	f362 0306 	bfi	r3, r2, #0, #7
 8004c88:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	7a3b      	ldrb	r3, [r7, #8]
 8004c94:	f362 0305 	bfi	r3, r2, #0, #6
 8004c98:	723b      	strb	r3, [r7, #8]
            break;
 8004c9a:	e118      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004ca0:	7bbb      	ldrb	r3, [r7, #14]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f362 0304 	bfi	r3, r2, #0, #5
 8004ca8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004caa:	7b7b      	ldrb	r3, [r7, #13]
 8004cac:	f36f 0303 	bfc	r3, #0, #4
 8004cb0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004cb2:	7b3b      	ldrb	r3, [r7, #12]
 8004cb4:	f36f 0303 	bfc	r3, #0, #4
 8004cb8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004cba:	7a7b      	ldrb	r3, [r7, #9]
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	f362 0306 	bfi	r3, r2, #0, #7
 8004cc2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8004cc4:	7a3b      	ldrb	r3, [r7, #8]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f362 0305 	bfi	r3, r2, #0, #6
 8004ccc:	723b      	strb	r3, [r7, #8]
            break;
 8004cce:	e0fe      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f362 0304 	bfi	r3, r2, #0, #5
 8004cdc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	f36f 0303 	bfc	r3, #0, #4
 8004ce4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004ce6:	7b3b      	ldrb	r3, [r7, #12]
 8004ce8:	f36f 0303 	bfc	r3, #0, #4
 8004cec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8004cee:	7a7b      	ldrb	r3, [r7, #9]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f362 0306 	bfi	r3, r2, #0, #7
 8004cf6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8004cf8:	7a3b      	ldrb	r3, [r7, #8]
 8004cfa:	f36f 0305 	bfc	r3, #0, #6
 8004cfe:	723b      	strb	r3, [r7, #8]
            break;
 8004d00:	e0e5      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004d06:	7bbb      	ldrb	r3, [r7, #14]
 8004d08:	221e      	movs	r2, #30
 8004d0a:	f362 0304 	bfi	r3, r2, #0, #5
 8004d0e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004d10:	7b7b      	ldrb	r3, [r7, #13]
 8004d12:	2207      	movs	r2, #7
 8004d14:	f362 0303 	bfi	r3, r2, #0, #4
 8004d18:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004d1a:	7b3b      	ldrb	r3, [r7, #12]
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	f362 0303 	bfi	r3, r2, #0, #4
 8004d22:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004d24:	7a7b      	ldrb	r3, [r7, #9]
 8004d26:	221f      	movs	r2, #31
 8004d28:	f362 0306 	bfi	r3, r2, #0, #7
 8004d2c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	7a3b      	ldrb	r3, [r7, #8]
 8004d38:	f362 0305 	bfi	r3, r2, #0, #6
 8004d3c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004d3e:	7abb      	ldrb	r3, [r7, #10]
 8004d40:	f36f 0301 	bfc	r3, #0, #2
 8004d44:	72bb      	strb	r3, [r7, #10]
            break;
 8004d46:	e0c2      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8004d4c:	7bbb      	ldrb	r3, [r7, #14]
 8004d4e:	2211      	movs	r2, #17
 8004d50:	f362 0304 	bfi	r3, r2, #0, #5
 8004d54:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8004d56:	7b7b      	ldrb	r3, [r7, #13]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	f362 0303 	bfi	r3, r2, #0, #4
 8004d5e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8004d60:	7b3b      	ldrb	r3, [r7, #12]
 8004d62:	2204      	movs	r2, #4
 8004d64:	f362 0303 	bfi	r3, r2, #0, #4
 8004d68:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8004d6a:	7a7b      	ldrb	r3, [r7, #9]
 8004d6c:	2212      	movs	r2, #18
 8004d6e:	f362 0306 	bfi	r3, r2, #0, #7
 8004d72:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	7a3b      	ldrb	r3, [r7, #8]
 8004d7e:	f362 0305 	bfi	r3, r2, #0, #6
 8004d82:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004d84:	7abb      	ldrb	r3, [r7, #10]
 8004d86:	f36f 0301 	bfc	r3, #0, #2
 8004d8a:	72bb      	strb	r3, [r7, #10]
            break;
 8004d8c:	e09f      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	221e      	movs	r2, #30
 8004d96:	f362 0304 	bfi	r3, r2, #0, #5
 8004d9a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004d9c:	7b7b      	ldrb	r3, [r7, #13]
 8004d9e:	2207      	movs	r2, #7
 8004da0:	f362 0303 	bfi	r3, r2, #0, #4
 8004da4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004da6:	7b3b      	ldrb	r3, [r7, #12]
 8004da8:	2207      	movs	r2, #7
 8004daa:	f362 0303 	bfi	r3, r2, #0, #4
 8004dae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004db0:	7a7b      	ldrb	r3, [r7, #9]
 8004db2:	221f      	movs	r2, #31
 8004db4:	f362 0306 	bfi	r3, r2, #0, #7
 8004db8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	7a3b      	ldrb	r3, [r7, #8]
 8004dc4:	f362 0305 	bfi	r3, r2, #0, #6
 8004dc8:	723b      	strb	r3, [r7, #8]
            break;
 8004dca:	e080      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	2212      	movs	r2, #18
 8004dd4:	f362 0304 	bfi	r3, r2, #0, #5
 8004dd8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8004dda:	7b7b      	ldrb	r3, [r7, #13]
 8004ddc:	2205      	movs	r2, #5
 8004dde:	f362 0303 	bfi	r3, r2, #0, #4
 8004de2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8004de4:	7b3b      	ldrb	r3, [r7, #12]
 8004de6:	2205      	movs	r2, #5
 8004de8:	f362 0303 	bfi	r3, r2, #0, #4
 8004dec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8004dee:	7a7b      	ldrb	r3, [r7, #9]
 8004df0:	2213      	movs	r2, #19
 8004df2:	f362 0306 	bfi	r3, r2, #0, #7
 8004df6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	7a3b      	ldrb	r3, [r7, #8]
 8004e02:	f362 0305 	bfi	r3, r2, #0, #6
 8004e06:	723b      	strb	r3, [r7, #8]
            break;
 8004e08:	e061      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	220e      	movs	r2, #14
 8004e12:	f362 0304 	bfi	r3, r2, #0, #5
 8004e16:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004e18:	7b7b      	ldrb	r3, [r7, #13]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f362 0303 	bfi	r3, r2, #0, #4
 8004e20:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004e22:	7b3b      	ldrb	r3, [r7, #12]
 8004e24:	2203      	movs	r2, #3
 8004e26:	f362 0303 	bfi	r3, r2, #0, #4
 8004e2a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004e2c:	7a7b      	ldrb	r3, [r7, #9]
 8004e2e:	220f      	movs	r2, #15
 8004e30:	f362 0306 	bfi	r3, r2, #0, #7
 8004e34:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	7a3b      	ldrb	r3, [r7, #8]
 8004e40:	f362 0305 	bfi	r3, r2, #0, #6
 8004e44:	723b      	strb	r3, [r7, #8]
            break;
 8004e46:	e042      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8004e48:	2000000c 	.word	0x2000000c
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	2208      	movs	r2, #8
 8004e54:	f362 0304 	bfi	r3, r2, #0, #5
 8004e58:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004e5a:	7b7b      	ldrb	r3, [r7, #13]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f362 0303 	bfi	r3, r2, #0, #4
 8004e62:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004e64:	7b3b      	ldrb	r3, [r7, #12]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f362 0303 	bfi	r3, r2, #0, #4
 8004e6c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8004e6e:	7a7b      	ldrb	r3, [r7, #9]
 8004e70:	2209      	movs	r2, #9
 8004e72:	f362 0306 	bfi	r3, r2, #0, #7
 8004e76:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	7a3b      	ldrb	r3, [r7, #8]
 8004e82:	f362 0305 	bfi	r3, r2, #0, #6
 8004e86:	723b      	strb	r3, [r7, #8]
            break;
 8004e88:	e021      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	2206      	movs	r2, #6
 8004e92:	f362 0304 	bfi	r3, r2, #0, #5
 8004e96:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004e98:	7b7b      	ldrb	r3, [r7, #13]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f362 0303 	bfi	r3, r2, #0, #4
 8004ea0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004ea2:	7b3b      	ldrb	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f362 0303 	bfi	r3, r2, #0, #4
 8004eaa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004eac:	7a7b      	ldrb	r3, [r7, #9]
 8004eae:	2207      	movs	r2, #7
 8004eb0:	f362 0306 	bfi	r3, r2, #0, #7
 8004eb4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	7a3b      	ldrb	r3, [r7, #8]
 8004ec0:	f362 0305 	bfi	r3, r2, #0, #6
 8004ec4:	723b      	strb	r3, [r7, #8]
            break;
 8004ec6:	e002      	b.n	8004ece <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ecc:	e01f      	b.n	8004f0e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	2108      	movs	r1, #8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe fc2b 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8004eda:	4603      	mov	r3, r0
 8004edc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8004ee6:	f06f 0301 	mvn.w	r3, #1
 8004eea:	e010      	b.n	8004f0e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	210c      	movs	r1, #12
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fc1c 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8004f04:	f06f 0302 	mvn.w	r3, #2
 8004f08:	e001      	b.n	8004f0e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8004f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	460a      	mov	r2, r1
 8004f22:	71fb      	strb	r3, [r7, #7]
 8004f24:	4613      	mov	r3, r2
 8004f26:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8004f2c:	4b40      	ldr	r3, [pc, #256]	; (8005030 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x118>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004f32:	79bb      	ldrb	r3, [r7, #6]
 8004f34:	2b11      	cmp	r3, #17
 8004f36:	d863      	bhi.n	8005000 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe8>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x28>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f89 	.word	0x08004f89
 8004f48:	08005001 	.word	0x08005001
 8004f4c:	08004f89 	.word	0x08004f89
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08004fa7 	.word	0x08004fa7
 8004f64:	08004fa7 	.word	0x08004fa7
 8004f68:	08004fa7 	.word	0x08004fa7
 8004f6c:	08004fa7 	.word	0x08004fa7
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fa7 	.word	0x08004fa7
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fe3 	.word	0x08004fe3
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004f8c:	231e      	movs	r3, #30
 8004f8e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8004f90:	7a7b      	ldrb	r3, [r7, #9]
 8004f92:	2207      	movs	r2, #7
 8004f94:	f362 0306 	bfi	r3, r2, #0, #7
 8004f98:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004f9a:	7a3b      	ldrb	r3, [r7, #8]
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	f362 0306 	bfi	r3, r2, #0, #7
 8004fa2:	723b      	strb	r3, [r7, #8]
            break;
 8004fa4:	e02f      	b.n	8005006 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8004faa:	233e      	movs	r3, #62	; 0x3e
 8004fac:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004fae:	7a7b      	ldrb	r3, [r7, #9]
 8004fb0:	220f      	movs	r2, #15
 8004fb2:	f362 0306 	bfi	r3, r2, #0, #7
 8004fb6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004fb8:	7a3b      	ldrb	r3, [r7, #8]
 8004fba:	220f      	movs	r2, #15
 8004fbc:	f362 0306 	bfi	r3, r2, #0, #7
 8004fc0:	723b      	strb	r3, [r7, #8]
            break;
 8004fc2:	e020      	b.n	8005006 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8004fc8:	230e      	movs	r3, #14
 8004fca:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8004fcc:	7a7b      	ldrb	r3, [r7, #9]
 8004fce:	2203      	movs	r2, #3
 8004fd0:	f362 0306 	bfi	r3, r2, #0, #7
 8004fd4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8004fd6:	7a3b      	ldrb	r3, [r7, #8]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f362 0306 	bfi	r3, r2, #0, #7
 8004fde:	723b      	strb	r3, [r7, #8]
            break;
 8004fe0:	e011      	b.n	8005006 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8004fe6:	237e      	movs	r3, #126	; 0x7e
 8004fe8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8004fea:	7a7b      	ldrb	r3, [r7, #9]
 8004fec:	221f      	movs	r2, #31
 8004fee:	f362 0306 	bfi	r3, r2, #0, #7
 8004ff2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004ff4:	7a3b      	ldrb	r3, [r7, #8]
 8004ff6:	221f      	movs	r2, #31
 8004ff8:	f362 0306 	bfi	r3, r2, #0, #7
 8004ffc:	723b      	strb	r3, [r7, #8]
            break;
 8004ffe:	e002      	b.n	8005006 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        default:
            return -1;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
 8005004:	e010      	b.n	8005028 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x110>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	2104      	movs	r1, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fb8f 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8005016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
        return -2;
 800501e:	f06f 0301 	mvn.w	r3, #1
 8005022:	e001      	b.n	8005028 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x110>
    }

    return spiTransferError;
 8005024:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2000000c 	.word	0x2000000c

08005034 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
 800503e:	460b      	mov	r3, r1
 8005040:	71bb      	strb	r3, [r7, #6]
 8005042:	4613      	mov	r3, r2
 8005044:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800504a:	4bce      	ldr	r3, [pc, #824]	; (8005384 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8005054:	7abb      	ldrb	r3, [r7, #10]
 8005056:	2202      	movs	r2, #2
 8005058:	f362 0301 	bfi	r3, r2, #0, #2
 800505c:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8005062:	79bb      	ldrb	r3, [r7, #6]
 8005064:	2b11      	cmp	r3, #17
 8005066:	f200 8165 	bhi.w	8005334 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050f7 	.word	0x080050f7
 8005078:	08005335 	.word	0x08005335
 800507c:	08005135 	.word	0x08005135
 8005080:	0800516f 	.word	0x0800516f
 8005084:	080051a9 	.word	0x080051a9
 8005088:	080051a9 	.word	0x080051a9
 800508c:	080051a9 	.word	0x080051a9
 8005090:	080051af 	.word	0x080051af
 8005094:	080051f5 	.word	0x080051f5
 8005098:	0800523b 	.word	0x0800523b
 800509c:	08005279 	.word	0x08005279
 80050a0:	080052b7 	.word	0x080052b7
 80050a4:	080052f5 	.word	0x080052f5
 80050a8:	080052fb 	.word	0x080052fb
 80050ac:	08005135 	.word	0x08005135
 80050b0:	080051a9 	.word	0x080051a9
 80050b4:	080051af 	.word	0x080051af
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	220e      	movs	r2, #14
 80050c0:	f362 0304 	bfi	r3, r2, #0, #5
 80050c4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80050c6:	7b7b      	ldrb	r3, [r7, #13]
 80050c8:	2203      	movs	r2, #3
 80050ca:	f362 0303 	bfi	r3, r2, #0, #4
 80050ce:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80050d0:	7b3b      	ldrb	r3, [r7, #12]
 80050d2:	2203      	movs	r2, #3
 80050d4:	f362 0303 	bfi	r3, r2, #0, #4
 80050d8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80050da:	7a7b      	ldrb	r3, [r7, #9]
 80050dc:	220f      	movs	r2, #15
 80050de:	f362 0306 	bfi	r3, r2, #0, #7
 80050e2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	7a3b      	ldrb	r3, [r7, #8]
 80050ee:	f362 0305 	bfi	r3, r2, #0, #6
 80050f2:	723b      	strb	r3, [r7, #8]
            break;
 80050f4:	e121      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	2206      	movs	r2, #6
 80050fe:	f362 0304 	bfi	r3, r2, #0, #5
 8005102:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8005104:	7b7b      	ldrb	r3, [r7, #13]
 8005106:	2201      	movs	r2, #1
 8005108:	f362 0303 	bfi	r3, r2, #0, #4
 800510c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800510e:	7b3b      	ldrb	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f362 0303 	bfi	r3, r2, #0, #4
 8005116:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8005118:	7a7b      	ldrb	r3, [r7, #9]
 800511a:	2207      	movs	r2, #7
 800511c:	f362 0306 	bfi	r3, r2, #0, #7
 8005120:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005128:	b2da      	uxtb	r2, r3
 800512a:	7a3b      	ldrb	r3, [r7, #8]
 800512c:	f362 0305 	bfi	r3, r2, #0, #6
 8005130:	723b      	strb	r3, [r7, #8]
            break;
 8005132:	e102      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	2202      	movs	r2, #2
 800513c:	f362 0304 	bfi	r3, r2, #0, #5
 8005140:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8005142:	7b7b      	ldrb	r3, [r7, #13]
 8005144:	f36f 0303 	bfc	r3, #0, #4
 8005148:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800514a:	7b3b      	ldrb	r3, [r7, #12]
 800514c:	f36f 0303 	bfc	r3, #0, #4
 8005150:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8005152:	7a7b      	ldrb	r3, [r7, #9]
 8005154:	2203      	movs	r2, #3
 8005156:	f362 0306 	bfi	r3, r2, #0, #7
 800515a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005162:	b2da      	uxtb	r2, r3
 8005164:	7a3b      	ldrb	r3, [r7, #8]
 8005166:	f362 0305 	bfi	r3, r2, #0, #6
 800516a:	723b      	strb	r3, [r7, #8]
            break;
 800516c:	e0e5      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8005172:	7bbb      	ldrb	r3, [r7, #14]
 8005174:	2201      	movs	r2, #1
 8005176:	f362 0304 	bfi	r3, r2, #0, #5
 800517a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800517c:	7b7b      	ldrb	r3, [r7, #13]
 800517e:	f36f 0303 	bfc	r3, #0, #4
 8005182:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8005184:	7b3b      	ldrb	r3, [r7, #12]
 8005186:	f36f 0303 	bfc	r3, #0, #4
 800518a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 800518c:	7a7b      	ldrb	r3, [r7, #9]
 800518e:	2202      	movs	r2, #2
 8005190:	f362 0306 	bfi	r3, r2, #0, #7
 8005194:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	7a3b      	ldrb	r3, [r7, #8]
 80051a0:	f362 0305 	bfi	r3, r2, #0, #6
 80051a4:	723b      	strb	r3, [r7, #8]
            break;
 80051a6:	e0c8      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	e0e5      	b.n	800537a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>


        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	221e      	movs	r2, #30
 80051b6:	f362 0304 	bfi	r3, r2, #0, #5
 80051ba:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 80051bc:	7b7b      	ldrb	r3, [r7, #13]
 80051be:	2207      	movs	r2, #7
 80051c0:	f362 0303 	bfi	r3, r2, #0, #4
 80051c4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80051c6:	7b3b      	ldrb	r3, [r7, #12]
 80051c8:	2207      	movs	r2, #7
 80051ca:	f362 0303 	bfi	r3, r2, #0, #4
 80051ce:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80051d0:	7a7b      	ldrb	r3, [r7, #9]
 80051d2:	221f      	movs	r2, #31
 80051d4:	f362 0306 	bfi	r3, r2, #0, #7
 80051d8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	7a3b      	ldrb	r3, [r7, #8]
 80051e4:	f362 0305 	bfi	r3, r2, #0, #6
 80051e8:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80051ea:	7abb      	ldrb	r3, [r7, #10]
 80051ec:	f36f 0301 	bfc	r3, #0, #2
 80051f0:	72bb      	strb	r3, [r7, #10]
            break;
 80051f2:	e0a2      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	2211      	movs	r2, #17
 80051fc:	f362 0304 	bfi	r3, r2, #0, #5
 8005200:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8005202:	7b7b      	ldrb	r3, [r7, #13]
 8005204:	2204      	movs	r2, #4
 8005206:	f362 0303 	bfi	r3, r2, #0, #4
 800520a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 800520c:	7b3b      	ldrb	r3, [r7, #12]
 800520e:	2204      	movs	r2, #4
 8005210:	f362 0303 	bfi	r3, r2, #0, #4
 8005214:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8005216:	7a7b      	ldrb	r3, [r7, #9]
 8005218:	2212      	movs	r2, #18
 800521a:	f362 0306 	bfi	r3, r2, #0, #7
 800521e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005226:	b2da      	uxtb	r2, r3
 8005228:	7a3b      	ldrb	r3, [r7, #8]
 800522a:	f362 0305 	bfi	r3, r2, #0, #6
 800522e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8005230:	7abb      	ldrb	r3, [r7, #10]
 8005232:	f36f 0301 	bfc	r3, #0, #2
 8005236:	72bb      	strb	r3, [r7, #10]
            break;
 8005238:	e07f      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800523e:	7bbb      	ldrb	r3, [r7, #14]
 8005240:	220e      	movs	r2, #14
 8005242:	f362 0304 	bfi	r3, r2, #0, #5
 8005246:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8005248:	7b7b      	ldrb	r3, [r7, #13]
 800524a:	2203      	movs	r2, #3
 800524c:	f362 0303 	bfi	r3, r2, #0, #4
 8005250:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8005252:	7b3b      	ldrb	r3, [r7, #12]
 8005254:	2203      	movs	r2, #3
 8005256:	f362 0303 	bfi	r3, r2, #0, #4
 800525a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800525c:	7a7b      	ldrb	r3, [r7, #9]
 800525e:	220f      	movs	r2, #15
 8005260:	f362 0306 	bfi	r3, r2, #0, #7
 8005264:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526c:	b2da      	uxtb	r2, r3
 800526e:	7a3b      	ldrb	r3, [r7, #8]
 8005270:	f362 0305 	bfi	r3, r2, #0, #6
 8005274:	723b      	strb	r3, [r7, #8]
            break;
 8005276:	e060      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	2208      	movs	r2, #8
 8005280:	f362 0304 	bfi	r3, r2, #0, #5
 8005284:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8005286:	7b7b      	ldrb	r3, [r7, #13]
 8005288:	2202      	movs	r2, #2
 800528a:	f362 0303 	bfi	r3, r2, #0, #4
 800528e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8005290:	7b3b      	ldrb	r3, [r7, #12]
 8005292:	2202      	movs	r2, #2
 8005294:	f362 0303 	bfi	r3, r2, #0, #4
 8005298:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800529a:	7a7b      	ldrb	r3, [r7, #9]
 800529c:	2209      	movs	r2, #9
 800529e:	f362 0306 	bfi	r3, r2, #0, #7
 80052a2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	7a3b      	ldrb	r3, [r7, #8]
 80052ae:	f362 0305 	bfi	r3, r2, #0, #6
 80052b2:	723b      	strb	r3, [r7, #8]
            break;
 80052b4:	e041      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2206      	movs	r2, #6
 80052be:	f362 0304 	bfi	r3, r2, #0, #5
 80052c2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80052c4:	7b7b      	ldrb	r3, [r7, #13]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f362 0303 	bfi	r3, r2, #0, #4
 80052cc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80052ce:	7b3b      	ldrb	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f362 0303 	bfi	r3, r2, #0, #4
 80052d6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80052d8:	7a7b      	ldrb	r3, [r7, #9]
 80052da:	2207      	movs	r2, #7
 80052dc:	f362 0306 	bfi	r3, r2, #0, #7
 80052e0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	7a3b      	ldrb	r3, [r7, #8]
 80052ec:	f362 0305 	bfi	r3, r2, #0, #6
 80052f0:	723b      	strb	r3, [r7, #8]
            break;
 80052f2:	e022      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	e03f      	b.n	800537a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>

        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	2202      	movs	r2, #2
 8005302:	f362 0304 	bfi	r3, r2, #0, #5
 8005306:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8005308:	7b7b      	ldrb	r3, [r7, #13]
 800530a:	f36f 0303 	bfc	r3, #0, #4
 800530e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8005310:	7b3b      	ldrb	r3, [r7, #12]
 8005312:	f36f 0303 	bfc	r3, #0, #4
 8005316:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8005318:	7a7b      	ldrb	r3, [r7, #9]
 800531a:	2203      	movs	r2, #3
 800531c:	f362 0306 	bfi	r3, r2, #0, #7
 8005320:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005328:	b2da      	uxtb	r2, r3
 800532a:	7a3b      	ldrb	r3, [r7, #8]
 800532c:	f362 0305 	bfi	r3, r2, #0, #6
 8005330:	723b      	strb	r3, [r7, #8]
            break;
 8005332:	e002      	b.n	800533a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
 8005338:	e01f      	b.n	800537a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	2108      	movs	r1, #8
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe f9f5 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800534a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8005352:	f06f 0301 	mvn.w	r3, #1
 8005356:	e010      	b.n	800537a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	210c      	movs	r1, #12
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe f9e6 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8005368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8005370:	f06f 0302 	mvn.w	r3, #2
 8005374:	e001      	b.n	800537a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8005376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	2000000c 	.word	0x2000000c

08005388 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	460a      	mov	r2, r1
 8005392:	71fb      	strb	r3, [r7, #7]
 8005394:	4613      	mov	r3, r2
 8005396:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800539c:	4b40      	ldr	r3, [pc, #256]	; (80054a0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x118>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80053a2:	79bb      	ldrb	r3, [r7, #6]
 80053a4:	2b11      	cmp	r3, #17
 80053a6:	d863      	bhi.n	8005470 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe8>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x28>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	080053f9 	.word	0x080053f9
 80053b8:	08005471 	.word	0x08005471
 80053bc:	080053f9 	.word	0x080053f9
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	08005417 	.word	0x08005417
 80053d4:	08005417 	.word	0x08005417
 80053d8:	08005417 	.word	0x08005417
 80053dc:	08005417 	.word	0x08005417
 80053e0:	08005417 	.word	0x08005417
 80053e4:	08005417 	.word	0x08005417
 80053e8:	08005417 	.word	0x08005417
 80053ec:	08005435 	.word	0x08005435
 80053f0:	08005435 	.word	0x08005435
 80053f4:	08005453 	.word	0x08005453
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80053fc:	230e      	movs	r3, #14
 80053fe:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8005400:	7a7b      	ldrb	r3, [r7, #9]
 8005402:	2203      	movs	r2, #3
 8005404:	f362 0306 	bfi	r3, r2, #0, #7
 8005408:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800540a:	7a3b      	ldrb	r3, [r7, #8]
 800540c:	2203      	movs	r2, #3
 800540e:	f362 0306 	bfi	r3, r2, #0, #7
 8005412:	723b      	strb	r3, [r7, #8]
            break;
 8005414:	e02f      	b.n	8005476 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800541a:	231e      	movs	r3, #30
 800541c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800541e:	7a7b      	ldrb	r3, [r7, #9]
 8005420:	2207      	movs	r2, #7
 8005422:	f362 0306 	bfi	r3, r2, #0, #7
 8005426:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8005428:	7a3b      	ldrb	r3, [r7, #8]
 800542a:	2207      	movs	r2, #7
 800542c:	f362 0306 	bfi	r3, r2, #0, #7
 8005430:	723b      	strb	r3, [r7, #8]
            break;
 8005432:	e020      	b.n	8005476 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8005438:	2307      	movs	r3, #7
 800543a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 800543c:	7a7b      	ldrb	r3, [r7, #9]
 800543e:	2202      	movs	r2, #2
 8005440:	f362 0306 	bfi	r3, r2, #0, #7
 8005444:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8005446:	7a3b      	ldrb	r3, [r7, #8]
 8005448:	2202      	movs	r2, #2
 800544a:	f362 0306 	bfi	r3, r2, #0, #7
 800544e:	723b      	strb	r3, [r7, #8]
            break;
 8005450:	e011      	b.n	8005476 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8005456:	233e      	movs	r3, #62	; 0x3e
 8005458:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800545a:	7a7b      	ldrb	r3, [r7, #9]
 800545c:	220f      	movs	r2, #15
 800545e:	f362 0306 	bfi	r3, r2, #0, #7
 8005462:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8005464:	7a3b      	ldrb	r3, [r7, #8]
 8005466:	220f      	movs	r2, #15
 8005468:	f362 0306 	bfi	r3, r2, #0, #7
 800546c:	723b      	strb	r3, [r7, #8]
            break;
 800546e:	e002      	b.n	8005476 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        default:
            return -1;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	e010      	b.n	8005498 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x110>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	2104      	movs	r1, #4
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe f957 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 8005482:	4603      	mov	r3, r0
 8005484:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8005486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
        return -2;
 800548e:	f06f 0301 	mvn.w	r3, #1
 8005492:	e001      	b.n	8005498 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x110>
    }

    return spiTransferError;
 8005494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
 80054ae:	460b      	mov	r3, r1
 80054b0:	71bb      	strb	r3, [r7, #6]
 80054b2:	4613      	mov	r3, r2
 80054b4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80054ba:	4b92      	ldr	r3, [pc, #584]	; (8005704 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80054c4:	7abb      	ldrb	r3, [r7, #10]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f362 0301 	bfi	r3, r2, #0, #2
 80054cc:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80054d2:	79bb      	ldrb	r3, [r7, #6]
 80054d4:	2b11      	cmp	r3, #17
 80054d6:	f200 80ee 	bhi.w	80056b6 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005529 	.word	0x08005529
 80054e4:	08005567 	.word	0x08005567
 80054e8:	080056b7 	.word	0x080056b7
 80054ec:	080055a1 	.word	0x080055a1
 80054f0:	080055a1 	.word	0x080055a1
 80054f4:	080055a1 	.word	0x080055a1
 80054f8:	080055a1 	.word	0x080055a1
 80054fc:	080055a1 	.word	0x080055a1
 8005500:	080055a7 	.word	0x080055a7
 8005504:	080055ed 	.word	0x080055ed
 8005508:	08005633 	.word	0x08005633
 800550c:	08005671 	.word	0x08005671
 8005510:	08005677 	.word	0x08005677
 8005514:	080056b1 	.word	0x080056b1
 8005518:	080056b1 	.word	0x080056b1
 800551c:	080055a1 	.word	0x080055a1
 8005520:	080055a1 	.word	0x080055a1
 8005524:	080055a7 	.word	0x080055a7
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800552c:	7bbb      	ldrb	r3, [r7, #14]
 800552e:	2206      	movs	r2, #6
 8005530:	f362 0304 	bfi	r3, r2, #0, #5
 8005534:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8005536:	7b7b      	ldrb	r3, [r7, #13]
 8005538:	2201      	movs	r2, #1
 800553a:	f362 0303 	bfi	r3, r2, #0, #4
 800553e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8005540:	7b3b      	ldrb	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f362 0303 	bfi	r3, r2, #0, #4
 8005548:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800554a:	7a7b      	ldrb	r3, [r7, #9]
 800554c:	2207      	movs	r2, #7
 800554e:	f362 0306 	bfi	r3, r2, #0, #7
 8005552:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555a:	b2da      	uxtb	r2, r3
 800555c:	7a3b      	ldrb	r3, [r7, #8]
 800555e:	f362 0305 	bfi	r3, r2, #0, #6
 8005562:	723b      	strb	r3, [r7, #8]
            break;
 8005564:	e0aa      	b.n	80056bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	2202      	movs	r2, #2
 800556e:	f362 0304 	bfi	r3, r2, #0, #5
 8005572:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8005574:	7b7b      	ldrb	r3, [r7, #13]
 8005576:	f36f 0303 	bfc	r3, #0, #4
 800557a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800557c:	7b3b      	ldrb	r3, [r7, #12]
 800557e:	f36f 0303 	bfc	r3, #0, #4
 8005582:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8005584:	7a7b      	ldrb	r3, [r7, #9]
 8005586:	2203      	movs	r2, #3
 8005588:	f362 0306 	bfi	r3, r2, #0, #7
 800558c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	b2da      	uxtb	r2, r3
 8005596:	7a3b      	ldrb	r3, [r7, #8]
 8005598:	f362 0305 	bfi	r3, r2, #0, #6
 800559c:	723b      	strb	r3, [r7, #8]
            break;
 800559e:	e08d      	b.n	80056bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	e0aa      	b.n	80056fc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>


        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	220e      	movs	r2, #14
 80055ae:	f362 0304 	bfi	r3, r2, #0, #5
 80055b2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80055b4:	7b7b      	ldrb	r3, [r7, #13]
 80055b6:	2203      	movs	r2, #3
 80055b8:	f362 0303 	bfi	r3, r2, #0, #4
 80055bc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80055be:	7b3b      	ldrb	r3, [r7, #12]
 80055c0:	2203      	movs	r2, #3
 80055c2:	f362 0303 	bfi	r3, r2, #0, #4
 80055c6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80055c8:	7a7b      	ldrb	r3, [r7, #9]
 80055ca:	220f      	movs	r2, #15
 80055cc:	f362 0306 	bfi	r3, r2, #0, #7
 80055d0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	7a3b      	ldrb	r3, [r7, #8]
 80055dc:	f362 0305 	bfi	r3, r2, #0, #6
 80055e0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80055e2:	7abb      	ldrb	r3, [r7, #10]
 80055e4:	f36f 0301 	bfc	r3, #0, #2
 80055e8:	72bb      	strb	r3, [r7, #10]
            break;
 80055ea:	e067      	b.n	80056bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
 80055f2:	2207      	movs	r2, #7
 80055f4:	f362 0304 	bfi	r3, r2, #0, #5
 80055f8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80055fa:	7b7b      	ldrb	r3, [r7, #13]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f362 0303 	bfi	r3, r2, #0, #4
 8005602:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8005604:	7b3b      	ldrb	r3, [r7, #12]
 8005606:	2202      	movs	r2, #2
 8005608:	f362 0303 	bfi	r3, r2, #0, #4
 800560c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 800560e:	7a7b      	ldrb	r3, [r7, #9]
 8005610:	2208      	movs	r2, #8
 8005612:	f362 0306 	bfi	r3, r2, #0, #7
 8005616:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800561e:	b2da      	uxtb	r2, r3
 8005620:	7a3b      	ldrb	r3, [r7, #8]
 8005622:	f362 0305 	bfi	r3, r2, #0, #6
 8005626:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8005628:	7abb      	ldrb	r3, [r7, #10]
 800562a:	f36f 0301 	bfc	r3, #0, #2
 800562e:	72bb      	strb	r3, [r7, #10]
            break;
 8005630:	e044      	b.n	80056bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	2206      	movs	r2, #6
 800563a:	f362 0304 	bfi	r3, r2, #0, #5
 800563e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8005640:	7b7b      	ldrb	r3, [r7, #13]
 8005642:	2201      	movs	r2, #1
 8005644:	f362 0303 	bfi	r3, r2, #0, #4
 8005648:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800564a:	7b3b      	ldrb	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f362 0303 	bfi	r3, r2, #0, #4
 8005652:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8005654:	7a7b      	ldrb	r3, [r7, #9]
 8005656:	2207      	movs	r2, #7
 8005658:	f362 0306 	bfi	r3, r2, #0, #7
 800565c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005664:	b2da      	uxtb	r2, r3
 8005666:	7a3b      	ldrb	r3, [r7, #8]
 8005668:	f362 0305 	bfi	r3, r2, #0, #6
 800566c:	723b      	strb	r3, [r7, #8]
            break;
 800566e:	e025      	b.n	80056bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8005670:	f04f 33ff 	mov.w	r3, #4294967295
 8005674:	e042      	b.n	80056fc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>

        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	2202      	movs	r2, #2
 800567e:	f362 0304 	bfi	r3, r2, #0, #5
 8005682:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8005684:	7b7b      	ldrb	r3, [r7, #13]
 8005686:	f36f 0303 	bfc	r3, #0, #4
 800568a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800568c:	7b3b      	ldrb	r3, [r7, #12]
 800568e:	f36f 0303 	bfc	r3, #0, #4
 8005692:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8005694:	7a7b      	ldrb	r3, [r7, #9]
 8005696:	2203      	movs	r2, #3
 8005698:	f362 0306 	bfi	r3, r2, #0, #7
 800569c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	7a3b      	ldrb	r3, [r7, #8]
 80056a8:	f362 0305 	bfi	r3, r2, #0, #6
 80056ac:	723b      	strb	r3, [r7, #8]
            break;
 80056ae:	e005      	b.n	80056bc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80056b0:	f04f 33ff 	mov.w	r3, #4294967295
 80056b4:	e022      	b.n	80056fc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>


        default:
            return -1;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	e01f      	b.n	80056fc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2108      	movs	r1, #8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe f834 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 80056c8:	4603      	mov	r3, r0
 80056ca:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80056cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80056d4:	f06f 0301 	mvn.w	r3, #1
 80056d8:	e010      	b.n	80056fc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	210c      	movs	r1, #12
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe f825 	bl	8003730 <DRV_CANFDSPI_WriteWord>
 80056e6:	4603      	mov	r3, r0
 80056e8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80056ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80056f2:	f06f 0302 	mvn.w	r3, #2
 80056f6:	e001      	b.n	80056fc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80056f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	2000000c 	.word	0x2000000c

08005708 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
 8005712:	460b      	mov	r3, r1
 8005714:	71bb      	strb	r3, [r7, #6]
 8005716:	4613      	mov	r3, r2
 8005718:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8005722:	f640 6307 	movw	r3, #3591	; 0xe07
 8005726:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	1cda      	adds	r2, r3, #3
 8005732:	89b9      	ldrh	r1, [r7, #12]
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	4618      	mov	r0, r3
 8005738:	f7fd ff94 	bl	8003664 <DRV_CANFDSPI_ReadByte>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8005740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8005748:	f04f 33ff 	mov.w	r3, #4294967295
 800574c:	e020      	b.n	8005790 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 800574e:	79bb      	ldrb	r3, [r7, #6]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	f362 0300 	bfi	r3, r2, #0, #1
 800575c:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 800575e:	797b      	ldrb	r3, [r7, #5]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	f362 0341 	bfi	r3, r2, #1, #1
 800576c:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 800576e:	7afa      	ldrb	r2, [r7, #11]
 8005770:	89b9      	ldrh	r1, [r7, #12]
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	4618      	mov	r0, r3
 8005776:	f7fd ffa9 	bl	80036cc <DRV_CANFDSPI_WriteByte>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
//	DRV_CANFDSPI_WriteByte(index, a - 2, 0x03);
//	DRV_CANFDSPI_WriteByte(index, a - 3, 0x00);
//	//test
	
	
    if (spiTransferError) {
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8005786:	f06f 0301 	mvn.w	r3, #1
 800578a:	e001      	b.n	8005790 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 800578c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
	
//    Nop();
//    Nop();

    if (dlc < CAN_DLC_12) {
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d802      	bhi.n	80057b2 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e02a      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	3b09      	subs	r3, #9
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d825      	bhi.n	8005806 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057dd 	.word	0x080057dd
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	080057e9 	.word	0x080057e9
 80057cc:	080057ef 	.word	0x080057ef
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057fb 	.word	0x080057fb
 80057d8:	08005801 	.word	0x08005801
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80057dc:	230c      	movs	r3, #12
 80057de:	60fb      	str	r3, [r7, #12]
                break;
 80057e0:	e012      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 80057e2:	2310      	movs	r3, #16
 80057e4:	60fb      	str	r3, [r7, #12]
                break;
 80057e6:	e00f      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80057e8:	2314      	movs	r3, #20
 80057ea:	60fb      	str	r3, [r7, #12]
                break;
 80057ec:	e00c      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80057ee:	2318      	movs	r3, #24
 80057f0:	60fb      	str	r3, [r7, #12]
                break;
 80057f2:	e009      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80057f4:	2320      	movs	r3, #32
 80057f6:	60fb      	str	r3, [r7, #12]
                break;
 80057f8:	e006      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80057fa:	2330      	movs	r3, #48	; 0x30
 80057fc:	60fb      	str	r3, [r7, #12]
                break;
 80057fe:	e003      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8005800:	2340      	movs	r3, #64	; 0x40
 8005802:	60fb      	str	r3, [r7, #12]
                break;
 8005804:	e000      	b.n	8005808 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8005806:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <CANFDSPI_Init>:
const uint32_t TRANSMIT_TIMEOUT = 500*TIMER_FACTOR; //ms
uint8_t transmitTimeout_Flag = 1;
uint32_t transmitTimeout_Cnt = 0;

void CANFDSPI_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
    /**************************************************************************/
    // MCP2518FD 1#
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 800581c:	2000      	movs	r0, #0
 800581e:	f7fd feff 	bl	8003620 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 8005822:	2000      	movs	r0, #0
 8005824:	f7fe ffd4 	bl	80047d0 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 8005828:	21ff      	movs	r1, #255	; 0xff
 800582a:	2000      	movs	r0, #0
 800582c:	f7ff f804 	bl	8004838 <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8005830:	4861      	ldr	r0, [pc, #388]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 8005832:	f7fe f9e3 	bl	8003bfc <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 8005836:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 8005838:	7813      	ldrb	r3, [r2, #0]
 800583a:	f043 0320 	orr.w	r3, r3, #32
 800583e:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 8005840:	4a5d      	ldr	r2, [pc, #372]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 8005842:	7853      	ldrb	r3, [r2, #1]
 8005844:	f36f 1386 	bfc	r3, #6, #1
 8005848:	7053      	strb	r3, [r2, #1]
    config.TXQEnable = 0;
 800584a:	4a5b      	ldr	r2, [pc, #364]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 800584c:	7853      	ldrb	r3, [r2, #1]
 800584e:	f36f 13c7 	bfc	r3, #7, #1
 8005852:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 8005854:	4958      	ldr	r1, [pc, #352]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 8005856:	2000      	movs	r0, #0
 8005858:	f7fe f942 	bl	8003ae0 <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 800585c:	4857      	ldr	r0, [pc, #348]	; (80059bc <CANFDSPI_Init+0x1a4>)
 800585e:	f7fe fadf 	bl	8003e20 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 8005862:	4a56      	ldr	r2, [pc, #344]	; (80059bc <CANFDSPI_Init+0x1a4>)
 8005864:	7853      	ldrb	r3, [r2, #1]
 8005866:	2107      	movs	r1, #7
 8005868:	f361 0304 	bfi	r3, r1, #0, #5
 800586c:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 800586e:	4a53      	ldr	r2, [pc, #332]	; (80059bc <CANFDSPI_Init+0x1a4>)
 8005870:	7853      	ldrb	r3, [r2, #1]
 8005872:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005876:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 8005878:	4a50      	ldr	r2, [pc, #320]	; (80059bc <CANFDSPI_Init+0x1a4>)
 800587a:	7813      	ldrb	r3, [r2, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	f361 0345 	bfi	r3, r1, #1, #5
 8005882:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 8005884:	4a4d      	ldr	r2, [pc, #308]	; (80059bc <CANFDSPI_Init+0x1a4>)
 8005886:	2102      	movs	r1, #2
 8005888:	2000      	movs	r0, #0
 800588a:	f7fe fa6f 	bl	8003d6c <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_5M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 800588e:	2300      	movs	r3, #0
 8005890:	2202      	movs	r2, #2
 8005892:	2104      	movs	r1, #4
 8005894:	2000      	movs	r0, #0
 8005896:	f7ff f813 	bl	80048c0 <DRV_CANFDSPI_BitTimeConfigure>
//	DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
//	DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
//	DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_0, CAN_TX_EVENT | CAN_RX_EVENT);
    /***************************************/
    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 800589a:	2100      	movs	r1, #0
 800589c:	2000      	movs	r0, #0
 800589e:	f7fe fa29 	bl	8003cf4 <DRV_CANFDSPI_OperationModeSelect>
    /**************************************************************************/
    // MCP2518FD 2#
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_1);
 80058a2:	2001      	movs	r0, #1
 80058a4:	f7fd febc 	bl	8003620 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_1);
 80058a8:	2001      	movs	r0, #1
 80058aa:	f7fe ff91 	bl	80047d0 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_1, 0xff);
 80058ae:	21ff      	movs	r1, #255	; 0xff
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7fe ffc1 	bl	8004838 <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 80058b6:	4840      	ldr	r0, [pc, #256]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 80058b8:	f7fe f9a0 	bl	8003bfc <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 80058bc:	4a3e      	ldr	r2, [pc, #248]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 80058be:	7813      	ldrb	r3, [r2, #0]
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 80058c6:	4a3c      	ldr	r2, [pc, #240]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 80058c8:	7853      	ldrb	r3, [r2, #1]
 80058ca:	f36f 1386 	bfc	r3, #6, #1
 80058ce:	7053      	strb	r3, [r2, #1]
    config.TXQEnable = 0;
 80058d0:	4a39      	ldr	r2, [pc, #228]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 80058d2:	7853      	ldrb	r3, [r2, #1]
 80058d4:	f36f 13c7 	bfc	r3, #7, #1
 80058d8:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_1, &config);
 80058da:	4937      	ldr	r1, [pc, #220]	; (80059b8 <CANFDSPI_Init+0x1a0>)
 80058dc:	2001      	movs	r0, #1
 80058de:	f7fe f8ff 	bl	8003ae0 <DRV_CANFDSPI_Configure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 80058e2:	4837      	ldr	r0, [pc, #220]	; (80059c0 <CANFDSPI_Init+0x1a8>)
 80058e4:	f7fe fcce 	bl	8004284 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 80058e8:	4a35      	ldr	r2, [pc, #212]	; (80059c0 <CANFDSPI_Init+0x1a8>)
 80058ea:	7813      	ldrb	r3, [r2, #0]
 80058ec:	210f      	movs	r1, #15
 80058ee:	f361 0345 	bfi	r3, r1, #1, #5
 80058f2:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 80058f4:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <CANFDSPI_Init+0x1a8>)
 80058f6:	8813      	ldrh	r3, [r2, #0]
 80058f8:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80058fc:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, &rxConfig);
 80058fe:	4a30      	ldr	r2, [pc, #192]	; (80059c0 <CANFDSPI_Init+0x1a8>)
 8005900:	2101      	movs	r1, #1
 8005902:	2001      	movs	r0, #1
 8005904:	f7fe fc70 	bl	80041e8 <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 8005908:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <CANFDSPI_Init+0x1ac>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
    fObj.bF.SID = 0x300;
 800590e:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <CANFDSPI_Init+0x1ac>)
 8005910:	8813      	ldrh	r3, [r2, #0]
 8005912:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005916:	f361 030a 	bfi	r3, r1, #0, #11
 800591a:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <CANFDSPI_Init+0x1ac>)
 800591e:	78d3      	ldrb	r3, [r2, #3]
 8005920:	f36f 1386 	bfc	r3, #6, #1
 8005924:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 8005926:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <CANFDSPI_Init+0x1ac>)
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	f36f 23dc 	bfc	r3, #11, #18
 800592e:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_1, CAN_FILTER0, &fObj.bF);
 8005930:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <CANFDSPI_Init+0x1ac>)
 8005932:	2100      	movs	r1, #0
 8005934:	2001      	movs	r0, #1
 8005936:	f7fe fbd9 	bl	80040ec <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <CANFDSPI_Init+0x1b0>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x7F8;
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <CANFDSPI_Init+0x1b0>)
 8005942:	8813      	ldrh	r3, [r2, #0]
 8005944:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8005948:	f361 030a 	bfi	r3, r1, #0, #11
 800594c:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 1; // Only allow standard IDs
 800594e:	4a1e      	ldr	r2, [pc, #120]	; (80059c8 <CANFDSPI_Init+0x1b0>)
 8005950:	78d3      	ldrb	r3, [r2, #3]
 8005952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005956:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <CANFDSPI_Init+0x1b0>)
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	f36f 23dc 	bfc	r3, #11, #18
 8005960:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_1, CAN_FILTER0, &mObj.bF);
 8005962:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <CANFDSPI_Init+0x1b0>)
 8005964:	2100      	movs	r1, #0
 8005966:	2001      	movs	r0, #1
 8005968:	f7fe fbe2 	bl	8004130 <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_1, CAN_FILTER0, APP_RX_FIFO, true);
 800596c:	2301      	movs	r3, #1
 800596e:	2201      	movs	r2, #1
 8005970:	2100      	movs	r1, #0
 8005972:	2001      	movs	r0, #1
 8005974:	f7fe fc00 	bl	8004178 <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_1, CAN_500K_5M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8005978:	2300      	movs	r3, #0
 800597a:	2202      	movs	r2, #2
 800597c:	2104      	movs	r1, #4
 800597e:	2001      	movs	r0, #1
 8005980:	f7fe ff9e 	bl	80048c0 <DRV_CANFDSPI_BitTimeConfigure>

    // Setup Transmit and Receive Interrupts
	DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_1, GPIO_MODE_INT, GPIO_MODE_INT);
 8005984:	2200      	movs	r2, #0
 8005986:	2100      	movs	r1, #0
 8005988:	2001      	movs	r0, #1
 800598a:	f7ff febd 	bl	8005708 <DRV_CANFDSPI_GpioModeConfigure>
	DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_1, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
 800598e:	2201      	movs	r2, #1
 8005990:	2102      	movs	r1, #2
 8005992:	2001      	movs	r0, #1
 8005994:	f7fe fe86 	bl	80046a4 <DRV_CANFDSPI_TransmitChannelEventEnable>
	DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8005998:	2201      	movs	r2, #1
 800599a:	2101      	movs	r1, #1
 800599c:	2001      	movs	r0, #1
 800599e:	f7fe fec9 	bl	8004734 <DRV_CANFDSPI_ReceiveChannelEventEnable>
	DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_1, CAN_RX_EVENT);
 80059a2:	2102      	movs	r1, #2
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7fe fe0a 	bl	80045be <DRV_CANFDSPI_ModuleEventEnable>
    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_1, CAN_NORMAL_MODE);
 80059aa:	2100      	movs	r1, #0
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fe f9a1 	bl	8003cf4 <DRV_CANFDSPI_OperationModeSelect>

}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200003c8 	.word	0x200003c8
 80059bc:	200003cc 	.word	0x200003cc
 80059c0:	200003e0 	.word	0x200003e0
 80059c4:	200003e4 	.word	0x200003e4
 80059c8:	200003e8 	.word	0x200003e8

080059cc <DRV_SPI_ChipSelectAssert>:
  * @param  spiSlaveDeviceIndex: DRV_CANFDSPI_INDEX_0 or DRV_CANFDSPI_INDEX_1
  * @param  assert: true-enable, false-disable
  * @retval -1 if flase
  */
int8_t DRV_SPI_ChipSelectAssert(uint8_t spiSlaveDeviceIndex, bool assert)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	460a      	mov	r2, r1
 80059d6:	71fb      	strb	r3, [r7, #7]
 80059d8:	4613      	mov	r3, r2
 80059da:	71bb      	strb	r3, [r7, #6]
    int8_t error = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	73fb      	strb	r3, [r7, #15]

    // Select Chip Select
    switch (spiSlaveDeviceIndex) {
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <DRV_SPI_ChipSelectAssert+0x20>
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d00f      	beq.n	8005a0a <DRV_SPI_ChipSelectAssert+0x3e>
 80059ea:	e01f      	b.n	8005a2c <DRV_SPI_ChipSelectAssert+0x60>
        case DRV_CANFDSPI_INDEX_0:
            if (assert)
 80059ec:	79bb      	ldrb	r3, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <DRV_SPI_ChipSelectAssert+0x32>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2110      	movs	r1, #16
 80059f6:	4812      	ldr	r0, [pc, #72]	; (8005a40 <DRV_SPI_ChipSelectAssert+0x74>)
 80059f8:	f7fb ff06 	bl	8001808 <HAL_GPIO_WritePin>
            else
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
            break;
 80059fc:	e019      	b.n	8005a32 <DRV_SPI_ChipSelectAssert+0x66>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80059fe:	2201      	movs	r2, #1
 8005a00:	2110      	movs	r1, #16
 8005a02:	480f      	ldr	r0, [pc, #60]	; (8005a40 <DRV_SPI_ChipSelectAssert+0x74>)
 8005a04:	f7fb ff00 	bl	8001808 <HAL_GPIO_WritePin>
            break;
 8005a08:	e013      	b.n	8005a32 <DRV_SPI_ChipSelectAssert+0x66>
        case DRV_CANFDSPI_INDEX_1:
			if (assert)
 8005a0a:	79bb      	ldrb	r3, [r7, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <DRV_SPI_ChipSelectAssert+0x52>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a16:	480b      	ldr	r0, [pc, #44]	; (8005a44 <DRV_SPI_ChipSelectAssert+0x78>)
 8005a18:	f7fb fef6 	bl	8001808 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
			break;
 8005a1c:	e009      	b.n	8005a32 <DRV_SPI_ChipSelectAssert+0x66>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a24:	4807      	ldr	r0, [pc, #28]	; (8005a44 <DRV_SPI_ChipSelectAssert+0x78>)
 8005a26:	f7fb feef 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 8005a2a:	e002      	b.n	8005a32 <DRV_SPI_ChipSelectAssert+0x66>
        default:
            error = -1;
 8005a2c:	23ff      	movs	r3, #255	; 0xff
 8005a2e:	73fb      	strb	r3, [r7, #15]
            break;
 8005a30:	bf00      	nop
    }
    return error;
 8005a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40020000 	.word	0x40020000
 8005a44:	40020400 	.word	0x40020400

08005a48 <DRV_SPI_TransferData>:
  */
uint8_t test_0 = 0;
uint8_t test_1 = 0;
uint8_t *rx_ptr;
int8_t DRV_SPI_TransferData(uint8_t spiSlaveDeviceIndex, uint8_t *SpiTxData, uint8_t *SpiRxData, uint16_t spiTransferSize)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	461a      	mov	r2, r3
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	81bb      	strh	r3, [r7, #12]
//	static uint8_t *rx_ptr;
    int8_t error = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	75fb      	strb	r3, [r7, #23]
    // Assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, true);
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2101      	movs	r1, #1
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff ffb1 	bl	80059cc <DRV_SPI_ChipSelectAssert>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	75fb      	strb	r3, [r7, #23]
    if (error != 0)
 8005a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <DRV_SPI_TransferData+0x34>
        return error;
 8005a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a7a:	e031      	b.n	8005ae0 <DRV_SPI_TransferData+0x98>

    switch (spiSlaveDeviceIndex){
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <DRV_SPI_TransferData+0x40>
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d013      	beq.n	8005aae <DRV_SPI_TransferData+0x66>
        case DRV_CANFDSPI_INDEX_1:
        	HAL_SPI_TransmitReceive(&hspi2,SpiTxData,SpiRxData,spiTransferSize,1000);
        	test_1++;
        	break;
        default:
            break;
 8005a86:	e022      	b.n	8005ace <DRV_SPI_TransferData+0x86>
            HAL_SPI_TransmitReceive(&hspi1,SpiTxData,SpiRxData,spiTransferSize,1000);
 8005a88:	89bb      	ldrh	r3, [r7, #12]
 8005a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a8e:	9200      	str	r2, [sp, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4814      	ldr	r0, [pc, #80]	; (8005ae8 <DRV_SPI_TransferData+0xa0>)
 8005a96:	f7fc fbbc 	bl	8002212 <HAL_SPI_TransmitReceive>
            rx_ptr = SpiRxData;
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <DRV_SPI_TransferData+0xa4>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6013      	str	r3, [r2, #0]
            test_0++;
 8005aa0:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <DRV_SPI_TransferData+0xa8>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <DRV_SPI_TransferData+0xa8>)
 8005aaa:	701a      	strb	r2, [r3, #0]
            break;
 8005aac:	e00f      	b.n	8005ace <DRV_SPI_TransferData+0x86>
        	HAL_SPI_TransmitReceive(&hspi2,SpiTxData,SpiRxData,spiTransferSize,1000);
 8005aae:	89bb      	ldrh	r3, [r7, #12]
 8005ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ab4:	9200      	str	r2, [sp, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	480e      	ldr	r0, [pc, #56]	; (8005af4 <DRV_SPI_TransferData+0xac>)
 8005abc:	f7fc fba9 	bl	8002212 <HAL_SPI_TransmitReceive>
        	test_1++;
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <DRV_SPI_TransferData+0xb0>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <DRV_SPI_TransferData+0xb0>)
 8005aca:	701a      	strb	r2, [r3, #0]
        	break;
 8005acc:	bf00      	nop
    }
    // De�\assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, false);
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff ff7a 	bl	80059cc <DRV_SPI_ChipSelectAssert>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]

    return error;
 8005adc:	f997 3017 	ldrsb.w	r3, [r7, #23]
} 
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000144 	.word	0x20000144
 8005aec:	20000440 	.word	0x20000440
 8005af0:	2000043c 	.word	0x2000043c
 8005af4:	2000019c 	.word	0x2000019c
 8005af8:	2000043d 	.word	0x2000043d

08005afc <mcp2518fd_transmit>:

CAN_TX_MSGOBJ txObj;
//CAN_TX_MSGOBJ txObj;
uint8_t txd[MAX_DATA_BYTES];

void mcp2518fd_transmit(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af02      	add	r7, sp, #8
//	uint8_t attempts = 50;
	uint8_t n;
	int16_t i;
	bool flush = true;
 8005b02:	2301      	movs	r3, #1
 8005b04:	717b      	strb	r3, [r7, #5]
	static uint16_t messageID_add = 0;

    /**********************Prepare Data****************************************/
//    Nop();
//    Nop();
    txObj.bF.id.SID = 0x300 + ((messageID_add++) & 0xF);
 8005b06:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <mcp2518fd_transmit+0xe8>)
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	b291      	uxth	r1, r2
 8005b0e:	4a35      	ldr	r2, [pc, #212]	; (8005be4 <mcp2518fd_transmit+0xe8>)
 8005b10:	8011      	strh	r1, [r2, #0]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b22:	b299      	uxth	r1, r3
 8005b24:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005b26:	8813      	ldrh	r3, [r2, #0]
 8005b28:	f361 030a 	bfi	r3, r1, #0, #11
 8005b2c:	8013      	strh	r3, [r2, #0]

    txObj.bF.ctrl.DLC = CAN_DLC_64;
 8005b2e:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005b30:	7913      	ldrb	r3, [r2, #4]
 8005b32:	f043 030f 	orr.w	r3, r3, #15
 8005b36:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 0; //0: standard frame | 1: extended frame
 8005b38:	4a2b      	ldr	r2, [pc, #172]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005b3a:	7913      	ldrb	r3, [r2, #4]
 8005b3c:	f36f 1304 	bfc	r3, #4, #1
 8005b40:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.BRS = 1; //switch bit rate
 8005b42:	4a29      	ldr	r2, [pc, #164]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005b44:	7913      	ldrb	r3, [r2, #4]
 8005b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b4a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 1; //1: CAN FD frame | 0: CAN frame
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005b4e:	7913      	ldrb	r3, [r2, #4]
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	7113      	strb	r3, [r2, #4]

    n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj.bF.ctrl.DLC);
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005b58:	791b      	ldrb	r3, [r3, #4]
 8005b5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fe19 	bl	8005798 <DRV_CANFDSPI_DlcToDataBytes>
 8005b66:	4603      	mov	r3, r0
 8005b68:	713b      	strb	r3, [r7, #4]
    //create random data with size of buffer = size of DLC
    for (i = 0; i < n; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	80fb      	strh	r3, [r7, #6]
 8005b6e:	e00d      	b.n	8005b8c <mcp2518fd_transmit+0x90>
    {
        txd[i] = rand() & 0xff;
 8005b70:	f000 f866 	bl	8005c40 <rand>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b7a:	b2d1      	uxtb	r1, r2
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <mcp2518fd_transmit+0xf0>)
 8005b7e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < n; i++)
 8005b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3301      	adds	r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	80fb      	strh	r3, [r7, #6]
 8005b8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b90:	793b      	ldrb	r3, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	dbec      	blt.n	8005b70 <mcp2518fd_transmit+0x74>
    //reset timeout counter
//    transmitTimeout_Flag = 0;
    /*for testing timeout*/
//    txFlags = CAN_TX_FIFO_NO_EVENT;
    do {
    	DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <mcp2518fd_transmit+0xf4>)
 8005b98:	2102      	movs	r1, #2
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f7fe fd4f 	bl	800463e <DRV_CANFDSPI_TransmitChannelEventGet>
    	transmitTimeout_Flag = 0;
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <mcp2518fd_transmit+0xf8>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
//    } while ( !(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT) );
    } while ( (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)) && (transmitTimeout_Flag == 0) );
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <mcp2518fd_transmit+0xf4>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <mcp2518fd_transmit+0xbe>
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <mcp2518fd_transmit+0xf8>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ed      	beq.n	8005b96 <mcp2518fd_transmit+0x9a>
    //stop counter
    transmitTimeout_Flag = 1;
 8005bba:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <mcp2518fd_transmit+0xf8>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
    //reset counter
    transmitTimeout_Cnt = 0;
 8005bc0:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <mcp2518fd_transmit+0xfc>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

//    transmitTimeout_Flag = 2;

	DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, flush);
 8005bc6:	793b      	ldrb	r3, [r7, #4]
 8005bc8:	797a      	ldrb	r2, [r7, #5]
 8005bca:	9201      	str	r2, [sp, #4]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	4b07      	ldr	r3, [pc, #28]	; (8005bec <mcp2518fd_transmit+0xf0>)
 8005bd0:	4a05      	ldr	r2, [pc, #20]	; (8005be8 <mcp2518fd_transmit+0xec>)
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fe f961 	bl	8003e9c <DRV_CANFDSPI_TransmitChannelLoad>
//	printf("\r\n Transmit message's ID = %04x, and txd[0] = %02x", txObj.bF.id.SID, txd[0]);
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000484 	.word	0x20000484
 8005be8:	200003d4 	.word	0x200003d4
 8005bec:	20000444 	.word	0x20000444
 8005bf0:	200003d0 	.word	0x200003d0
 8005bf4:	2000005c 	.word	0x2000005c
 8005bf8:	20000438 	.word	0x20000438

08005bfc <mcp2518fd_receive>:

void mcp2518fd_receive(void) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af02      	add	r7, sp, #8
//	DRV_CANFDSPI_2_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
//	if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
		// Get message
//	DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, &rxFlags);
//	if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
		DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8005c02:	2340      	movs	r3, #64	; 0x40
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <mcp2518fd_receive+0x34>)
 8005c08:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <mcp2518fd_receive+0x38>)
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	f7fe fb65 	bl	80042dc <DRV_CANFDSPI_ReceiveMessageGet>
		printf("\r\n Receive message's ID = %04x, and rxd[0] = %02x", txObj.bF.id.SID, rxd[0]);
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <mcp2518fd_receive+0x3c>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <mcp2518fd_receive+0x34>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	4805      	ldr	r0, [pc, #20]	; (8005c3c <mcp2518fd_receive+0x40>)
 8005c26:	f000 f8f9 	bl	8005e1c <iprintf>
//	}
//	rxFlags = CAN_RX_FIFO_NO_EVENT;
//	}
}
 8005c2a:	bf00      	nop
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	200003f8 	.word	0x200003f8
 8005c34:	200003ec 	.word	0x200003ec
 8005c38:	200003d4 	.word	0x200003d4
 8005c3c:	08006c24 	.word	0x08006c24

08005c40 <rand>:
 8005c40:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <rand+0x5c>)
 8005c42:	b510      	push	{r4, lr}
 8005c44:	681c      	ldr	r4, [r3, #0]
 8005c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c48:	b9b3      	cbnz	r3, 8005c78 <rand+0x38>
 8005c4a:	2018      	movs	r0, #24
 8005c4c:	f000 fa20 	bl	8006090 <malloc>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6320      	str	r0, [r4, #48]	; 0x30
 8005c54:	b920      	cbnz	r0, 8005c60 <rand+0x20>
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <rand+0x60>)
 8005c58:	4812      	ldr	r0, [pc, #72]	; (8005ca4 <rand+0x64>)
 8005c5a:	2152      	movs	r1, #82	; 0x52
 8005c5c:	f000 f9ae 	bl	8005fbc <__assert_func>
 8005c60:	4911      	ldr	r1, [pc, #68]	; (8005ca8 <rand+0x68>)
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <rand+0x6c>)
 8005c64:	e9c0 1300 	strd	r1, r3, [r0]
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <rand+0x70>)
 8005c6a:	6083      	str	r3, [r0, #8]
 8005c6c:	230b      	movs	r3, #11
 8005c6e:	8183      	strh	r3, [r0, #12]
 8005c70:	2100      	movs	r1, #0
 8005c72:	2001      	movs	r0, #1
 8005c74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c7a:	480e      	ldr	r0, [pc, #56]	; (8005cb4 <rand+0x74>)
 8005c7c:	690b      	ldr	r3, [r1, #16]
 8005c7e:	694c      	ldr	r4, [r1, #20]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <rand+0x78>)
 8005c82:	4358      	muls	r0, r3
 8005c84:	fb02 0004 	mla	r0, r2, r4, r0
 8005c88:	fba3 3202 	umull	r3, r2, r3, r2
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	eb40 0002 	adc.w	r0, r0, r2
 8005c92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005c96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c9a:	bd10      	pop	{r4, pc}
 8005c9c:	200000b8 	.word	0x200000b8
 8005ca0:	08006c6c 	.word	0x08006c6c
 8005ca4:	08006c83 	.word	0x08006c83
 8005ca8:	abcd330e 	.word	0xabcd330e
 8005cac:	e66d1234 	.word	0xe66d1234
 8005cb0:	0005deec 	.word	0x0005deec
 8005cb4:	5851f42d 	.word	0x5851f42d
 8005cb8:	4c957f2d 	.word	0x4c957f2d

08005cbc <std>:
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cca:	6083      	str	r3, [r0, #8]
 8005ccc:	8181      	strh	r1, [r0, #12]
 8005cce:	6643      	str	r3, [r0, #100]	; 0x64
 8005cd0:	81c2      	strh	r2, [r0, #14]
 8005cd2:	6183      	str	r3, [r0, #24]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	2208      	movs	r2, #8
 8005cd8:	305c      	adds	r0, #92	; 0x5c
 8005cda:	f000 f8f4 	bl	8005ec6 <memset>
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <std+0x38>)
 8005ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <std+0x3c>)
 8005ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <std+0x40>)
 8005ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cea:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <std+0x44>)
 8005cec:	6224      	str	r4, [r4, #32]
 8005cee:	6323      	str	r3, [r4, #48]	; 0x30
 8005cf0:	bd10      	pop	{r4, pc}
 8005cf2:	bf00      	nop
 8005cf4:	08005e41 	.word	0x08005e41
 8005cf8:	08005e63 	.word	0x08005e63
 8005cfc:	08005e9b 	.word	0x08005e9b
 8005d00:	08005ebf 	.word	0x08005ebf

08005d04 <stdio_exit_handler>:
 8005d04:	4a02      	ldr	r2, [pc, #8]	; (8005d10 <stdio_exit_handler+0xc>)
 8005d06:	4903      	ldr	r1, [pc, #12]	; (8005d14 <stdio_exit_handler+0x10>)
 8005d08:	4803      	ldr	r0, [pc, #12]	; (8005d18 <stdio_exit_handler+0x14>)
 8005d0a:	f000 b869 	b.w	8005de0 <_fwalk_sglue>
 8005d0e:	bf00      	nop
 8005d10:	20000060 	.word	0x20000060
 8005d14:	080068ad 	.word	0x080068ad
 8005d18:	2000006c 	.word	0x2000006c

08005d1c <cleanup_stdio>:
 8005d1c:	6841      	ldr	r1, [r0, #4]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <cleanup_stdio+0x34>)
 8005d20:	4299      	cmp	r1, r3
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
 8005d26:	d001      	beq.n	8005d2c <cleanup_stdio+0x10>
 8005d28:	f000 fdc0 	bl	80068ac <_fflush_r>
 8005d2c:	68a1      	ldr	r1, [r4, #8]
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <cleanup_stdio+0x38>)
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d002      	beq.n	8005d3a <cleanup_stdio+0x1e>
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 fdb9 	bl	80068ac <_fflush_r>
 8005d3a:	68e1      	ldr	r1, [r4, #12]
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <cleanup_stdio+0x3c>)
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d004      	beq.n	8005d4c <cleanup_stdio+0x30>
 8005d42:	4620      	mov	r0, r4
 8005d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d48:	f000 bdb0 	b.w	80068ac <_fflush_r>
 8005d4c:	bd10      	pop	{r4, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000488 	.word	0x20000488
 8005d54:	200004f0 	.word	0x200004f0
 8005d58:	20000558 	.word	0x20000558

08005d5c <global_stdio_init.part.0>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <global_stdio_init.part.0+0x30>)
 8005d60:	4c0b      	ldr	r4, [pc, #44]	; (8005d90 <global_stdio_init.part.0+0x34>)
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <global_stdio_init.part.0+0x38>)
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	4620      	mov	r0, r4
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	f7ff ffa6 	bl	8005cbc <std>
 8005d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d74:	2201      	movs	r2, #1
 8005d76:	2109      	movs	r1, #9
 8005d78:	f7ff ffa0 	bl	8005cbc <std>
 8005d7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d80:	2202      	movs	r2, #2
 8005d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d86:	2112      	movs	r1, #18
 8005d88:	f7ff bf98 	b.w	8005cbc <std>
 8005d8c:	200005c0 	.word	0x200005c0
 8005d90:	20000488 	.word	0x20000488
 8005d94:	08005d05 	.word	0x08005d05

08005d98 <__sfp_lock_acquire>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__sfp_lock_acquire+0x8>)
 8005d9a:	f000 b90d 	b.w	8005fb8 <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	200005c9 	.word	0x200005c9

08005da4 <__sfp_lock_release>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__sfp_lock_release+0x8>)
 8005da6:	f000 b908 	b.w	8005fba <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	200005c9 	.word	0x200005c9

08005db0 <__sinit>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4604      	mov	r4, r0
 8005db4:	f7ff fff0 	bl	8005d98 <__sfp_lock_acquire>
 8005db8:	6a23      	ldr	r3, [r4, #32]
 8005dba:	b11b      	cbz	r3, 8005dc4 <__sinit+0x14>
 8005dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc0:	f7ff bff0 	b.w	8005da4 <__sfp_lock_release>
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <__sinit+0x28>)
 8005dc6:	6223      	str	r3, [r4, #32]
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <__sinit+0x2c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f5      	bne.n	8005dbc <__sinit+0xc>
 8005dd0:	f7ff ffc4 	bl	8005d5c <global_stdio_init.part.0>
 8005dd4:	e7f2      	b.n	8005dbc <__sinit+0xc>
 8005dd6:	bf00      	nop
 8005dd8:	08005d1d 	.word	0x08005d1d
 8005ddc:	200005c0 	.word	0x200005c0

08005de0 <_fwalk_sglue>:
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	4607      	mov	r7, r0
 8005de6:	4688      	mov	r8, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	2600      	movs	r6, #0
 8005dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005df0:	f1b9 0901 	subs.w	r9, r9, #1
 8005df4:	d505      	bpl.n	8005e02 <_fwalk_sglue+0x22>
 8005df6:	6824      	ldr	r4, [r4, #0]
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	d1f7      	bne.n	8005dec <_fwalk_sglue+0xc>
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d907      	bls.n	8005e18 <_fwalk_sglue+0x38>
 8005e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	d003      	beq.n	8005e18 <_fwalk_sglue+0x38>
 8005e10:	4629      	mov	r1, r5
 8005e12:	4638      	mov	r0, r7
 8005e14:	47c0      	blx	r8
 8005e16:	4306      	orrs	r6, r0
 8005e18:	3568      	adds	r5, #104	; 0x68
 8005e1a:	e7e9      	b.n	8005df0 <_fwalk_sglue+0x10>

08005e1c <iprintf>:
 8005e1c:	b40f      	push	{r0, r1, r2, r3}
 8005e1e:	b507      	push	{r0, r1, r2, lr}
 8005e20:	4906      	ldr	r1, [pc, #24]	; (8005e3c <iprintf+0x20>)
 8005e22:	ab04      	add	r3, sp, #16
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2a:	6881      	ldr	r1, [r0, #8]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	f000 fa0d 	bl	800624c <_vfiprintf_r>
 8005e32:	b003      	add	sp, #12
 8005e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e38:	b004      	add	sp, #16
 8005e3a:	4770      	bx	lr
 8005e3c:	200000b8 	.word	0x200000b8

08005e40 <__sread>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	460c      	mov	r4, r1
 8005e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e48:	f000 f868 	bl	8005f1c <_read_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	bfab      	itete	ge
 8005e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e52:	89a3      	ldrhlt	r3, [r4, #12]
 8005e54:	181b      	addge	r3, r3, r0
 8005e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e5a:	bfac      	ite	ge
 8005e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e5e:	81a3      	strhlt	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__swrite>:
 8005e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e66:	461f      	mov	r7, r3
 8005e68:	898b      	ldrh	r3, [r1, #12]
 8005e6a:	05db      	lsls	r3, r3, #23
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	4616      	mov	r6, r2
 8005e72:	d505      	bpl.n	8005e80 <__swrite+0x1e>
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	2302      	movs	r3, #2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f000 f83c 	bl	8005ef8 <_lseek_r>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	463b      	mov	r3, r7
 8005e90:	4628      	mov	r0, r5
 8005e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e96:	f000 b853 	b.w	8005f40 <_write_r>

08005e9a <__sseek>:
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea2:	f000 f829 	bl	8005ef8 <_lseek_r>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	bf15      	itete	ne
 8005eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eb6:	81a3      	strheq	r3, [r4, #12]
 8005eb8:	bf18      	it	ne
 8005eba:	81a3      	strhne	r3, [r4, #12]
 8005ebc:	bd10      	pop	{r4, pc}

08005ebe <__sclose>:
 8005ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec2:	f000 b809 	b.w	8005ed8 <_close_r>

08005ec6 <memset>:
 8005ec6:	4402      	add	r2, r0
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d100      	bne.n	8005ed0 <memset+0xa>
 8005ece:	4770      	bx	lr
 8005ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed4:	e7f9      	b.n	8005eca <memset+0x4>
	...

08005ed8 <_close_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d06      	ldr	r5, [pc, #24]	; (8005ef4 <_close_r+0x1c>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fa ffed 	bl	8000ec2 <_close>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_close_r+0x1a>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_close_r+0x1a>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	200005c4 	.word	0x200005c4

08005ef8 <_lseek_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_lseek_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb f802 	bl	8000f10 <_lseek>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_lseek_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_lseek_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200005c4 	.word	0x200005c4

08005f1c <_read_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	; (8005f3c <_read_r+0x20>)
 8005f20:	4604      	mov	r4, r0
 8005f22:	4608      	mov	r0, r1
 8005f24:	4611      	mov	r1, r2
 8005f26:	2200      	movs	r2, #0
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7fa ff90 	bl	8000e50 <_read>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_read_r+0x1e>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_read_r+0x1e>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	200005c4 	.word	0x200005c4

08005f40 <_write_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	; (8005f60 <_write_r+0x20>)
 8005f44:	4604      	mov	r4, r0
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7fa ff9b 	bl	8000e8a <_write>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_write_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_write_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	200005c4 	.word	0x200005c4

08005f64 <__errno>:
 8005f64:	4b01      	ldr	r3, [pc, #4]	; (8005f6c <__errno+0x8>)
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	200000b8 	.word	0x200000b8

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4d0d      	ldr	r5, [pc, #52]	; (8005fa8 <__libc_init_array+0x38>)
 8005f74:	4c0d      	ldr	r4, [pc, #52]	; (8005fac <__libc_init_array+0x3c>)
 8005f76:	1b64      	subs	r4, r4, r5
 8005f78:	10a4      	asrs	r4, r4, #2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	4d0b      	ldr	r5, [pc, #44]	; (8005fb0 <__libc_init_array+0x40>)
 8005f82:	4c0c      	ldr	r4, [pc, #48]	; (8005fb4 <__libc_init_array+0x44>)
 8005f84:	f000 fe42 	bl	8006c0c <_init>
 8005f88:	1b64      	subs	r4, r4, r5
 8005f8a:	10a4      	asrs	r4, r4, #2
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	08006d54 	.word	0x08006d54
 8005fac:	08006d54 	.word	0x08006d54
 8005fb0:	08006d54 	.word	0x08006d54
 8005fb4:	08006d58 	.word	0x08006d58

08005fb8 <__retarget_lock_acquire_recursive>:
 8005fb8:	4770      	bx	lr

08005fba <__retarget_lock_release_recursive>:
 8005fba:	4770      	bx	lr

08005fbc <__assert_func>:
 8005fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <__assert_func+0x2c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	68d8      	ldr	r0, [r3, #12]
 8005fca:	b14c      	cbz	r4, 8005fe0 <__assert_func+0x24>
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <__assert_func+0x30>)
 8005fce:	9100      	str	r1, [sp, #0]
 8005fd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fd4:	4906      	ldr	r1, [pc, #24]	; (8005ff0 <__assert_func+0x34>)
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	f000 fc90 	bl	80068fc <fiprintf>
 8005fdc:	f000 fd46 	bl	8006a6c <abort>
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <__assert_func+0x38>)
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	e7f3      	b.n	8005fce <__assert_func+0x12>
 8005fe6:	bf00      	nop
 8005fe8:	200000b8 	.word	0x200000b8
 8005fec:	08006cdb 	.word	0x08006cdb
 8005ff0:	08006ce8 	.word	0x08006ce8
 8005ff4:	08006d16 	.word	0x08006d16

08005ff8 <_free_r>:
 8005ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	d044      	beq.n	8006088 <_free_r+0x90>
 8005ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f1a1 0404 	sub.w	r4, r1, #4
 800600a:	bfb8      	it	lt
 800600c:	18e4      	addlt	r4, r4, r3
 800600e:	f000 f8e7 	bl	80061e0 <__malloc_lock>
 8006012:	4a1e      	ldr	r2, [pc, #120]	; (800608c <_free_r+0x94>)
 8006014:	9801      	ldr	r0, [sp, #4]
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	b933      	cbnz	r3, 8006028 <_free_r+0x30>
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	6014      	str	r4, [r2, #0]
 800601e:	b003      	add	sp, #12
 8006020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006024:	f000 b8e2 	b.w	80061ec <__malloc_unlock>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d908      	bls.n	800603e <_free_r+0x46>
 800602c:	6825      	ldr	r5, [r4, #0]
 800602e:	1961      	adds	r1, r4, r5
 8006030:	428b      	cmp	r3, r1
 8006032:	bf01      	itttt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	1949      	addeq	r1, r1, r5
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	e7ed      	b.n	800601a <_free_r+0x22>
 800603e:	461a      	mov	r2, r3
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b10b      	cbz	r3, 8006048 <_free_r+0x50>
 8006044:	42a3      	cmp	r3, r4
 8006046:	d9fa      	bls.n	800603e <_free_r+0x46>
 8006048:	6811      	ldr	r1, [r2, #0]
 800604a:	1855      	adds	r5, r2, r1
 800604c:	42a5      	cmp	r5, r4
 800604e:	d10b      	bne.n	8006068 <_free_r+0x70>
 8006050:	6824      	ldr	r4, [r4, #0]
 8006052:	4421      	add	r1, r4
 8006054:	1854      	adds	r4, r2, r1
 8006056:	42a3      	cmp	r3, r4
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	d1e0      	bne.n	800601e <_free_r+0x26>
 800605c:	681c      	ldr	r4, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	6053      	str	r3, [r2, #4]
 8006062:	440c      	add	r4, r1
 8006064:	6014      	str	r4, [r2, #0]
 8006066:	e7da      	b.n	800601e <_free_r+0x26>
 8006068:	d902      	bls.n	8006070 <_free_r+0x78>
 800606a:	230c      	movs	r3, #12
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	e7d6      	b.n	800601e <_free_r+0x26>
 8006070:	6825      	ldr	r5, [r4, #0]
 8006072:	1961      	adds	r1, r4, r5
 8006074:	428b      	cmp	r3, r1
 8006076:	bf04      	itt	eq
 8006078:	6819      	ldreq	r1, [r3, #0]
 800607a:	685b      	ldreq	r3, [r3, #4]
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	bf04      	itt	eq
 8006080:	1949      	addeq	r1, r1, r5
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	6054      	str	r4, [r2, #4]
 8006086:	e7ca      	b.n	800601e <_free_r+0x26>
 8006088:	b003      	add	sp, #12
 800608a:	bd30      	pop	{r4, r5, pc}
 800608c:	200005cc 	.word	0x200005cc

08006090 <malloc>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <malloc+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f000 b823 	b.w	80060e0 <_malloc_r>
 800609a:	bf00      	nop
 800609c:	200000b8 	.word	0x200000b8

080060a0 <sbrk_aligned>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4e0e      	ldr	r6, [pc, #56]	; (80060dc <sbrk_aligned+0x3c>)
 80060a4:	460c      	mov	r4, r1
 80060a6:	6831      	ldr	r1, [r6, #0]
 80060a8:	4605      	mov	r5, r0
 80060aa:	b911      	cbnz	r1, 80060b2 <sbrk_aligned+0x12>
 80060ac:	f000 fcce 	bl	8006a4c <_sbrk_r>
 80060b0:	6030      	str	r0, [r6, #0]
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 fcc9 	bl	8006a4c <_sbrk_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d00a      	beq.n	80060d4 <sbrk_aligned+0x34>
 80060be:	1cc4      	adds	r4, r0, #3
 80060c0:	f024 0403 	bic.w	r4, r4, #3
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d007      	beq.n	80060d8 <sbrk_aligned+0x38>
 80060c8:	1a21      	subs	r1, r4, r0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 fcbe 	bl	8006a4c <_sbrk_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d101      	bne.n	80060d8 <sbrk_aligned+0x38>
 80060d4:	f04f 34ff 	mov.w	r4, #4294967295
 80060d8:	4620      	mov	r0, r4
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	200005d0 	.word	0x200005d0

080060e0 <_malloc_r>:
 80060e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e4:	1ccd      	adds	r5, r1, #3
 80060e6:	f025 0503 	bic.w	r5, r5, #3
 80060ea:	3508      	adds	r5, #8
 80060ec:	2d0c      	cmp	r5, #12
 80060ee:	bf38      	it	cc
 80060f0:	250c      	movcc	r5, #12
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	4607      	mov	r7, r0
 80060f6:	db01      	blt.n	80060fc <_malloc_r+0x1c>
 80060f8:	42a9      	cmp	r1, r5
 80060fa:	d905      	bls.n	8006108 <_malloc_r+0x28>
 80060fc:	230c      	movs	r3, #12
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	2600      	movs	r6, #0
 8006102:	4630      	mov	r0, r6
 8006104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006108:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061dc <_malloc_r+0xfc>
 800610c:	f000 f868 	bl	80061e0 <__malloc_lock>
 8006110:	f8d8 3000 	ldr.w	r3, [r8]
 8006114:	461c      	mov	r4, r3
 8006116:	bb5c      	cbnz	r4, 8006170 <_malloc_r+0x90>
 8006118:	4629      	mov	r1, r5
 800611a:	4638      	mov	r0, r7
 800611c:	f7ff ffc0 	bl	80060a0 <sbrk_aligned>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	4604      	mov	r4, r0
 8006124:	d155      	bne.n	80061d2 <_malloc_r+0xf2>
 8006126:	f8d8 4000 	ldr.w	r4, [r8]
 800612a:	4626      	mov	r6, r4
 800612c:	2e00      	cmp	r6, #0
 800612e:	d145      	bne.n	80061bc <_malloc_r+0xdc>
 8006130:	2c00      	cmp	r4, #0
 8006132:	d048      	beq.n	80061c6 <_malloc_r+0xe6>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	4631      	mov	r1, r6
 8006138:	4638      	mov	r0, r7
 800613a:	eb04 0903 	add.w	r9, r4, r3
 800613e:	f000 fc85 	bl	8006a4c <_sbrk_r>
 8006142:	4581      	cmp	r9, r0
 8006144:	d13f      	bne.n	80061c6 <_malloc_r+0xe6>
 8006146:	6821      	ldr	r1, [r4, #0]
 8006148:	1a6d      	subs	r5, r5, r1
 800614a:	4629      	mov	r1, r5
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff ffa7 	bl	80060a0 <sbrk_aligned>
 8006152:	3001      	adds	r0, #1
 8006154:	d037      	beq.n	80061c6 <_malloc_r+0xe6>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	442b      	add	r3, r5
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	f8d8 3000 	ldr.w	r3, [r8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d038      	beq.n	80061d6 <_malloc_r+0xf6>
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	42a2      	cmp	r2, r4
 8006168:	d12b      	bne.n	80061c2 <_malloc_r+0xe2>
 800616a:	2200      	movs	r2, #0
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	e00f      	b.n	8006190 <_malloc_r+0xb0>
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	1b52      	subs	r2, r2, r5
 8006174:	d41f      	bmi.n	80061b6 <_malloc_r+0xd6>
 8006176:	2a0b      	cmp	r2, #11
 8006178:	d917      	bls.n	80061aa <_malloc_r+0xca>
 800617a:	1961      	adds	r1, r4, r5
 800617c:	42a3      	cmp	r3, r4
 800617e:	6025      	str	r5, [r4, #0]
 8006180:	bf18      	it	ne
 8006182:	6059      	strne	r1, [r3, #4]
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	bf08      	it	eq
 8006188:	f8c8 1000 	streq.w	r1, [r8]
 800618c:	5162      	str	r2, [r4, r5]
 800618e:	604b      	str	r3, [r1, #4]
 8006190:	4638      	mov	r0, r7
 8006192:	f104 060b 	add.w	r6, r4, #11
 8006196:	f000 f829 	bl	80061ec <__malloc_unlock>
 800619a:	f026 0607 	bic.w	r6, r6, #7
 800619e:	1d23      	adds	r3, r4, #4
 80061a0:	1af2      	subs	r2, r6, r3
 80061a2:	d0ae      	beq.n	8006102 <_malloc_r+0x22>
 80061a4:	1b9b      	subs	r3, r3, r6
 80061a6:	50a3      	str	r3, [r4, r2]
 80061a8:	e7ab      	b.n	8006102 <_malloc_r+0x22>
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	6862      	ldr	r2, [r4, #4]
 80061ae:	d1dd      	bne.n	800616c <_malloc_r+0x8c>
 80061b0:	f8c8 2000 	str.w	r2, [r8]
 80061b4:	e7ec      	b.n	8006190 <_malloc_r+0xb0>
 80061b6:	4623      	mov	r3, r4
 80061b8:	6864      	ldr	r4, [r4, #4]
 80061ba:	e7ac      	b.n	8006116 <_malloc_r+0x36>
 80061bc:	4634      	mov	r4, r6
 80061be:	6876      	ldr	r6, [r6, #4]
 80061c0:	e7b4      	b.n	800612c <_malloc_r+0x4c>
 80061c2:	4613      	mov	r3, r2
 80061c4:	e7cc      	b.n	8006160 <_malloc_r+0x80>
 80061c6:	230c      	movs	r3, #12
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	4638      	mov	r0, r7
 80061cc:	f000 f80e 	bl	80061ec <__malloc_unlock>
 80061d0:	e797      	b.n	8006102 <_malloc_r+0x22>
 80061d2:	6025      	str	r5, [r4, #0]
 80061d4:	e7dc      	b.n	8006190 <_malloc_r+0xb0>
 80061d6:	605b      	str	r3, [r3, #4]
 80061d8:	deff      	udf	#255	; 0xff
 80061da:	bf00      	nop
 80061dc:	200005cc 	.word	0x200005cc

080061e0 <__malloc_lock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__malloc_lock+0x8>)
 80061e2:	f7ff bee9 	b.w	8005fb8 <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	200005c8 	.word	0x200005c8

080061ec <__malloc_unlock>:
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <__malloc_unlock+0x8>)
 80061ee:	f7ff bee4 	b.w	8005fba <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	200005c8 	.word	0x200005c8

080061f8 <__sfputc_r>:
 80061f8:	6893      	ldr	r3, [r2, #8]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	b410      	push	{r4}
 8006200:	6093      	str	r3, [r2, #8]
 8006202:	da08      	bge.n	8006216 <__sfputc_r+0x1e>
 8006204:	6994      	ldr	r4, [r2, #24]
 8006206:	42a3      	cmp	r3, r4
 8006208:	db01      	blt.n	800620e <__sfputc_r+0x16>
 800620a:	290a      	cmp	r1, #10
 800620c:	d103      	bne.n	8006216 <__sfputc_r+0x1e>
 800620e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006212:	f000 bb85 	b.w	8006920 <__swbuf_r>
 8006216:	6813      	ldr	r3, [r2, #0]
 8006218:	1c58      	adds	r0, r3, #1
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	7019      	strb	r1, [r3, #0]
 800621e:	4608      	mov	r0, r1
 8006220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006224:	4770      	bx	lr

08006226 <__sfputs_r>:
 8006226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	4614      	mov	r4, r2
 800622e:	18d5      	adds	r5, r2, r3
 8006230:	42ac      	cmp	r4, r5
 8006232:	d101      	bne.n	8006238 <__sfputs_r+0x12>
 8006234:	2000      	movs	r0, #0
 8006236:	e007      	b.n	8006248 <__sfputs_r+0x22>
 8006238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623c:	463a      	mov	r2, r7
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ffda 	bl	80061f8 <__sfputc_r>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d1f3      	bne.n	8006230 <__sfputs_r+0xa>
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800624c <_vfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	460d      	mov	r5, r1
 8006252:	b09d      	sub	sp, #116	; 0x74
 8006254:	4614      	mov	r4, r2
 8006256:	4698      	mov	r8, r3
 8006258:	4606      	mov	r6, r0
 800625a:	b118      	cbz	r0, 8006264 <_vfiprintf_r+0x18>
 800625c:	6a03      	ldr	r3, [r0, #32]
 800625e:	b90b      	cbnz	r3, 8006264 <_vfiprintf_r+0x18>
 8006260:	f7ff fda6 	bl	8005db0 <__sinit>
 8006264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006266:	07d9      	lsls	r1, r3, #31
 8006268:	d405      	bmi.n	8006276 <_vfiprintf_r+0x2a>
 800626a:	89ab      	ldrh	r3, [r5, #12]
 800626c:	059a      	lsls	r2, r3, #22
 800626e:	d402      	bmi.n	8006276 <_vfiprintf_r+0x2a>
 8006270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006272:	f7ff fea1 	bl	8005fb8 <__retarget_lock_acquire_recursive>
 8006276:	89ab      	ldrh	r3, [r5, #12]
 8006278:	071b      	lsls	r3, r3, #28
 800627a:	d501      	bpl.n	8006280 <_vfiprintf_r+0x34>
 800627c:	692b      	ldr	r3, [r5, #16]
 800627e:	b99b      	cbnz	r3, 80062a8 <_vfiprintf_r+0x5c>
 8006280:	4629      	mov	r1, r5
 8006282:	4630      	mov	r0, r6
 8006284:	f000 fb8a 	bl	800699c <__swsetup_r>
 8006288:	b170      	cbz	r0, 80062a8 <_vfiprintf_r+0x5c>
 800628a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628c:	07dc      	lsls	r4, r3, #31
 800628e:	d504      	bpl.n	800629a <_vfiprintf_r+0x4e>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	b01d      	add	sp, #116	; 0x74
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	0598      	lsls	r0, r3, #22
 800629e:	d4f7      	bmi.n	8006290 <_vfiprintf_r+0x44>
 80062a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a2:	f7ff fe8a 	bl	8005fba <__retarget_lock_release_recursive>
 80062a6:	e7f3      	b.n	8006290 <_vfiprintf_r+0x44>
 80062a8:	2300      	movs	r3, #0
 80062aa:	9309      	str	r3, [sp, #36]	; 0x24
 80062ac:	2320      	movs	r3, #32
 80062ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062b6:	2330      	movs	r3, #48	; 0x30
 80062b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800646c <_vfiprintf_r+0x220>
 80062bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062c0:	f04f 0901 	mov.w	r9, #1
 80062c4:	4623      	mov	r3, r4
 80062c6:	469a      	mov	sl, r3
 80062c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062cc:	b10a      	cbz	r2, 80062d2 <_vfiprintf_r+0x86>
 80062ce:	2a25      	cmp	r2, #37	; 0x25
 80062d0:	d1f9      	bne.n	80062c6 <_vfiprintf_r+0x7a>
 80062d2:	ebba 0b04 	subs.w	fp, sl, r4
 80062d6:	d00b      	beq.n	80062f0 <_vfiprintf_r+0xa4>
 80062d8:	465b      	mov	r3, fp
 80062da:	4622      	mov	r2, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	4630      	mov	r0, r6
 80062e0:	f7ff ffa1 	bl	8006226 <__sfputs_r>
 80062e4:	3001      	adds	r0, #1
 80062e6:	f000 80a9 	beq.w	800643c <_vfiprintf_r+0x1f0>
 80062ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ec:	445a      	add	r2, fp
 80062ee:	9209      	str	r2, [sp, #36]	; 0x24
 80062f0:	f89a 3000 	ldrb.w	r3, [sl]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a1 	beq.w	800643c <_vfiprintf_r+0x1f0>
 80062fa:	2300      	movs	r3, #0
 80062fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006304:	f10a 0a01 	add.w	sl, sl, #1
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	9307      	str	r3, [sp, #28]
 800630c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006310:	931a      	str	r3, [sp, #104]	; 0x68
 8006312:	4654      	mov	r4, sl
 8006314:	2205      	movs	r2, #5
 8006316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631a:	4854      	ldr	r0, [pc, #336]	; (800646c <_vfiprintf_r+0x220>)
 800631c:	f7f9 ff58 	bl	80001d0 <memchr>
 8006320:	9a04      	ldr	r2, [sp, #16]
 8006322:	b9d8      	cbnz	r0, 800635c <_vfiprintf_r+0x110>
 8006324:	06d1      	lsls	r1, r2, #27
 8006326:	bf44      	itt	mi
 8006328:	2320      	movmi	r3, #32
 800632a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632e:	0713      	lsls	r3, r2, #28
 8006330:	bf44      	itt	mi
 8006332:	232b      	movmi	r3, #43	; 0x2b
 8006334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006338:	f89a 3000 	ldrb.w	r3, [sl]
 800633c:	2b2a      	cmp	r3, #42	; 0x2a
 800633e:	d015      	beq.n	800636c <_vfiprintf_r+0x120>
 8006340:	9a07      	ldr	r2, [sp, #28]
 8006342:	4654      	mov	r4, sl
 8006344:	2000      	movs	r0, #0
 8006346:	f04f 0c0a 	mov.w	ip, #10
 800634a:	4621      	mov	r1, r4
 800634c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006350:	3b30      	subs	r3, #48	; 0x30
 8006352:	2b09      	cmp	r3, #9
 8006354:	d94d      	bls.n	80063f2 <_vfiprintf_r+0x1a6>
 8006356:	b1b0      	cbz	r0, 8006386 <_vfiprintf_r+0x13a>
 8006358:	9207      	str	r2, [sp, #28]
 800635a:	e014      	b.n	8006386 <_vfiprintf_r+0x13a>
 800635c:	eba0 0308 	sub.w	r3, r0, r8
 8006360:	fa09 f303 	lsl.w	r3, r9, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	46a2      	mov	sl, r4
 800636a:	e7d2      	b.n	8006312 <_vfiprintf_r+0xc6>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	9103      	str	r1, [sp, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	bfbb      	ittet	lt
 8006378:	425b      	neglt	r3, r3
 800637a:	f042 0202 	orrlt.w	r2, r2, #2
 800637e:	9307      	strge	r3, [sp, #28]
 8006380:	9307      	strlt	r3, [sp, #28]
 8006382:	bfb8      	it	lt
 8006384:	9204      	strlt	r2, [sp, #16]
 8006386:	7823      	ldrb	r3, [r4, #0]
 8006388:	2b2e      	cmp	r3, #46	; 0x2e
 800638a:	d10c      	bne.n	80063a6 <_vfiprintf_r+0x15a>
 800638c:	7863      	ldrb	r3, [r4, #1]
 800638e:	2b2a      	cmp	r3, #42	; 0x2a
 8006390:	d134      	bne.n	80063fc <_vfiprintf_r+0x1b0>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	1d1a      	adds	r2, r3, #4
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	9203      	str	r2, [sp, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	bfb8      	it	lt
 800639e:	f04f 33ff 	movlt.w	r3, #4294967295
 80063a2:	3402      	adds	r4, #2
 80063a4:	9305      	str	r3, [sp, #20]
 80063a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800647c <_vfiprintf_r+0x230>
 80063aa:	7821      	ldrb	r1, [r4, #0]
 80063ac:	2203      	movs	r2, #3
 80063ae:	4650      	mov	r0, sl
 80063b0:	f7f9 ff0e 	bl	80001d0 <memchr>
 80063b4:	b138      	cbz	r0, 80063c6 <_vfiprintf_r+0x17a>
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	eba0 000a 	sub.w	r0, r0, sl
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	4082      	lsls	r2, r0
 80063c0:	4313      	orrs	r3, r2
 80063c2:	3401      	adds	r4, #1
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ca:	4829      	ldr	r0, [pc, #164]	; (8006470 <_vfiprintf_r+0x224>)
 80063cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063d0:	2206      	movs	r2, #6
 80063d2:	f7f9 fefd 	bl	80001d0 <memchr>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d03f      	beq.n	800645a <_vfiprintf_r+0x20e>
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <_vfiprintf_r+0x228>)
 80063dc:	bb1b      	cbnz	r3, 8006426 <_vfiprintf_r+0x1da>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	f023 0307 	bic.w	r3, r3, #7
 80063e6:	3308      	adds	r3, #8
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ec:	443b      	add	r3, r7
 80063ee:	9309      	str	r3, [sp, #36]	; 0x24
 80063f0:	e768      	b.n	80062c4 <_vfiprintf_r+0x78>
 80063f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063f6:	460c      	mov	r4, r1
 80063f8:	2001      	movs	r0, #1
 80063fa:	e7a6      	b.n	800634a <_vfiprintf_r+0xfe>
 80063fc:	2300      	movs	r3, #0
 80063fe:	3401      	adds	r4, #1
 8006400:	9305      	str	r3, [sp, #20]
 8006402:	4619      	mov	r1, r3
 8006404:	f04f 0c0a 	mov.w	ip, #10
 8006408:	4620      	mov	r0, r4
 800640a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800640e:	3a30      	subs	r2, #48	; 0x30
 8006410:	2a09      	cmp	r2, #9
 8006412:	d903      	bls.n	800641c <_vfiprintf_r+0x1d0>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0c6      	beq.n	80063a6 <_vfiprintf_r+0x15a>
 8006418:	9105      	str	r1, [sp, #20]
 800641a:	e7c4      	b.n	80063a6 <_vfiprintf_r+0x15a>
 800641c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006420:	4604      	mov	r4, r0
 8006422:	2301      	movs	r3, #1
 8006424:	e7f0      	b.n	8006408 <_vfiprintf_r+0x1bc>
 8006426:	ab03      	add	r3, sp, #12
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	462a      	mov	r2, r5
 800642c:	4b12      	ldr	r3, [pc, #72]	; (8006478 <_vfiprintf_r+0x22c>)
 800642e:	a904      	add	r1, sp, #16
 8006430:	4630      	mov	r0, r6
 8006432:	f3af 8000 	nop.w
 8006436:	4607      	mov	r7, r0
 8006438:	1c78      	adds	r0, r7, #1
 800643a:	d1d6      	bne.n	80063ea <_vfiprintf_r+0x19e>
 800643c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800643e:	07d9      	lsls	r1, r3, #31
 8006440:	d405      	bmi.n	800644e <_vfiprintf_r+0x202>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	059a      	lsls	r2, r3, #22
 8006446:	d402      	bmi.n	800644e <_vfiprintf_r+0x202>
 8006448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644a:	f7ff fdb6 	bl	8005fba <__retarget_lock_release_recursive>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	065b      	lsls	r3, r3, #25
 8006452:	f53f af1d 	bmi.w	8006290 <_vfiprintf_r+0x44>
 8006456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006458:	e71c      	b.n	8006294 <_vfiprintf_r+0x48>
 800645a:	ab03      	add	r3, sp, #12
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	462a      	mov	r2, r5
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <_vfiprintf_r+0x22c>)
 8006462:	a904      	add	r1, sp, #16
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f879 	bl	800655c <_printf_i>
 800646a:	e7e4      	b.n	8006436 <_vfiprintf_r+0x1ea>
 800646c:	08006d17 	.word	0x08006d17
 8006470:	08006d21 	.word	0x08006d21
 8006474:	00000000 	.word	0x00000000
 8006478:	08006227 	.word	0x08006227
 800647c:	08006d1d 	.word	0x08006d1d

08006480 <_printf_common>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	4616      	mov	r6, r2
 8006486:	4699      	mov	r9, r3
 8006488:	688a      	ldr	r2, [r1, #8]
 800648a:	690b      	ldr	r3, [r1, #16]
 800648c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006490:	4293      	cmp	r3, r2
 8006492:	bfb8      	it	lt
 8006494:	4613      	movlt	r3, r2
 8006496:	6033      	str	r3, [r6, #0]
 8006498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800649c:	4607      	mov	r7, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	b10a      	cbz	r2, 80064a6 <_printf_common+0x26>
 80064a2:	3301      	adds	r3, #1
 80064a4:	6033      	str	r3, [r6, #0]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	0699      	lsls	r1, r3, #26
 80064aa:	bf42      	ittt	mi
 80064ac:	6833      	ldrmi	r3, [r6, #0]
 80064ae:	3302      	addmi	r3, #2
 80064b0:	6033      	strmi	r3, [r6, #0]
 80064b2:	6825      	ldr	r5, [r4, #0]
 80064b4:	f015 0506 	ands.w	r5, r5, #6
 80064b8:	d106      	bne.n	80064c8 <_printf_common+0x48>
 80064ba:	f104 0a19 	add.w	sl, r4, #25
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	6832      	ldr	r2, [r6, #0]
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	42ab      	cmp	r3, r5
 80064c6:	dc26      	bgt.n	8006516 <_printf_common+0x96>
 80064c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064cc:	1e13      	subs	r3, r2, #0
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	bf18      	it	ne
 80064d2:	2301      	movne	r3, #1
 80064d4:	0692      	lsls	r2, r2, #26
 80064d6:	d42b      	bmi.n	8006530 <_printf_common+0xb0>
 80064d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064dc:	4649      	mov	r1, r9
 80064de:	4638      	mov	r0, r7
 80064e0:	47c0      	blx	r8
 80064e2:	3001      	adds	r0, #1
 80064e4:	d01e      	beq.n	8006524 <_printf_common+0xa4>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	6922      	ldr	r2, [r4, #16]
 80064ea:	f003 0306 	and.w	r3, r3, #6
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	bf02      	ittt	eq
 80064f2:	68e5      	ldreq	r5, [r4, #12]
 80064f4:	6833      	ldreq	r3, [r6, #0]
 80064f6:	1aed      	subeq	r5, r5, r3
 80064f8:	68a3      	ldr	r3, [r4, #8]
 80064fa:	bf0c      	ite	eq
 80064fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006500:	2500      	movne	r5, #0
 8006502:	4293      	cmp	r3, r2
 8006504:	bfc4      	itt	gt
 8006506:	1a9b      	subgt	r3, r3, r2
 8006508:	18ed      	addgt	r5, r5, r3
 800650a:	2600      	movs	r6, #0
 800650c:	341a      	adds	r4, #26
 800650e:	42b5      	cmp	r5, r6
 8006510:	d11a      	bne.n	8006548 <_printf_common+0xc8>
 8006512:	2000      	movs	r0, #0
 8006514:	e008      	b.n	8006528 <_printf_common+0xa8>
 8006516:	2301      	movs	r3, #1
 8006518:	4652      	mov	r2, sl
 800651a:	4649      	mov	r1, r9
 800651c:	4638      	mov	r0, r7
 800651e:	47c0      	blx	r8
 8006520:	3001      	adds	r0, #1
 8006522:	d103      	bne.n	800652c <_printf_common+0xac>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652c:	3501      	adds	r5, #1
 800652e:	e7c6      	b.n	80064be <_printf_common+0x3e>
 8006530:	18e1      	adds	r1, r4, r3
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	2030      	movs	r0, #48	; 0x30
 8006536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800653a:	4422      	add	r2, r4
 800653c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006544:	3302      	adds	r3, #2
 8006546:	e7c7      	b.n	80064d8 <_printf_common+0x58>
 8006548:	2301      	movs	r3, #1
 800654a:	4622      	mov	r2, r4
 800654c:	4649      	mov	r1, r9
 800654e:	4638      	mov	r0, r7
 8006550:	47c0      	blx	r8
 8006552:	3001      	adds	r0, #1
 8006554:	d0e6      	beq.n	8006524 <_printf_common+0xa4>
 8006556:	3601      	adds	r6, #1
 8006558:	e7d9      	b.n	800650e <_printf_common+0x8e>
	...

0800655c <_printf_i>:
 800655c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006560:	7e0f      	ldrb	r7, [r1, #24]
 8006562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006564:	2f78      	cmp	r7, #120	; 0x78
 8006566:	4691      	mov	r9, r2
 8006568:	4680      	mov	r8, r0
 800656a:	460c      	mov	r4, r1
 800656c:	469a      	mov	sl, r3
 800656e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006572:	d807      	bhi.n	8006584 <_printf_i+0x28>
 8006574:	2f62      	cmp	r7, #98	; 0x62
 8006576:	d80a      	bhi.n	800658e <_printf_i+0x32>
 8006578:	2f00      	cmp	r7, #0
 800657a:	f000 80d4 	beq.w	8006726 <_printf_i+0x1ca>
 800657e:	2f58      	cmp	r7, #88	; 0x58
 8006580:	f000 80c0 	beq.w	8006704 <_printf_i+0x1a8>
 8006584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800658c:	e03a      	b.n	8006604 <_printf_i+0xa8>
 800658e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006592:	2b15      	cmp	r3, #21
 8006594:	d8f6      	bhi.n	8006584 <_printf_i+0x28>
 8006596:	a101      	add	r1, pc, #4	; (adr r1, 800659c <_printf_i+0x40>)
 8006598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800659c:	080065f5 	.word	0x080065f5
 80065a0:	08006609 	.word	0x08006609
 80065a4:	08006585 	.word	0x08006585
 80065a8:	08006585 	.word	0x08006585
 80065ac:	08006585 	.word	0x08006585
 80065b0:	08006585 	.word	0x08006585
 80065b4:	08006609 	.word	0x08006609
 80065b8:	08006585 	.word	0x08006585
 80065bc:	08006585 	.word	0x08006585
 80065c0:	08006585 	.word	0x08006585
 80065c4:	08006585 	.word	0x08006585
 80065c8:	0800670d 	.word	0x0800670d
 80065cc:	08006635 	.word	0x08006635
 80065d0:	080066c7 	.word	0x080066c7
 80065d4:	08006585 	.word	0x08006585
 80065d8:	08006585 	.word	0x08006585
 80065dc:	0800672f 	.word	0x0800672f
 80065e0:	08006585 	.word	0x08006585
 80065e4:	08006635 	.word	0x08006635
 80065e8:	08006585 	.word	0x08006585
 80065ec:	08006585 	.word	0x08006585
 80065f0:	080066cf 	.word	0x080066cf
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	1d1a      	adds	r2, r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	602a      	str	r2, [r5, #0]
 80065fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006604:	2301      	movs	r3, #1
 8006606:	e09f      	b.n	8006748 <_printf_i+0x1ec>
 8006608:	6820      	ldr	r0, [r4, #0]
 800660a:	682b      	ldr	r3, [r5, #0]
 800660c:	0607      	lsls	r7, r0, #24
 800660e:	f103 0104 	add.w	r1, r3, #4
 8006612:	6029      	str	r1, [r5, #0]
 8006614:	d501      	bpl.n	800661a <_printf_i+0xbe>
 8006616:	681e      	ldr	r6, [r3, #0]
 8006618:	e003      	b.n	8006622 <_printf_i+0xc6>
 800661a:	0646      	lsls	r6, r0, #25
 800661c:	d5fb      	bpl.n	8006616 <_printf_i+0xba>
 800661e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006622:	2e00      	cmp	r6, #0
 8006624:	da03      	bge.n	800662e <_printf_i+0xd2>
 8006626:	232d      	movs	r3, #45	; 0x2d
 8006628:	4276      	negs	r6, r6
 800662a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800662e:	485a      	ldr	r0, [pc, #360]	; (8006798 <_printf_i+0x23c>)
 8006630:	230a      	movs	r3, #10
 8006632:	e012      	b.n	800665a <_printf_i+0xfe>
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	1d19      	adds	r1, r3, #4
 800663a:	6029      	str	r1, [r5, #0]
 800663c:	0605      	lsls	r5, r0, #24
 800663e:	d501      	bpl.n	8006644 <_printf_i+0xe8>
 8006640:	681e      	ldr	r6, [r3, #0]
 8006642:	e002      	b.n	800664a <_printf_i+0xee>
 8006644:	0641      	lsls	r1, r0, #25
 8006646:	d5fb      	bpl.n	8006640 <_printf_i+0xe4>
 8006648:	881e      	ldrh	r6, [r3, #0]
 800664a:	4853      	ldr	r0, [pc, #332]	; (8006798 <_printf_i+0x23c>)
 800664c:	2f6f      	cmp	r7, #111	; 0x6f
 800664e:	bf0c      	ite	eq
 8006650:	2308      	moveq	r3, #8
 8006652:	230a      	movne	r3, #10
 8006654:	2100      	movs	r1, #0
 8006656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800665a:	6865      	ldr	r5, [r4, #4]
 800665c:	60a5      	str	r5, [r4, #8]
 800665e:	2d00      	cmp	r5, #0
 8006660:	bfa2      	ittt	ge
 8006662:	6821      	ldrge	r1, [r4, #0]
 8006664:	f021 0104 	bicge.w	r1, r1, #4
 8006668:	6021      	strge	r1, [r4, #0]
 800666a:	b90e      	cbnz	r6, 8006670 <_printf_i+0x114>
 800666c:	2d00      	cmp	r5, #0
 800666e:	d04b      	beq.n	8006708 <_printf_i+0x1ac>
 8006670:	4615      	mov	r5, r2
 8006672:	fbb6 f1f3 	udiv	r1, r6, r3
 8006676:	fb03 6711 	mls	r7, r3, r1, r6
 800667a:	5dc7      	ldrb	r7, [r0, r7]
 800667c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006680:	4637      	mov	r7, r6
 8006682:	42bb      	cmp	r3, r7
 8006684:	460e      	mov	r6, r1
 8006686:	d9f4      	bls.n	8006672 <_printf_i+0x116>
 8006688:	2b08      	cmp	r3, #8
 800668a:	d10b      	bne.n	80066a4 <_printf_i+0x148>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	07de      	lsls	r6, r3, #31
 8006690:	d508      	bpl.n	80066a4 <_printf_i+0x148>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	6861      	ldr	r1, [r4, #4]
 8006696:	4299      	cmp	r1, r3
 8006698:	bfde      	ittt	le
 800669a:	2330      	movle	r3, #48	; 0x30
 800669c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066a4:	1b52      	subs	r2, r2, r5
 80066a6:	6122      	str	r2, [r4, #16]
 80066a8:	f8cd a000 	str.w	sl, [sp]
 80066ac:	464b      	mov	r3, r9
 80066ae:	aa03      	add	r2, sp, #12
 80066b0:	4621      	mov	r1, r4
 80066b2:	4640      	mov	r0, r8
 80066b4:	f7ff fee4 	bl	8006480 <_printf_common>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d14a      	bne.n	8006752 <_printf_i+0x1f6>
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	b004      	add	sp, #16
 80066c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f043 0320 	orr.w	r3, r3, #32
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	4833      	ldr	r0, [pc, #204]	; (800679c <_printf_i+0x240>)
 80066d0:	2778      	movs	r7, #120	; 0x78
 80066d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	6829      	ldr	r1, [r5, #0]
 80066da:	061f      	lsls	r7, r3, #24
 80066dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80066e0:	d402      	bmi.n	80066e8 <_printf_i+0x18c>
 80066e2:	065f      	lsls	r7, r3, #25
 80066e4:	bf48      	it	mi
 80066e6:	b2b6      	uxthmi	r6, r6
 80066e8:	07df      	lsls	r7, r3, #31
 80066ea:	bf48      	it	mi
 80066ec:	f043 0320 	orrmi.w	r3, r3, #32
 80066f0:	6029      	str	r1, [r5, #0]
 80066f2:	bf48      	it	mi
 80066f4:	6023      	strmi	r3, [r4, #0]
 80066f6:	b91e      	cbnz	r6, 8006700 <_printf_i+0x1a4>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	f023 0320 	bic.w	r3, r3, #32
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	2310      	movs	r3, #16
 8006702:	e7a7      	b.n	8006654 <_printf_i+0xf8>
 8006704:	4824      	ldr	r0, [pc, #144]	; (8006798 <_printf_i+0x23c>)
 8006706:	e7e4      	b.n	80066d2 <_printf_i+0x176>
 8006708:	4615      	mov	r5, r2
 800670a:	e7bd      	b.n	8006688 <_printf_i+0x12c>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	6826      	ldr	r6, [r4, #0]
 8006710:	6961      	ldr	r1, [r4, #20]
 8006712:	1d18      	adds	r0, r3, #4
 8006714:	6028      	str	r0, [r5, #0]
 8006716:	0635      	lsls	r5, r6, #24
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	d501      	bpl.n	8006720 <_printf_i+0x1c4>
 800671c:	6019      	str	r1, [r3, #0]
 800671e:	e002      	b.n	8006726 <_printf_i+0x1ca>
 8006720:	0670      	lsls	r0, r6, #25
 8006722:	d5fb      	bpl.n	800671c <_printf_i+0x1c0>
 8006724:	8019      	strh	r1, [r3, #0]
 8006726:	2300      	movs	r3, #0
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	4615      	mov	r5, r2
 800672c:	e7bc      	b.n	80066a8 <_printf_i+0x14c>
 800672e:	682b      	ldr	r3, [r5, #0]
 8006730:	1d1a      	adds	r2, r3, #4
 8006732:	602a      	str	r2, [r5, #0]
 8006734:	681d      	ldr	r5, [r3, #0]
 8006736:	6862      	ldr	r2, [r4, #4]
 8006738:	2100      	movs	r1, #0
 800673a:	4628      	mov	r0, r5
 800673c:	f7f9 fd48 	bl	80001d0 <memchr>
 8006740:	b108      	cbz	r0, 8006746 <_printf_i+0x1ea>
 8006742:	1b40      	subs	r0, r0, r5
 8006744:	6060      	str	r0, [r4, #4]
 8006746:	6863      	ldr	r3, [r4, #4]
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	2300      	movs	r3, #0
 800674c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006750:	e7aa      	b.n	80066a8 <_printf_i+0x14c>
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	462a      	mov	r2, r5
 8006756:	4649      	mov	r1, r9
 8006758:	4640      	mov	r0, r8
 800675a:	47d0      	blx	sl
 800675c:	3001      	adds	r0, #1
 800675e:	d0ad      	beq.n	80066bc <_printf_i+0x160>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	079b      	lsls	r3, r3, #30
 8006764:	d413      	bmi.n	800678e <_printf_i+0x232>
 8006766:	68e0      	ldr	r0, [r4, #12]
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	4298      	cmp	r0, r3
 800676c:	bfb8      	it	lt
 800676e:	4618      	movlt	r0, r3
 8006770:	e7a6      	b.n	80066c0 <_printf_i+0x164>
 8006772:	2301      	movs	r3, #1
 8006774:	4632      	mov	r2, r6
 8006776:	4649      	mov	r1, r9
 8006778:	4640      	mov	r0, r8
 800677a:	47d0      	blx	sl
 800677c:	3001      	adds	r0, #1
 800677e:	d09d      	beq.n	80066bc <_printf_i+0x160>
 8006780:	3501      	adds	r5, #1
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	9903      	ldr	r1, [sp, #12]
 8006786:	1a5b      	subs	r3, r3, r1
 8006788:	42ab      	cmp	r3, r5
 800678a:	dcf2      	bgt.n	8006772 <_printf_i+0x216>
 800678c:	e7eb      	b.n	8006766 <_printf_i+0x20a>
 800678e:	2500      	movs	r5, #0
 8006790:	f104 0619 	add.w	r6, r4, #25
 8006794:	e7f5      	b.n	8006782 <_printf_i+0x226>
 8006796:	bf00      	nop
 8006798:	08006d28 	.word	0x08006d28
 800679c:	08006d39 	.word	0x08006d39

080067a0 <__sflush_r>:
 80067a0:	898a      	ldrh	r2, [r1, #12]
 80067a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a6:	4605      	mov	r5, r0
 80067a8:	0710      	lsls	r0, r2, #28
 80067aa:	460c      	mov	r4, r1
 80067ac:	d458      	bmi.n	8006860 <__sflush_r+0xc0>
 80067ae:	684b      	ldr	r3, [r1, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dc05      	bgt.n	80067c0 <__sflush_r+0x20>
 80067b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dc02      	bgt.n	80067c0 <__sflush_r+0x20>
 80067ba:	2000      	movs	r0, #0
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c2:	2e00      	cmp	r6, #0
 80067c4:	d0f9      	beq.n	80067ba <__sflush_r+0x1a>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067cc:	682f      	ldr	r7, [r5, #0]
 80067ce:	6a21      	ldr	r1, [r4, #32]
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	d032      	beq.n	800683a <__sflush_r+0x9a>
 80067d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	075a      	lsls	r2, r3, #29
 80067da:	d505      	bpl.n	80067e8 <__sflush_r+0x48>
 80067dc:	6863      	ldr	r3, [r4, #4]
 80067de:	1ac0      	subs	r0, r0, r3
 80067e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067e2:	b10b      	cbz	r3, 80067e8 <__sflush_r+0x48>
 80067e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067e6:	1ac0      	subs	r0, r0, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	4602      	mov	r2, r0
 80067ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ee:	6a21      	ldr	r1, [r4, #32]
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b0      	blx	r6
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	d106      	bne.n	8006808 <__sflush_r+0x68>
 80067fa:	6829      	ldr	r1, [r5, #0]
 80067fc:	291d      	cmp	r1, #29
 80067fe:	d82b      	bhi.n	8006858 <__sflush_r+0xb8>
 8006800:	4a29      	ldr	r2, [pc, #164]	; (80068a8 <__sflush_r+0x108>)
 8006802:	410a      	asrs	r2, r1
 8006804:	07d6      	lsls	r6, r2, #31
 8006806:	d427      	bmi.n	8006858 <__sflush_r+0xb8>
 8006808:	2200      	movs	r2, #0
 800680a:	6062      	str	r2, [r4, #4]
 800680c:	04d9      	lsls	r1, r3, #19
 800680e:	6922      	ldr	r2, [r4, #16]
 8006810:	6022      	str	r2, [r4, #0]
 8006812:	d504      	bpl.n	800681e <__sflush_r+0x7e>
 8006814:	1c42      	adds	r2, r0, #1
 8006816:	d101      	bne.n	800681c <__sflush_r+0x7c>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b903      	cbnz	r3, 800681e <__sflush_r+0x7e>
 800681c:	6560      	str	r0, [r4, #84]	; 0x54
 800681e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006820:	602f      	str	r7, [r5, #0]
 8006822:	2900      	cmp	r1, #0
 8006824:	d0c9      	beq.n	80067ba <__sflush_r+0x1a>
 8006826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800682a:	4299      	cmp	r1, r3
 800682c:	d002      	beq.n	8006834 <__sflush_r+0x94>
 800682e:	4628      	mov	r0, r5
 8006830:	f7ff fbe2 	bl	8005ff8 <_free_r>
 8006834:	2000      	movs	r0, #0
 8006836:	6360      	str	r0, [r4, #52]	; 0x34
 8006838:	e7c0      	b.n	80067bc <__sflush_r+0x1c>
 800683a:	2301      	movs	r3, #1
 800683c:	4628      	mov	r0, r5
 800683e:	47b0      	blx	r6
 8006840:	1c41      	adds	r1, r0, #1
 8006842:	d1c8      	bne.n	80067d6 <__sflush_r+0x36>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0c5      	beq.n	80067d6 <__sflush_r+0x36>
 800684a:	2b1d      	cmp	r3, #29
 800684c:	d001      	beq.n	8006852 <__sflush_r+0xb2>
 800684e:	2b16      	cmp	r3, #22
 8006850:	d101      	bne.n	8006856 <__sflush_r+0xb6>
 8006852:	602f      	str	r7, [r5, #0]
 8006854:	e7b1      	b.n	80067ba <__sflush_r+0x1a>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	e7ad      	b.n	80067bc <__sflush_r+0x1c>
 8006860:	690f      	ldr	r7, [r1, #16]
 8006862:	2f00      	cmp	r7, #0
 8006864:	d0a9      	beq.n	80067ba <__sflush_r+0x1a>
 8006866:	0793      	lsls	r3, r2, #30
 8006868:	680e      	ldr	r6, [r1, #0]
 800686a:	bf08      	it	eq
 800686c:	694b      	ldreq	r3, [r1, #20]
 800686e:	600f      	str	r7, [r1, #0]
 8006870:	bf18      	it	ne
 8006872:	2300      	movne	r3, #0
 8006874:	eba6 0807 	sub.w	r8, r6, r7
 8006878:	608b      	str	r3, [r1, #8]
 800687a:	f1b8 0f00 	cmp.w	r8, #0
 800687e:	dd9c      	ble.n	80067ba <__sflush_r+0x1a>
 8006880:	6a21      	ldr	r1, [r4, #32]
 8006882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006884:	4643      	mov	r3, r8
 8006886:	463a      	mov	r2, r7
 8006888:	4628      	mov	r0, r5
 800688a:	47b0      	blx	r6
 800688c:	2800      	cmp	r0, #0
 800688e:	dc06      	bgt.n	800689e <__sflush_r+0xfe>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e78e      	b.n	80067bc <__sflush_r+0x1c>
 800689e:	4407      	add	r7, r0
 80068a0:	eba8 0800 	sub.w	r8, r8, r0
 80068a4:	e7e9      	b.n	800687a <__sflush_r+0xda>
 80068a6:	bf00      	nop
 80068a8:	dfbffffe 	.word	0xdfbffffe

080068ac <_fflush_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	690b      	ldr	r3, [r1, #16]
 80068b0:	4605      	mov	r5, r0
 80068b2:	460c      	mov	r4, r1
 80068b4:	b913      	cbnz	r3, 80068bc <_fflush_r+0x10>
 80068b6:	2500      	movs	r5, #0
 80068b8:	4628      	mov	r0, r5
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	b118      	cbz	r0, 80068c6 <_fflush_r+0x1a>
 80068be:	6a03      	ldr	r3, [r0, #32]
 80068c0:	b90b      	cbnz	r3, 80068c6 <_fflush_r+0x1a>
 80068c2:	f7ff fa75 	bl	8005db0 <__sinit>
 80068c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f3      	beq.n	80068b6 <_fflush_r+0xa>
 80068ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068d0:	07d0      	lsls	r0, r2, #31
 80068d2:	d404      	bmi.n	80068de <_fflush_r+0x32>
 80068d4:	0599      	lsls	r1, r3, #22
 80068d6:	d402      	bmi.n	80068de <_fflush_r+0x32>
 80068d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068da:	f7ff fb6d 	bl	8005fb8 <__retarget_lock_acquire_recursive>
 80068de:	4628      	mov	r0, r5
 80068e0:	4621      	mov	r1, r4
 80068e2:	f7ff ff5d 	bl	80067a0 <__sflush_r>
 80068e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068e8:	07da      	lsls	r2, r3, #31
 80068ea:	4605      	mov	r5, r0
 80068ec:	d4e4      	bmi.n	80068b8 <_fflush_r+0xc>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	059b      	lsls	r3, r3, #22
 80068f2:	d4e1      	bmi.n	80068b8 <_fflush_r+0xc>
 80068f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068f6:	f7ff fb60 	bl	8005fba <__retarget_lock_release_recursive>
 80068fa:	e7dd      	b.n	80068b8 <_fflush_r+0xc>

080068fc <fiprintf>:
 80068fc:	b40e      	push	{r1, r2, r3}
 80068fe:	b503      	push	{r0, r1, lr}
 8006900:	4601      	mov	r1, r0
 8006902:	ab03      	add	r3, sp, #12
 8006904:	4805      	ldr	r0, [pc, #20]	; (800691c <fiprintf+0x20>)
 8006906:	f853 2b04 	ldr.w	r2, [r3], #4
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	f7ff fc9d 	bl	800624c <_vfiprintf_r>
 8006912:	b002      	add	sp, #8
 8006914:	f85d eb04 	ldr.w	lr, [sp], #4
 8006918:	b003      	add	sp, #12
 800691a:	4770      	bx	lr
 800691c:	200000b8 	.word	0x200000b8

08006920 <__swbuf_r>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	460e      	mov	r6, r1
 8006924:	4614      	mov	r4, r2
 8006926:	4605      	mov	r5, r0
 8006928:	b118      	cbz	r0, 8006932 <__swbuf_r+0x12>
 800692a:	6a03      	ldr	r3, [r0, #32]
 800692c:	b90b      	cbnz	r3, 8006932 <__swbuf_r+0x12>
 800692e:	f7ff fa3f 	bl	8005db0 <__sinit>
 8006932:	69a3      	ldr	r3, [r4, #24]
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	071a      	lsls	r2, r3, #28
 800693a:	d525      	bpl.n	8006988 <__swbuf_r+0x68>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	b31b      	cbz	r3, 8006988 <__swbuf_r+0x68>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	6922      	ldr	r2, [r4, #16]
 8006944:	1a98      	subs	r0, r3, r2
 8006946:	6963      	ldr	r3, [r4, #20]
 8006948:	b2f6      	uxtb	r6, r6
 800694a:	4283      	cmp	r3, r0
 800694c:	4637      	mov	r7, r6
 800694e:	dc04      	bgt.n	800695a <__swbuf_r+0x3a>
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f7ff ffaa 	bl	80068ac <_fflush_r>
 8006958:	b9e0      	cbnz	r0, 8006994 <__swbuf_r+0x74>
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	3b01      	subs	r3, #1
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	6022      	str	r2, [r4, #0]
 8006966:	701e      	strb	r6, [r3, #0]
 8006968:	6962      	ldr	r2, [r4, #20]
 800696a:	1c43      	adds	r3, r0, #1
 800696c:	429a      	cmp	r2, r3
 800696e:	d004      	beq.n	800697a <__swbuf_r+0x5a>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	07db      	lsls	r3, r3, #31
 8006974:	d506      	bpl.n	8006984 <__swbuf_r+0x64>
 8006976:	2e0a      	cmp	r6, #10
 8006978:	d104      	bne.n	8006984 <__swbuf_r+0x64>
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f7ff ff95 	bl	80068ac <_fflush_r>
 8006982:	b938      	cbnz	r0, 8006994 <__swbuf_r+0x74>
 8006984:	4638      	mov	r0, r7
 8006986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006988:	4621      	mov	r1, r4
 800698a:	4628      	mov	r0, r5
 800698c:	f000 f806 	bl	800699c <__swsetup_r>
 8006990:	2800      	cmp	r0, #0
 8006992:	d0d5      	beq.n	8006940 <__swbuf_r+0x20>
 8006994:	f04f 37ff 	mov.w	r7, #4294967295
 8006998:	e7f4      	b.n	8006984 <__swbuf_r+0x64>
	...

0800699c <__swsetup_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <__swsetup_r+0xac>)
 80069a0:	4605      	mov	r5, r0
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	460c      	mov	r4, r1
 80069a6:	b118      	cbz	r0, 80069b0 <__swsetup_r+0x14>
 80069a8:	6a03      	ldr	r3, [r0, #32]
 80069aa:	b90b      	cbnz	r3, 80069b0 <__swsetup_r+0x14>
 80069ac:	f7ff fa00 	bl	8005db0 <__sinit>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069b6:	0718      	lsls	r0, r3, #28
 80069b8:	d422      	bmi.n	8006a00 <__swsetup_r+0x64>
 80069ba:	06d9      	lsls	r1, r3, #27
 80069bc:	d407      	bmi.n	80069ce <__swsetup_r+0x32>
 80069be:	2309      	movs	r3, #9
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	e034      	b.n	8006a38 <__swsetup_r+0x9c>
 80069ce:	0758      	lsls	r0, r3, #29
 80069d0:	d512      	bpl.n	80069f8 <__swsetup_r+0x5c>
 80069d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d4:	b141      	cbz	r1, 80069e8 <__swsetup_r+0x4c>
 80069d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069da:	4299      	cmp	r1, r3
 80069dc:	d002      	beq.n	80069e4 <__swsetup_r+0x48>
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff fb0a 	bl	8005ff8 <_free_r>
 80069e4:	2300      	movs	r3, #0
 80069e6:	6363      	str	r3, [r4, #52]	; 0x34
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	2300      	movs	r3, #0
 80069f2:	6063      	str	r3, [r4, #4]
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f043 0308 	orr.w	r3, r3, #8
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	b94b      	cbnz	r3, 8006a18 <__swsetup_r+0x7c>
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0e:	d003      	beq.n	8006a18 <__swsetup_r+0x7c>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f857 	bl	8006ac6 <__smakebuf_r>
 8006a18:	89a0      	ldrh	r0, [r4, #12]
 8006a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a1e:	f010 0301 	ands.w	r3, r0, #1
 8006a22:	d00a      	beq.n	8006a3a <__swsetup_r+0x9e>
 8006a24:	2300      	movs	r3, #0
 8006a26:	60a3      	str	r3, [r4, #8]
 8006a28:	6963      	ldr	r3, [r4, #20]
 8006a2a:	425b      	negs	r3, r3
 8006a2c:	61a3      	str	r3, [r4, #24]
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	b943      	cbnz	r3, 8006a44 <__swsetup_r+0xa8>
 8006a32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a36:	d1c4      	bne.n	80069c2 <__swsetup_r+0x26>
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	0781      	lsls	r1, r0, #30
 8006a3c:	bf58      	it	pl
 8006a3e:	6963      	ldrpl	r3, [r4, #20]
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	e7f4      	b.n	8006a2e <__swsetup_r+0x92>
 8006a44:	2000      	movs	r0, #0
 8006a46:	e7f7      	b.n	8006a38 <__swsetup_r+0x9c>
 8006a48:	200000b8 	.word	0x200000b8

08006a4c <_sbrk_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d06      	ldr	r5, [pc, #24]	; (8006a68 <_sbrk_r+0x1c>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	602b      	str	r3, [r5, #0]
 8006a58:	f7fa fa68 	bl	8000f2c <_sbrk>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_sbrk_r+0x1a>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_sbrk_r+0x1a>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	200005c4 	.word	0x200005c4

08006a6c <abort>:
 8006a6c:	b508      	push	{r3, lr}
 8006a6e:	2006      	movs	r0, #6
 8006a70:	f000 f88e 	bl	8006b90 <raise>
 8006a74:	2001      	movs	r0, #1
 8006a76:	f7fa f9e1 	bl	8000e3c <_exit>

08006a7a <__swhatbuf_r>:
 8006a7a:	b570      	push	{r4, r5, r6, lr}
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a82:	2900      	cmp	r1, #0
 8006a84:	b096      	sub	sp, #88	; 0x58
 8006a86:	4615      	mov	r5, r2
 8006a88:	461e      	mov	r6, r3
 8006a8a:	da0d      	bge.n	8006aa8 <__swhatbuf_r+0x2e>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	bf0c      	ite	eq
 8006a98:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a9c:	2340      	movne	r3, #64	; 0x40
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	6031      	str	r1, [r6, #0]
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	b016      	add	sp, #88	; 0x58
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	466a      	mov	r2, sp
 8006aaa:	f000 f879 	bl	8006ba0 <_fstat_r>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	dbec      	blt.n	8006a8c <__swhatbuf_r+0x12>
 8006ab2:	9901      	ldr	r1, [sp, #4]
 8006ab4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ab8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006abc:	4259      	negs	r1, r3
 8006abe:	4159      	adcs	r1, r3
 8006ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac4:	e7eb      	b.n	8006a9e <__swhatbuf_r+0x24>

08006ac6 <__smakebuf_r>:
 8006ac6:	898b      	ldrh	r3, [r1, #12]
 8006ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aca:	079d      	lsls	r5, r3, #30
 8006acc:	4606      	mov	r6, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	d507      	bpl.n	8006ae2 <__smakebuf_r+0x1c>
 8006ad2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	2301      	movs	r3, #1
 8006adc:	6163      	str	r3, [r4, #20]
 8006ade:	b002      	add	sp, #8
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
 8006ae2:	ab01      	add	r3, sp, #4
 8006ae4:	466a      	mov	r2, sp
 8006ae6:	f7ff ffc8 	bl	8006a7a <__swhatbuf_r>
 8006aea:	9900      	ldr	r1, [sp, #0]
 8006aec:	4605      	mov	r5, r0
 8006aee:	4630      	mov	r0, r6
 8006af0:	f7ff faf6 	bl	80060e0 <_malloc_r>
 8006af4:	b948      	cbnz	r0, 8006b0a <__smakebuf_r+0x44>
 8006af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afa:	059a      	lsls	r2, r3, #22
 8006afc:	d4ef      	bmi.n	8006ade <__smakebuf_r+0x18>
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	f043 0302 	orr.w	r3, r3, #2
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	e7e3      	b.n	8006ad2 <__smakebuf_r+0xc>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	6020      	str	r0, [r4, #0]
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	6163      	str	r3, [r4, #20]
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	6120      	str	r0, [r4, #16]
 8006b1c:	b15b      	cbz	r3, 8006b36 <__smakebuf_r+0x70>
 8006b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b22:	4630      	mov	r0, r6
 8006b24:	f000 f84e 	bl	8006bc4 <_isatty_r>
 8006b28:	b128      	cbz	r0, 8006b36 <__smakebuf_r+0x70>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	431d      	orrs	r5, r3
 8006b3a:	81a5      	strh	r5, [r4, #12]
 8006b3c:	e7cf      	b.n	8006ade <__smakebuf_r+0x18>

08006b3e <_raise_r>:
 8006b3e:	291f      	cmp	r1, #31
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4604      	mov	r4, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	d904      	bls.n	8006b52 <_raise_r+0x14>
 8006b48:	2316      	movs	r3, #22
 8006b4a:	6003      	str	r3, [r0, #0]
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006b54:	b112      	cbz	r2, 8006b5c <_raise_r+0x1e>
 8006b56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b5a:	b94b      	cbnz	r3, 8006b70 <_raise_r+0x32>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f853 	bl	8006c08 <_getpid_r>
 8006b62:	462a      	mov	r2, r5
 8006b64:	4601      	mov	r1, r0
 8006b66:	4620      	mov	r0, r4
 8006b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b6c:	f000 b83a 	b.w	8006be4 <_kill_r>
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d00a      	beq.n	8006b8a <_raise_r+0x4c>
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	d103      	bne.n	8006b80 <_raise_r+0x42>
 8006b78:	2316      	movs	r3, #22
 8006b7a:	6003      	str	r3, [r0, #0]
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	e7e7      	b.n	8006b50 <_raise_r+0x12>
 8006b80:	2400      	movs	r4, #0
 8006b82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b86:	4628      	mov	r0, r5
 8006b88:	4798      	blx	r3
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7e0      	b.n	8006b50 <_raise_r+0x12>
	...

08006b90 <raise>:
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <raise+0xc>)
 8006b92:	4601      	mov	r1, r0
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f7ff bfd2 	b.w	8006b3e <_raise_r>
 8006b9a:	bf00      	nop
 8006b9c:	200000b8 	.word	0x200000b8

08006ba0 <_fstat_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d07      	ldr	r5, [pc, #28]	; (8006bc0 <_fstat_r+0x20>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	f7fa f994 	bl	8000eda <_fstat>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d102      	bne.n	8006bbc <_fstat_r+0x1c>
 8006bb6:	682b      	ldr	r3, [r5, #0]
 8006bb8:	b103      	cbz	r3, 8006bbc <_fstat_r+0x1c>
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200005c4 	.word	0x200005c4

08006bc4 <_isatty_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d06      	ldr	r5, [pc, #24]	; (8006be0 <_isatty_r+0x1c>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	f7fa f993 	bl	8000efa <_isatty>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_isatty_r+0x1a>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_isatty_r+0x1a>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	200005c4 	.word	0x200005c4

08006be4 <_kill_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	; (8006c04 <_kill_r+0x20>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	f7fa f913 	bl	8000e1c <_kill>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d102      	bne.n	8006c00 <_kill_r+0x1c>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	b103      	cbz	r3, 8006c00 <_kill_r+0x1c>
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	bd38      	pop	{r3, r4, r5, pc}
 8006c02:	bf00      	nop
 8006c04:	200005c4 	.word	0x200005c4

08006c08 <_getpid_r>:
 8006c08:	f7fa b900 	b.w	8000e0c <_getpid>

08006c0c <_init>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr

08006c18 <_fini>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr
