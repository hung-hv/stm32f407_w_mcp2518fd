
stm32f407_FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab0  08006ab0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08006ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          0000050c  200000c0  200000c0  000200c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005cc  200005cc  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014d49  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028d0  00000000  00000000  00034e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001198  00000000  00000000  00037748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d93  00000000  00000000  000388e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c99  00000000  00000000  00039673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000135f5  00000000  00000000  0005c30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0469  00000000  00000000  0006f901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005328  00000000  00000000  0013fd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00145094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006850 	.word	0x08006850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08006850 	.word	0x08006850

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b57      	ldr	r3, [pc, #348]	; (80006e4 <MX_GPIO_Init+0x178>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a56      	ldr	r2, [pc, #344]	; (80006e4 <MX_GPIO_Init+0x178>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b54      	ldr	r3, [pc, #336]	; (80006e4 <MX_GPIO_Init+0x178>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b50      	ldr	r3, [pc, #320]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a4f      	ldr	r2, [pc, #316]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b49      	ldr	r3, [pc, #292]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a48      	ldr	r2, [pc, #288]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b46      	ldr	r3, [pc, #280]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a41      	ldr	r2, [pc, #260]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <MX_GPIO_Init+0x178>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <MX_GPIO_Init+0x178>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	21c0      	movs	r1, #192	; 0xc0
 8000612:	4835      	ldr	r0, [pc, #212]	; (80006e8 <MX_GPIO_Init+0x17c>)
 8000614:	f001 f8b6 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800061e:	4833      	ldr	r0, [pc, #204]	; (80006ec <MX_GPIO_Init+0x180>)
 8000620:	f001 f8b0 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000624:	2310      	movs	r3, #16
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000628:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	482d      	ldr	r0, [pc, #180]	; (80006f0 <MX_GPIO_Init+0x184>)
 800063a:	f000 ff07 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800063e:	2308      	movs	r3, #8
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000642:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4825      	ldr	r0, [pc, #148]	; (80006e8 <MX_GPIO_Init+0x17c>)
 8000654:	f000 fefa 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000658:	23c0      	movs	r3, #192	; 0xc0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <MX_GPIO_Init+0x17c>)
 8000670:	f000 feec 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <MX_GPIO_Init+0x180>)
 800068e:	f000 fedd 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000696:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <MX_GPIO_Init+0x180>)
 80006a8:	f000 fed0 	bl	800144c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2009      	movs	r0, #9
 80006b2:	f000 fe72 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006b6:	2009      	movs	r0, #9
 80006b8:	f000 fe8b 	bl	80013d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fe6a 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fe83 	bl	80013d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2017      	movs	r0, #23
 80006d2:	f000 fe62 	bl	800139a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006d6:	2017      	movs	r0, #23
 80006d8:	f000 fe7b 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40021000 	.word	0x40021000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fcde 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f84a 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ff34 	bl	800056c <MX_GPIO_Init>
  MX_TIM14_Init();
 8000704:	f000 fc4e 	bl	8000fa4 <MX_TIM14_Init>
  MX_SPI1_Init();
 8000708:	f000 f8be 	bl	8000888 <MX_SPI1_Init>
  MX_TIM7_Init();
 800070c:	f000 fc14 	bl	8000f38 <MX_TIM7_Init>
  MX_SPI2_Init();
 8000710:	f000 f8f0 	bl	80008f4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000714:	f000 f924 	bl	8000960 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000718:	4817      	ldr	r0, [pc, #92]	; (8000778 <main+0x84>)
 800071a:	f002 fc6f 	bl	8002ffc <HAL_TIM_Base_Start_IT>


//  HAL_SPI_Receive_IT(&hspi3, ptr_rx, 1);
//  HAL_SPI_Receive_IT(&hspi3, &RX_data, sizeof(RX_data));
//  HAL_SPI_Transmit(&hspi2, (uint8_t*)TX_Buffer, BUFFER_SIZE, 1000);
  HAL_SPI_Receive_IT(&hspi3, (uint8_t*)RX_Buffer, sizeof(RX_Buffer));
 800071e:	2264      	movs	r2, #100	; 0x64
 8000720:	4916      	ldr	r1, [pc, #88]	; (800077c <main+0x88>)
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <main+0x8c>)
 8000724:	f001 fed6 	bl	80024d4 <HAL_SPI_Receive_IT>


  CANFDSPI_Init();
 8000728:	f004 febe 	bl	80054a8 <CANFDSPI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
//	  HAL_Delay(100);
	  if (flag_send_frame == 1) {
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <main+0x90>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d1fb      	bne.n	800072c <main+0x38>
//		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//		  mcp2518fd_transpond();
		  RX_index=0;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_HIGH);
 800073a:	2201      	movs	r2, #1
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	4813      	ldr	r0, [pc, #76]	; (800078c <main+0x98>)
 8000740:	f001 f820 	bl	8001784 <HAL_GPIO_WritePin>
//		  mcp2518fd_transmit();
//		  mcp2518fd_transpond();
//		  mcp2518fd_receive();
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	4811      	ldr	r0, [pc, #68]	; (8000790 <main+0x9c>)
 800074c:	f001 f81a 	bl	8001784 <HAL_GPIO_WritePin>
		  mcp2518fd_transmit();
 8000750:	f004 ffe6 	bl	8005720 <mcp2518fd_transmit>
//			  	  TX_Buffer[i] = rand() & 0xf;
//		      }
//		  HAL_SPI_Transmit(&hspi2, (uint8_t*)TX_Buffer, sizeof(TX_Buffer), 1000);
//		  HAL_Delay(200);
//		  HAL_SPI_Receive_IT(&hspi3, RX_Buffer, sizeof(RX_Buffer));
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <main+0x9c>)
 800075c:	f001 f812 	bl	8001784 <HAL_GPIO_WritePin>
//		  HAL_SPI_Receive_IT(&hspi3, ptr_rx, 1);
//		  HAL_SPI_Receive_IT(&hspi3, &RX_data, sizeof(RX_data));
//		  HAL_SPI_Receive_IT(&hspi3, (uint8_t*)RX_Buffer, BUFFER_SIZE);
		  HAL_Delay(200);
 8000760:	20c8      	movs	r0, #200	; 0xc8
 8000762:	f000 fd1b 	bl	800119c <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_LOW);
 8000766:	2200      	movs	r2, #0
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <main+0x98>)
 800076c:	f001 f80a 	bl	8001784 <HAL_GPIO_WritePin>
		  flag_send_frame = 0;
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <main+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
	  if (flag_send_frame == 1) {
 8000776:	e7d9      	b.n	800072c <main+0x38>
 8000778:	200002b4 	.word	0x200002b4
 800077c:	200000dc 	.word	0x200000dc
 8000780:	200001f4 	.word	0x200001f4
 8000784:	20000000 	.word	0x20000000
 8000788:	20000140 	.word	0x20000140
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 f9b1 	bl	8005b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <SystemClock_Config+0xcc>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xd0>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000808:	23a8      	movs	r3, #168	; 0xa8
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f80b 	bl	8001834 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000824:	f000 f82a 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2105      	movs	r1, #5
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fa6c 	bl	8001d24 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000852:	f000 f813 	bl	800087c <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
//			  //do nothing
//		  }
//
//	  }
//  }
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_SPI1_Init+0x64>)
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_SPI1_Init+0x64>)
 8000894:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000898:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_SPI1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_SPI1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_SPI1_Init+0x64>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_SPI1_Init+0x64>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_SPI1_Init+0x64>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_SPI1_Init+0x64>)
 80008bc:	2218      	movs	r2, #24
 80008be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_SPI1_Init+0x64>)
 80008d4:	220a      	movs	r2, #10
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_SPI1_Init+0x64>)
 80008da:	f001 fbcf 	bl	800207c <HAL_SPI_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e4:	f7ff ffca 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000144 	.word	0x20000144
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI2_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <MX_SPI2_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI2_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI2_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI2_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI2_Init+0x64>)
 8000914:	2202      	movs	r2, #2
 8000916:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI2_Init+0x64>)
 800091a:	2201      	movs	r2, #1
 800091c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI2_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI2_Init+0x64>)
 8000928:	2208      	movs	r2, #8
 800092a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI2_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI2_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI2_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI2_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI2_Init+0x64>)
 8000946:	f001 fb99 	bl	800207c <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000950:	f7ff ff94 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000019c 	.word	0x2000019c
 800095c:	40003800 	.word	0x40003800

08000960 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_SPI3_Init+0x5c>)
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <MX_SPI3_Init+0x60>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI3_Init+0x5c>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_SPI3_Init+0x5c>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI3_Init+0x5c>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI3_Init+0x5c>)
 800097e:	2202      	movs	r2, #2
 8000980:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI3_Init+0x5c>)
 8000984:	2201      	movs	r2, #1
 8000986:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI3_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI3_Init+0x5c>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI3_Init+0x5c>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI3_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI3_Init+0x5c>)
 80009a2:	220a      	movs	r2, #10
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_SPI3_Init+0x5c>)
 80009a8:	f001 fb68 	bl	800207c <HAL_SPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 80009b2:	f7ff ff63 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001f4 	.word	0x200001f4
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a72      	ldr	r2, [pc, #456]	; (8000bac <HAL_SPI_MspInit+0x1e8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d152      	bne.n	8000a8c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a70      	ldr	r2, [pc, #448]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
 8000a06:	4b6a      	ldr	r3, [pc, #424]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a69      	ldr	r2, [pc, #420]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a62      	ldr	r2, [pc, #392]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a52:	4619      	mov	r1, r3
 8000a54:	4857      	ldr	r0, [pc, #348]	; (8000bb4 <HAL_SPI_MspInit+0x1f0>)
 8000a56:	f000 fcf9 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a5a:	2338      	movs	r3, #56	; 0x38
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	4850      	ldr	r0, [pc, #320]	; (8000bb8 <HAL_SPI_MspInit+0x1f4>)
 8000a76:	f000 fce9 	bl	800144c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2023      	movs	r0, #35	; 0x23
 8000a80:	f000 fc8b 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a84:	2023      	movs	r0, #35	; 0x23
 8000a86:	f000 fca4 	bl	80013d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a8a:	e08b      	b.n	8000ba4 <HAL_SPI_MspInit+0x1e0>
  else if(spiHandle->Instance==SPI2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <HAL_SPI_MspInit+0x1f8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12d      	bne.n	8000af2 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a3d      	ldr	r2, [pc, #244]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ace:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <HAL_SPI_MspInit+0x1f4>)
 8000aec:	f000 fcae 	bl	800144c <HAL_GPIO_Init>
}
 8000af0:	e058      	b.n	8000ba4 <HAL_SPI_MspInit+0x1e0>
  else if(spiHandle->Instance==SPI3)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a32      	ldr	r2, [pc, #200]	; (8000bc0 <HAL_SPI_MspInit+0x1fc>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d153      	bne.n	8000ba4 <HAL_SPI_MspInit+0x1e0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a2a      	ldr	r2, [pc, #168]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_SPI_MspInit+0x1ec>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b62:	2306      	movs	r3, #6
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <HAL_SPI_MspInit+0x1f0>)
 8000b6e:	f000 fc6d 	bl	800144c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b84:	2306      	movs	r3, #6
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <HAL_SPI_MspInit+0x200>)
 8000b90:	f000 fc5c 	bl	800144c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2033      	movs	r0, #51	; 0x33
 8000b9a:	f000 fbfe 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000b9e:	2033      	movs	r0, #51	; 0x33
 8000ba0:	f000 fc17 	bl	80013d2 <HAL_NVIC_EnableIRQ>
}
 8000ba4:	bf00      	nop
 8000ba6:	3740      	adds	r7, #64	; 0x40
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40003800 	.word	0x40003800
 8000bc0:	40003c00 	.word	0x40003c00
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 fa7a 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c70:	2008      	movs	r0, #8
 8000c72:	f000 fdbb 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ext3_cnt++;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <EXTI3_IRQHandler+0x20>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <EXTI3_IRQHandler+0x20>)
 8000c80:	801a      	strh	r2, [r3, #0]
  mcp2518fd_receive();
 8000c82:	f004 fdcf 	bl	8005824 <mcp2518fd_receive>

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000260 	.word	0x20000260

08000c90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c94:	2010      	movs	r0, #16
 8000c96:	f000 fda9 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <EXTI4_IRQHandler+0x28>)
 8000c9e:	f000 fd8a 	bl	80017b6 <HAL_GPIO_TogglePin>
  counter_btn++;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <EXTI4_IRQHandler+0x2c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <EXTI4_IRQHandler+0x2c>)
 8000caa:	6013      	str	r3, [r2, #0]
  flag_send_frame = 1;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <EXTI4_IRQHandler+0x30>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	20000258 	.word	0x20000258
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000cc8:	2080      	movs	r0, #128	; 0x80
 8000cca:	f000 fd8f 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ext5_cnt++;
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <EXTI9_5_IRQHandler+0x18>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a01      	ldr	r2, [pc, #4]	; (8000cdc <EXTI9_5_IRQHandler+0x18>)
 8000cd6:	6013      	str	r3, [r2, #0]
//  mcp2518fd_receive();

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000264 	.word	0x20000264

08000ce0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <SPI1_IRQHandler+0x18>)
 8000ce6:	f001 fd27 	bl	8002738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
 8000cea:	2264      	movs	r2, #100	; 0x64
 8000cec:	4903      	ldr	r1, [pc, #12]	; (8000cfc <SPI1_IRQHandler+0x1c>)
 8000cee:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <SPI1_IRQHandler+0x18>)
 8000cf0:	f001 fbf0 	bl	80024d4 <HAL_SPI_Receive_IT>

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000144 	.word	0x20000144
 8000cfc:	200000dc 	.word	0x200000dc

08000d00 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>)
 8000d06:	f002 f9e9 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
	if(counter_timer >= 100000) {
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	490f      	ldr	r1, [pc, #60]	; (8000d50 <TIM8_TRG_COM_TIM14_IRQHandler+0x50>)
 8000d12:	428a      	cmp	r2, r1
 8000d14:	f173 0300 	sbcs.w	r3, r3, #0
 8000d18:	d30b      	bcc.n	8000d32 <TIM8_TRG_COM_TIM14_IRQHandler+0x32>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <TIM8_TRG_COM_TIM14_IRQHandler+0x54>)
 8000d1e:	f000 fd4a 	bl	80017b6 <HAL_GPIO_TogglePin>
	  counter_timer = 0;
 8000d22:	490a      	ldr	r1, [pc, #40]	; (8000d4c <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e9c1 2300 	strd	r2, r3, [r1]
	else {
	  counter_timer++;
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d30:	e008      	b.n	8000d44 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>
	  counter_timer++;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	1c54      	adds	r4, r2, #1
 8000d3a:	f143 0500 	adc.w	r5, r3, #0
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000d40:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000d44:	bf00      	nop
 8000d46:	bdb0      	pop	{r4, r5, r7, pc}
 8000d48:	200002b4 	.word	0x200002b4
 8000d4c:	20000250 	.word	0x20000250
 8000d50:	000186a0 	.word	0x000186a0
 8000d54:	40020000 	.word	0x40020000

08000d58 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <SPI3_IRQHandler+0x24>)
 8000d5e:	f001 fceb 	bl	8002738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */
  spi3_cnt++;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <SPI3_IRQHandler+0x28>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SPI3_IRQHandler+0x28>)
 8000d6a:	6013      	str	r3, [r2, #0]
//  HAL_SPI_Receive_IT(&hspi3, &RX_data, sizeof(RX_data));
//  HAL_SPI_Receive_IT(&hspi3, &RX_data, 1);
  HAL_SPI_Receive_IT(&hspi3, (uint8_t*)RX_Buffer, sizeof(RX_Buffer));
 8000d6c:	2264      	movs	r2, #100	; 0x64
 8000d6e:	4905      	ldr	r1, [pc, #20]	; (8000d84 <SPI3_IRQHandler+0x2c>)
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <SPI3_IRQHandler+0x24>)
 8000d72:	f001 fbaf 	bl	80024d4 <HAL_SPI_Receive_IT>
//  HAL_SPI_Receive(&hspi3, RX_Buffer, sizeof(RX_Buffer), 1000);
//  RX_Buffer[RX_index] = *ptr_rx;
//  RX_index++;

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001f4 	.word	0x200001f4
 8000d80:	2000025c 	.word	0x2000025c
 8000d84:	200000dc 	.word	0x200000dc

08000d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_kill>:

int _kill(int pid, int sig)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da2:	f004 ff01 	bl	8005ba8 <__errno>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2216      	movs	r2, #22
 8000daa:	601a      	str	r2, [r3, #0]
  return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe7 	bl	8000d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dca:	e7fe      	b.n	8000dca <_exit+0x12>

08000dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
  }
  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e66:	605a      	str	r2, [r3, #4]
  return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_isatty>:

int _isatty(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f004 fe66 	bl	8005ba8 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	20000268 	.word	0x20000268
 8000f10:	200005d0 	.word	0x200005d0

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f68:	f001 fff9 	bl	8002f5e <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000f72:	f7ff fc83 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_TIM7_Init+0x64>)
 8000f84:	f002 fa7a 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000f8e:	f7ff fc75 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000026c 	.word	0x2000026c
 8000fa0:	40001400 	.word	0x40001400

08000fa4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <MX_TIM14_Init+0x40>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1-1;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 84-1;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000fbc:	2253      	movs	r2, #83	; 0x53
 8000fbe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_TIM14_Init+0x3c>)
 8000fce:	f001 ffc6 	bl	8002f5e <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000fd8:	f7ff fc50 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002b4 	.word	0x200002b4
 8000fe4:	40002000 	.word	0x40002000

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_TIM_Base_MspInit+0x70>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d10e      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_TIM_Base_MspInit+0x74>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_TIM_Base_MspInit+0x74>)
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_TIM_Base_MspInit+0x74>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001016:	e01a      	b.n	800104e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_TIM_Base_MspInit+0x78>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d115      	bne.n	800104e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_TIM_Base_MspInit+0x74>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_TIM_Base_MspInit+0x74>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_TIM_Base_MspInit+0x74>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	202d      	movs	r0, #45	; 0x2d
 8001044:	f000 f9a9 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001048:	202d      	movs	r0, #45	; 0x2d
 800104a:	f000 f9c2 	bl	80013d2 <HAL_NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001400 	.word	0x40001400
 800105c:	40023800 	.word	0x40023800
 8001060:	40002000 	.word	0x40002000

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108e:	f7ff ff41 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f004 fd8f 	bl	8005bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fb2d 	bl	80006f4 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80010a8:	08006ab8 	.word	0x08006ab8
  ldr r2, =_sbss
 80010ac:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80010b0:	200005cc 	.word	0x200005cc

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f94f 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fd6c 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f967 	bl	80013ee <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f92f 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000004 	.word	0x20000004
 8001154:	2000000c 	.word	0x2000000c
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c
 8001180:	200002fc 	.word	0x200002fc

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200002fc 	.word	0x200002fc

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00c      	b.n	800143e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2205      	movs	r2, #5
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e16b      	b.n	8001740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 815a 	bne.w	800173a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d005      	beq.n	800149e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	2b02      	cmp	r3, #2
 800149c:	d130      	bne.n	8001500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b03      	cmp	r3, #3
 800150a:	d017      	beq.n	800153c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80b4 	beq.w	800173a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b60      	ldr	r3, [pc, #384]	; (8001758 <HAL_GPIO_Init+0x30c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a5f      	ldr	r2, [pc, #380]	; (8001758 <HAL_GPIO_Init+0x30c>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b5d      	ldr	r3, [pc, #372]	; (8001758 <HAL_GPIO_Init+0x30c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ee:	4a5b      	ldr	r2, [pc, #364]	; (800175c <HAL_GPIO_Init+0x310>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_GPIO_Init+0x314>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d02b      	beq.n	8001672 <HAL_GPIO_Init+0x226>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a51      	ldr	r2, [pc, #324]	; (8001764 <HAL_GPIO_Init+0x318>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x222>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_GPIO_Init+0x31c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x21e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4f      	ldr	r2, [pc, #316]	; (800176c <HAL_GPIO_Init+0x320>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x216>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_GPIO_Init+0x328>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x212>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <HAL_GPIO_Init+0x32c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x20e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_GPIO_Init+0x330>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x20a>
 8001652:	2307      	movs	r3, #7
 8001654:	e00e      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001656:	2308      	movs	r3, #8
 8001658:	e00c      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800165a:	2306      	movs	r3, #6
 800165c:	e00a      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800165e:	2305      	movs	r3, #5
 8001660:	e008      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001662:	2304      	movs	r3, #4
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001666:	2303      	movs	r3, #3
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001672:	2300      	movs	r3, #0
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4093      	lsls	r3, r2
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001684:	4935      	ldr	r1, [pc, #212]	; (800175c <HAL_GPIO_Init+0x310>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_GPIO_Init+0x334>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a32      	ldr	r2, [pc, #200]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_GPIO_Init+0x334>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_GPIO_Init+0x334>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_GPIO_Init+0x334>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3301      	adds	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	f67f ae90 	bls.w	8001468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40013800 	.word	0x40013800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40021400 	.word	0x40021400
 8001778:	40021800 	.word	0x40021800
 800177c:	40021c00 	.word	0x40021c00
 8001780:	40013c00 	.word	0x40013c00

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017c8:	887a      	ldrh	r2, [r7, #2]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	041a      	lsls	r2, r3, #16
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	400b      	ands	r3, r1
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f806 	bl	800181c <HAL_GPIO_EXTI_Callback>
  }
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e267      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d075      	beq.n	800193e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b04      	cmp	r3, #4
 800185c:	d00c      	beq.n	8001878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001866:	2b08      	cmp	r3, #8
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b7e      	ldr	r3, [pc, #504]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05b      	beq.n	800193c <HAL_RCC_OscConfig+0x108>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d157      	bne.n	800193c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e242      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x74>
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6f      	ldr	r2, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6c      	ldr	r2, [pc, #432]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018cc:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a68      	ldr	r2, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b66      	ldr	r3, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fc4a 	bl	8001184 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fc46 	bl	8001184 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e207      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xc0>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fc36 	bl	8001184 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fc32 	bl	8001184 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1f3      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0xe8>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195e:	2b08      	cmp	r3, #8
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x152>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1c7      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_RCC_OscConfig+0x244>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fbeb 	bl	8001184 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fbe7 	bl	8001184 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1a8      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x244>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fbca 	bl	8001184 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff fbc6 	bl	8001184 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e187      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_RCC_OscConfig+0x248>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fbaa 	bl	8001184 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fba6 	bl	8001184 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e167      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x200>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_OscConfig+0x248>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fb93 	bl	8001184 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fb8f 	bl	8001184 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e150      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b88      	ldr	r3, [pc, #544]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7d      	ldr	r3, [pc, #500]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a7c      	ldr	r2, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b77      	ldr	r3, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a73      	ldr	r2, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fb4f 	bl	8001184 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff fb4b 	bl	8001184 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e10c      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2ea>
 8001b10:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a63      	ldr	r2, [pc, #396]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x324>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x30c>
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	4b5c      	ldr	r3, [pc, #368]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a5b      	ldr	r2, [pc, #364]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x324>
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a54      	ldr	r2, [pc, #336]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fb10 	bl	8001184 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff fb0c 	bl	8001184 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0cb      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x334>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fafa 	bl	8001184 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff faf6 	bl	8001184 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0b5      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a38      	ldr	r2, [pc, #224]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a1 	beq.w	8001d14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d05c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d141      	bne.n	8001c6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x478>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff faca 	bl	8001184 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff fac6 	bl	8001184 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e087      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	491b      	ldr	r1, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x478>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fa9f 	bl	8001184 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fa9b 	bl	8001184 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e05c      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x416>
 8001c68:	e054      	b.n	8001d14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_RCC_OscConfig+0x478>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa88 	bl	8001184 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fa84 	bl	8001184 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e045      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x444>
 8001c96:	e03d      	b.n	8001d14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e038      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RCC_OscConfig+0x4ec>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d028      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d121      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0cc      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d90c      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	494d      	ldr	r1, [pc, #308]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d044      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d119      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e067      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4934      	ldr	r1, [pc, #208]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7ff f9b6 	bl	8001184 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f9b2 	bl	8001184 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e04f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d20c      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e032      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4916      	ldr	r1, [pc, #88]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eaa:	f000 f821 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f916 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	080069b8 	.word	0x080069b8
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	20000008 	.word	0x20000008

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef4:	b090      	sub	sp, #64	; 0x40
 8001ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d00d      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x40>
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	f200 80a1 	bhi.w	800205c <HAL_RCC_GetSysClockFreq+0x16c>
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f22:	e09b      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f28:	e09b      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f2e:	e098      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d028      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	099b      	lsrs	r3, r3, #6
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	627a      	str	r2, [r7, #36]	; 0x24
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f5c:	fb03 f201 	mul.w	r2, r3, r1
 8001f60:	2300      	movs	r3, #0
 8001f62:	fb00 f303 	mul.w	r3, r0, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	4a43      	ldr	r2, [pc, #268]	; (8002078 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f70:	460a      	mov	r2, r1
 8001f72:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f76:	4413      	add	r3, r2
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	61fa      	str	r2, [r7, #28]
 8001f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f8a:	f7fe f971 	bl	8000270 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4613      	mov	r3, r2
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f96:	e053      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	617a      	str	r2, [r7, #20]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001faa:	f04f 0b00 	mov.w	fp, #0
 8001fae:	4652      	mov	r2, sl
 8001fb0:	465b      	mov	r3, fp
 8001fb2:	f04f 0000 	mov.w	r0, #0
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	0159      	lsls	r1, r3, #5
 8001fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc0:	0150      	lsls	r0, r2, #5
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8001fca:	eb63 090b 	sbc.w	r9, r3, fp
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8001fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	00eb      	lsls	r3, r5, #3
 8001ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff8:	00e2      	lsls	r2, r4, #3
 8001ffa:	4614      	mov	r4, r2
 8001ffc:	461d      	mov	r5, r3
 8001ffe:	eb14 030a 	adds.w	r3, r4, sl
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	eb45 030b 	adc.w	r3, r5, fp
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002016:	4629      	mov	r1, r5
 8002018:	028b      	lsls	r3, r1, #10
 800201a:	4621      	mov	r1, r4
 800201c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002020:	4621      	mov	r1, r4
 8002022:	028a      	lsls	r2, r1, #10
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	2200      	movs	r2, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	60fa      	str	r2, [r7, #12]
 8002030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002034:	f7fe f91c 	bl	8000270 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	3301      	adds	r3, #1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetSysClockFreq+0x184>)
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002064:	4618      	mov	r0, r3
 8002066:	3740      	adds	r7, #64	; 0x40
 8002068:	46bd      	mov	sp, r7
 800206a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	00f42400 	.word	0x00f42400
 8002078:	017d7840 	.word	0x017d7840

0800207c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07b      	b.n	8002186 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800209e:	d009      	beq.n	80020b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
 80020a6:	e005      	b.n	80020b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fc78 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	ea42 0103 	orr.w	r1, r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	f003 0104 	and.w	r1, r3, #4
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f003 0210 	and.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b08c      	sub	sp, #48	; 0x30
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800219c:	2301      	movs	r3, #1
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_SPI_TransmitReceive+0x26>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e18a      	b.n	80024ca <HAL_SPI_TransmitReceive+0x33c>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021bc:	f7fe ffe2 	bl	8001184 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d00f      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x70>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e4:	d107      	bne.n	80021f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <HAL_SPI_TransmitReceive+0x68>
 80021ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
 80021f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021fc:	e15b      	b.n	80024b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x82>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x82>
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d103      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002216:	e14e      	b.n	80024b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b04      	cmp	r3, #4
 8002222:	d003      	beq.n	800222c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d007      	beq.n	8002280 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002288:	d178      	bne.n	800237c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x10a>
 8002292:	8b7b      	ldrh	r3, [r7, #26]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d166      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022bc:	e053      	b.n	8002366 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d11b      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x176>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x176>
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d113      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	1c9a      	adds	r2, r3, #2
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d119      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x1b8>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d014      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	b292      	uxth	r2, r2
 8002328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	1c9a      	adds	r2, r3, #2
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002342:	2301      	movs	r3, #1
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002346:	f7fe ff1d 	bl	8001184 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002352:	429a      	cmp	r2, r3
 8002354:	d807      	bhi.n	8002366 <HAL_SPI_TransmitReceive+0x1d8>
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d003      	beq.n	8002366 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002364:	e0a7      	b.n	80024b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1a6      	bne.n	80022be <HAL_SPI_TransmitReceive+0x130>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1a1      	bne.n	80022be <HAL_SPI_TransmitReceive+0x130>
 800237a:	e07c      	b.n	8002476 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_TransmitReceive+0x1fc>
 8002384:	8b7b      	ldrh	r3, [r7, #26]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d16b      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b0:	e057      	b.n	8002462 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d11c      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x26c>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x26c>
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d114      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d119      	bne.n	800243c <HAL_SPI_TransmitReceive+0x2ae>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d014      	beq.n	800243c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002438:	2301      	movs	r3, #1
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800243c:	f7fe fea2 	bl	8001184 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002448:	429a      	cmp	r2, r3
 800244a:	d803      	bhi.n	8002454 <HAL_SPI_TransmitReceive+0x2c6>
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d102      	bne.n	800245a <HAL_SPI_TransmitReceive+0x2cc>
 8002454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002460:	e029      	b.n	80024b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1a2      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x224>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d19d      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fc7a 	bl	8002d74 <SPI_EndRxTxTransaction>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002492:	e010      	b.n	80024b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	e000      	b.n	80024b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3730      	adds	r7, #48	; 0x30
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d110      	bne.n	8002510 <HAL_SPI_Receive_IT+0x3c>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f6:	d10b      	bne.n	8002510 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2204      	movs	r2, #4
 80024fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f882 	bl	8002610 <HAL_SPI_TransmitReceive_IT>
 800250c:	4603      	mov	r3, r0
 800250e:	e076      	b.n	80025fe <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_SPI_Receive_IT+0x4a>
 800251a:	2302      	movs	r3, #2
 800251c:	e06f      	b.n	80025fe <HAL_SPI_Receive_IT+0x12a>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002536:	e05d      	b.n	80025f4 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Receive_IT+0x70>
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002548:	e054      	b.n	80025f4 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2204      	movs	r2, #4
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_SPI_Receive_IT+0x134>)
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
 8002590:	e002      	b.n	8002598 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a1d      	ldr	r2, [pc, #116]	; (800260c <HAL_SPI_Receive_IT+0x138>)
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a0:	d10f      	bne.n	80025c2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80025d0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d008      	beq.n	80025f2 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e000      	b.n	80025f4 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80025f2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	08002b51 	.word	0x08002b51
 800260c:	08002b07 	.word	0x08002b07

08002610 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_SPI_TransmitReceive_IT+0x20>
 800262c:	2302      	movs	r3, #2
 800262e:	e075      	b.n	800271c <HAL_SPI_TransmitReceive_IT+0x10c>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800263e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002646:	7dbb      	ldrb	r3, [r7, #22]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d00d      	beq.n	8002668 <HAL_SPI_TransmitReceive_IT+0x58>
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002652:	d106      	bne.n	8002662 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_SPI_TransmitReceive_IT+0x52>
 800265c:	7dbb      	ldrb	r3, [r7, #22]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d002      	beq.n	8002668 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002666:	e054      	b.n	8002712 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_SPI_TransmitReceive_IT+0x6a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800267e:	e048      	b.n	8002712 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b04      	cmp	r3, #4
 800268a:	d003      	beq.n	8002694 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2205      	movs	r2, #5
 8002690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_SPI_TransmitReceive_IT+0x118>)
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
 80026d2:	e005      	b.n	80026e0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_SPI_TransmitReceive_IT+0x120>)
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <HAL_SPI_TransmitReceive_IT+0x124>)
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80026ee:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d008      	beq.n	8002710 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e000      	b.n	8002712 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002710:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
}
 800271c:	4618      	mov	r0, r3
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	08002a49 	.word	0x08002a49
 800272c:	08002aa9 	.word	0x08002aa9
 8002730:	08002985 	.word	0x08002985
 8002734:	080029e9 	.word	0x080029e9

08002738 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10e      	bne.n	8002778 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    return;
 8002776:	e0ce      	b.n	8002916 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_SPI_IRQHandler+0x5e>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
    return;
 8002794:	e0bf      	b.n	8002916 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_SPI_IRQHandler+0x7e>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80b0 	beq.w	8002916 <HAL_SPI_IRQHandler+0x1de>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80aa 	beq.w	8002916 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d011      	beq.n	80027fc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	e00b      	b.n	8002814 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
        return;
 8002812:	e080      	b.n	8002916 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d014      	beq.n	8002848 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	2b00      	cmp	r3, #0
 8002872:	d04f      	beq.n	8002914 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002882:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_SPI_IRQHandler+0x168>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d034      	beq.n	800290a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0203 	bic.w	r2, r2, #3
 80028ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d011      	beq.n	80028dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <HAL_SPI_IRQHandler+0x1e4>)
 80028be:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fd9e 	bl	8001406 <HAL_DMA_Abort_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d016      	beq.n	8002912 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <HAL_SPI_IRQHandler+0x1e4>)
 80028ea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fd88 	bl	8001406 <HAL_DMA_Abort_IT>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002908:	e003      	b.n	8002912 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f81c 	bl	8002948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002910:	e000      	b.n	8002914 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002912:	bf00      	nop
    return;
 8002914:	bf00      	nop
  }
}
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	0800295d 	.word	0x0800295d

08002920 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ffe6 	bl	8002948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f103 020c 	add.w	r2, r3, #12
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10f      	bne.n	80029e0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa0c 	bl	8002df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10f      	bne.n	8002a40 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9dc 	bl	8002df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	1c9a      	adds	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a8e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9ac 	bl	8002df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aec:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f97d 	bl	8002df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f103 020c 	add.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f9cc 	bl	8002ee0 <SPI_CloseRx_ISR>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	b292      	uxth	r2, r2
 8002b64:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f9a9 	bl	8002ee0 <SPI_CloseRx_ISR>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ba8:	f7fe faec 	bl	8001184 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bb8:	f7fe fae4 	bl	8001184 <HAL_GetTick>
 8002bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	015b      	lsls	r3, r3, #5
 8002bc4:	0d1b      	lsrs	r3, r3, #20
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bce:	e054      	b.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d050      	beq.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bd8:	f7fe fad4 	bl	8001184 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d902      	bls.n	8002bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d13d      	bne.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c06:	d111      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d004      	beq.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d107      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c34:	d10f      	bne.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e017      	b.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d19b      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cbc:	d111      	bne.n	8002ce2 <SPI_EndRxTransaction+0x3a>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc6:	d004      	beq.n	8002cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd0:	d107      	bne.n	8002ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cea:	d12a      	bne.n	8002d42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d012      	beq.n	8002d1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff ff49 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02d      	beq.n	8002d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e026      	b.n	8002d6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2101      	movs	r1, #1
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff36 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e013      	b.n	8002d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff ff23 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e000      	b.n	8002d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <SPI_EndRxTxTransaction+0x7c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <SPI_EndRxTxTransaction+0x80>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0d5b      	lsrs	r3, r3, #21
 8002d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9e:	d112      	bne.n	8002dc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff fef4 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e00f      	b.n	8002de6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d0f2      	beq.n	8002dc6 <SPI_EndRxTxTransaction+0x52>
 8002de0:	e000      	b.n	8002de4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002de2:	bf00      	nop
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000004 	.word	0x20000004
 8002df4:	165e9f81 	.word	0x165e9f81

08002df8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002e00:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <SPI_CloseRxTx_ISR+0xe0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a35      	ldr	r2, [pc, #212]	; (8002edc <SPI_CloseRxTx_ISR+0xe4>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0a5b      	lsrs	r3, r3, #9
 8002e0c:	2264      	movs	r2, #100	; 0x64
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e14:	f7fe f9b6 	bl	8001184 <HAL_GetTick>
 8002e18:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0220 	bic.w	r2, r2, #32
 8002e28:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e3c:	e009      	b.n	8002e52 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0eb      	beq.n	8002e2a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	2164      	movs	r1, #100	; 0x64
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ff8c 	bl	8002d74 <SPI_EndRxTxTransaction>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d115      	bne.n	8002ec0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d107      	bne.n	8002eb0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fd39 	bl	8002920 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002eae:	e00e      	b.n	8002ece <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fd3b 	bl	8002934 <HAL_SPI_TxRxCpltCallback>
}
 8002ebe:	e006      	b.n	8002ece <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fd3d 	bl	8002948 <HAL_SPI_ErrorCallback>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	057619f1 	.word	0x057619f1

08002ee0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002ef8:	f7fe f944 	bl	8001184 <HAL_GetTick>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	2164      	movs	r1, #100	; 0x64
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fed0 	bl	8002ca8 <SPI_EndRxTransaction>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fce9 	bl	8002920 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f4e:	e002      	b.n	8002f56 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fcf9 	bl	8002948 <HAL_SPI_ErrorCallback>
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e041      	b.n	8002ff4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe f82f 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f000 f9cd 	bl	800333c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d001      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04e      	b.n	80030b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d01d      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <HAL_TIM_Base_Start_IT+0xd0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d010      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	e007      	b.n	80030b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40010400 	.word	0x40010400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40001800 	.word	0x40001800

080030dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0202 	mvn.w	r2, #2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8ee 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8e0 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8f1 	bl	8003314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0204 	mvn.w	r2, #4
 800315c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8c4 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8b6 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8c7 	bl	8003314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0208 	mvn.w	r2, #8
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f89a 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f88c 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f89d 	bl	8003314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f870 	bl	8003300 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f862 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f873 	bl	8003314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fb04 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f97e 	bl	8003588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f838 	bl	8003328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0220 	mvn.w	r2, #32
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f948 	bl	8003574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a40      	ldr	r2, [pc, #256]	; (8003450 <TIM_Base_SetConfig+0x114>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d00f      	beq.n	800337c <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <TIM_Base_SetConfig+0x118>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00b      	beq.n	800337c <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3c      	ldr	r2, [pc, #240]	; (8003458 <TIM_Base_SetConfig+0x11c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3b      	ldr	r2, [pc, #236]	; (800345c <TIM_Base_SetConfig+0x120>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <TIM_Base_SetConfig+0x124>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <TIM_Base_SetConfig+0x114>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d02b      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d027      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <TIM_Base_SetConfig+0x118>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d023      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2b      	ldr	r2, [pc, #172]	; (8003458 <TIM_Base_SetConfig+0x11c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01f      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2a      	ldr	r2, [pc, #168]	; (800345c <TIM_Base_SetConfig+0x120>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01b      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a29      	ldr	r2, [pc, #164]	; (8003460 <TIM_Base_SetConfig+0x124>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d017      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a28      	ldr	r2, [pc, #160]	; (8003464 <TIM_Base_SetConfig+0x128>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a27      	ldr	r2, [pc, #156]	; (8003468 <TIM_Base_SetConfig+0x12c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00f      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a26      	ldr	r2, [pc, #152]	; (800346c <TIM_Base_SetConfig+0x130>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a25      	ldr	r2, [pc, #148]	; (8003470 <TIM_Base_SetConfig+0x134>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a24      	ldr	r2, [pc, #144]	; (8003474 <TIM_Base_SetConfig+0x138>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a23      	ldr	r2, [pc, #140]	; (8003478 <TIM_Base_SetConfig+0x13c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <TIM_Base_SetConfig+0x114>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0xf8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <TIM_Base_SetConfig+0x124>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d103      	bne.n	800343c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	615a      	str	r2, [r3, #20]
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40010400 	.word	0x40010400
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	40001800 	.word	0x40001800
 8003474:	40001c00 	.word	0x40001c00
 8003478:	40002000 	.word	0x40002000

0800347c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003490:	2302      	movs	r3, #2
 8003492:	e05a      	b.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d01d      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a17      	ldr	r2, [pc, #92]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10c      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40001800 	.word	0x40001800

08003574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 80035a6:	2302      	movs	r3, #2
 80035a8:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <DRV_CANFDSPI_Reset+0x3c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <DRV_CANFDSPI_Reset+0x3c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	705a      	strb	r2, [r3, #1]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	79f8      	ldrb	r0, [r7, #7]
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <DRV_CANFDSPI_Reset+0x40>)
 80035c0:	4905      	ldr	r1, [pc, #20]	; (80035d8 <DRV_CANFDSPI_Reset+0x3c>)
 80035c2:	f002 f875 	bl	80056b0 <DRV_SPI_TransferData>
 80035c6:	4603      	mov	r3, r0
 80035c8:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80035ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000300 	.word	0x20000300
 80035dc:	20000364 	.word	0x20000364

080035e0 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	603a      	str	r2, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	460b      	mov	r3, r1
 80035ee:	80bb      	strh	r3, [r7, #4]
    uint16_t spiTransferSize = 3;
 80035f0:	2303      	movs	r3, #3
 80035f2:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80035f8:	88bb      	ldrh	r3, [r7, #4]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3330      	adds	r3, #48	; 0x30
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <DRV_CANFDSPI_ReadByte+0x60>)
 800360c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800360e:	88bb      	ldrh	r3, [r7, #4]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <DRV_CANFDSPI_ReadByte+0x60>)
 8003614:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = 0;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <DRV_CANFDSPI_ReadByte+0x60>)
 8003618:	2200      	movs	r2, #0
 800361a:	709a      	strb	r2, [r3, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 800361c:	89fb      	ldrh	r3, [r7, #14]
 800361e:	79f8      	ldrb	r0, [r7, #7]
 8003620:	4a08      	ldr	r2, [pc, #32]	; (8003644 <DRV_CANFDSPI_ReadByte+0x64>)
 8003622:	4907      	ldr	r1, [pc, #28]	; (8003640 <DRV_CANFDSPI_ReadByte+0x60>)
 8003624:	f002 f844 	bl	80056b0 <DRV_SPI_TransferData>
 8003628:	4603      	mov	r3, r0
 800362a:	737b      	strb	r3, [r7, #13]

    // Update data
    *rxd = spiReceiveBuffer[2];
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <DRV_CANFDSPI_ReadByte+0x64>)
 800362e:	789a      	ldrb	r2, [r3, #2]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003634:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000300 	.word	0x20000300
 8003644:	20000364 	.word	0x20000364

08003648 <DRV_CANFDSPI_WriteByte>:

    return spiTransferError_ReadByte;
}

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
 8003652:	460b      	mov	r3, r1
 8003654:	80bb      	strh	r3, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	71bb      	strb	r3, [r7, #6]
    uint16_t spiTransferSize = 3;
 800365a:	2303      	movs	r3, #3
 800365c:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8003662:	88bb      	ldrh	r3, [r7, #4]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	b29b      	uxth	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3320      	adds	r3, #32
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003676:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003678:	88bb      	ldrh	r3, [r7, #4]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <DRV_CANFDSPI_WriteByte+0x5c>)
 800367e:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = txd;
 8003680:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003682:	79bb      	ldrb	r3, [r7, #6]
 8003684:	7093      	strb	r3, [r2, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	79f8      	ldrb	r0, [r7, #7]
 800368a:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <DRV_CANFDSPI_WriteByte+0x60>)
 800368c:	4905      	ldr	r1, [pc, #20]	; (80036a4 <DRV_CANFDSPI_WriteByte+0x5c>)
 800368e:	f002 f80f 	bl	80056b0 <DRV_SPI_TransferData>
 8003692:	4603      	mov	r3, r0
 8003694:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8003696:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000300 	.word	0x20000300
 80036a8:	20000364 	.word	0x20000364

080036ac <DRV_CANFDSPI_WriteWord>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	603a      	str	r2, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	460b      	mov	r3, r1
 80036ba:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 80036bc:	2306      	movs	r3, #6
 80036be:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	72fb      	strb	r3, [r7, #11]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80036c4:	88bb      	ldrh	r3, [r7, #4]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3320      	adds	r3, #32
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <DRV_CANFDSPI_WriteWord+0x78>)
 80036d8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80036da:	88bb      	ldrh	r3, [r7, #4]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <DRV_CANFDSPI_WriteWord+0x78>)
 80036e0:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e00b      	b.n	8003700 <DRV_CANFDSPI_WriteWord+0x54>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	40da      	lsrs	r2, r3
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	3302      	adds	r3, #2
 80036f4:	b2d1      	uxtb	r1, r2
 80036f6:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <DRV_CANFDSPI_WriteWord+0x78>)
 80036f8:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	3301      	adds	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d9f0      	bls.n	80036e8 <DRV_CANFDSPI_WriteWord+0x3c>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003706:	89bb      	ldrh	r3, [r7, #12]
 8003708:	79f8      	ldrb	r0, [r7, #7]
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <DRV_CANFDSPI_WriteWord+0x7c>)
 800370c:	4905      	ldr	r1, [pc, #20]	; (8003724 <DRV_CANFDSPI_WriteWord+0x78>)
 800370e:	f001 ffcf 	bl	80056b0 <DRV_SPI_TransferData>
 8003712:	4603      	mov	r3, r0
 8003714:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8003716:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000300 	.word	0x20000300
 8003728:	20000364 	.word	0x20000364

0800372c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60ba      	str	r2, [r7, #8]
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	460b      	mov	r3, r1
 800373c:	81bb      	strh	r3, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	3302      	adds	r3, #2
 8003746:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800374c:	89bb      	ldrh	r3, [r7, #12]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	b29b      	uxth	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3330      	adds	r3, #48	; 0x30
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 8003760:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003762:	89bb      	ldrh	r3, [r7, #12]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 8003768:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800376a:	2302      	movs	r3, #2
 800376c:	82fb      	strh	r3, [r7, #22]
 800376e:	e006      	b.n	800377e <DRV_CANFDSPI_ReadByteArray+0x52>
        spiTransmitBuffer[i] = 0;
 8003770:	8afb      	ldrh	r3, [r7, #22]
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 8003774:	2100      	movs	r1, #0
 8003776:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003778:	8afb      	ldrh	r3, [r7, #22]
 800377a:	3301      	adds	r3, #1
 800377c:	82fb      	strh	r3, [r7, #22]
 800377e:	8afa      	ldrh	r2, [r7, #22]
 8003780:	8abb      	ldrh	r3, [r7, #20]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3f4      	bcc.n	8003770 <DRV_CANFDSPI_ReadByteArray+0x44>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003786:	8abb      	ldrh	r3, [r7, #20]
 8003788:	7bf8      	ldrb	r0, [r7, #15]
 800378a:	4a10      	ldr	r2, [pc, #64]	; (80037cc <DRV_CANFDSPI_ReadByteArray+0xa0>)
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <DRV_CANFDSPI_ReadByteArray+0x9c>)
 800378e:	f001 ff8f 	bl	80056b0 <DRV_SPI_TransferData>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]

    // Update data
    for (i = 0; i < nBytes; i++) {
 8003796:	2300      	movs	r3, #0
 8003798:	82fb      	strh	r3, [r7, #22]
 800379a:	e00a      	b.n	80037b2 <DRV_CANFDSPI_ReadByteArray+0x86>
        rxd[i] = spiReceiveBuffer[i + 2];
 800379c:	8afb      	ldrh	r3, [r7, #22]
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	8afb      	ldrh	r3, [r7, #22]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	440b      	add	r3, r1
 80037a6:	4909      	ldr	r1, [pc, #36]	; (80037cc <DRV_CANFDSPI_ReadByteArray+0xa0>)
 80037a8:	5c8a      	ldrb	r2, [r1, r2]
 80037aa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 80037ac:	8afb      	ldrh	r3, [r7, #22]
 80037ae:	3301      	adds	r3, #1
 80037b0:	82fb      	strh	r3, [r7, #22]
 80037b2:	8afa      	ldrh	r2, [r7, #22]
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3f0      	bcc.n	800379c <DRV_CANFDSPI_ReadByteArray+0x70>
    }

    return spiTransferError;
 80037ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000300 	.word	0x20000300
 80037cc:	20000364 	.word	0x20000364

080037d0 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60ba      	str	r2, [r7, #8]
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	460b      	mov	r3, r1
 80037e0:	81bb      	strh	r3, [r7, #12]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	3302      	adds	r3, #2
 80037ea:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80037f0:	89bb      	ldrh	r3, [r7, #12]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3320      	adds	r3, #32
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8003804:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003806:	89bb      	ldrh	r3, [r7, #12]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <DRV_CANFDSPI_WriteByteArray+0x80>)
 800380c:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 2; i < spiTransferSize; i++) {
 800380e:	2302      	movs	r3, #2
 8003810:	82fb      	strh	r3, [r7, #22]
 8003812:	e00a      	b.n	800382a <DRV_CANFDSPI_WriteByteArray+0x5a>
        spiTransmitBuffer[i] = txd[i - 2];
 8003814:	8afb      	ldrh	r3, [r7, #22]
 8003816:	3b02      	subs	r3, #2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	441a      	add	r2, r3
 800381c:	8afb      	ldrh	r3, [r7, #22]
 800381e:	7811      	ldrb	r1, [r2, #0]
 8003820:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8003822:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003824:	8afb      	ldrh	r3, [r7, #22]
 8003826:	3301      	adds	r3, #1
 8003828:	82fb      	strh	r3, [r7, #22]
 800382a:	8afa      	ldrh	r2, [r7, #22]
 800382c:	8abb      	ldrh	r3, [r7, #20]
 800382e:	429a      	cmp	r2, r3
 8003830:	d3f0      	bcc.n	8003814 <DRV_CANFDSPI_WriteByteArray+0x44>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003832:	8abb      	ldrh	r3, [r7, #20]
 8003834:	7bf8      	ldrb	r0, [r7, #15]
 8003836:	4a07      	ldr	r2, [pc, #28]	; (8003854 <DRV_CANFDSPI_WriteByteArray+0x84>)
 8003838:	4905      	ldr	r1, [pc, #20]	; (8003850 <DRV_CANFDSPI_WriteByteArray+0x80>)
 800383a:	f001 ff39 	bl	80056b0 <DRV_SPI_TransferData>
 800383e:	4603      	mov	r3, r0
 8003840:	74fb      	strb	r3, [r7, #19]

    return spiTransferError;
 8003842:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000300 	.word	0x20000300
 8003854:	20000364 	.word	0x20000364

08003858 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	60ba      	str	r2, [r7, #8]
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	460b      	mov	r3, r1
 8003868:	81bb      	strh	r3, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	b29b      	uxth	r3, r3
 8003874:	3302      	adds	r3, #2
 8003876:	833b      	strh	r3, [r7, #24]
    int8_t spiTransferError = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	75fb      	strb	r3, [r7, #23]

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 800387c:	89bb      	ldrh	r3, [r7, #12]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	b29b      	uxth	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3330      	adds	r3, #48	; 0x30
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8003890:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8003898:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800389a:	2302      	movs	r3, #2
 800389c:	83fb      	strh	r3, [r7, #30]
 800389e:	e006      	b.n	80038ae <DRV_CANFDSPI_ReadWordArray+0x56>
        spiTransmitBuffer[i] = 0;
 80038a0:	8bfb      	ldrh	r3, [r7, #30]
 80038a2:	4a23      	ldr	r2, [pc, #140]	; (8003930 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 80038a4:	2100      	movs	r1, #0
 80038a6:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80038a8:	8bfb      	ldrh	r3, [r7, #30]
 80038aa:	3301      	adds	r3, #1
 80038ac:	83fb      	strh	r3, [r7, #30]
 80038ae:	8bfa      	ldrh	r2, [r7, #30]
 80038b0:	8b3b      	ldrh	r3, [r7, #24]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3f4      	bcc.n	80038a0 <DRV_CANFDSPI_ReadWordArray+0x48>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80038b6:	8b3b      	ldrh	r3, [r7, #24]
 80038b8:	7bf8      	ldrb	r0, [r7, #15]
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <DRV_CANFDSPI_ReadWordArray+0xdc>)
 80038bc:	491c      	ldr	r1, [pc, #112]	; (8003930 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 80038be:	f001 fef7 	bl	80056b0 <DRV_SPI_TransferData>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80038c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <DRV_CANFDSPI_ReadWordArray+0x7c>
        return spiTransferError;
 80038ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038d2:	e029      	b.n	8003928 <DRV_CANFDSPI_ReadWordArray+0xd0>
    }

    // Convert Byte array to Word array
    n = 2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 80038d8:	2300      	movs	r3, #0
 80038da:	83fb      	strh	r3, [r7, #30]
 80038dc:	e01e      	b.n	800391c <DRV_CANFDSPI_ReadWordArray+0xc4>
        w.word = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 80038e2:	2300      	movs	r3, #0
 80038e4:	83bb      	strh	r3, [r7, #28]
 80038e6:	e00d      	b.n	8003904 <DRV_CANFDSPI_ReadWordArray+0xac>
            w.byte[j] = spiReceiveBuffer[n];
 80038e8:	8b7a      	ldrh	r2, [r7, #26]
 80038ea:	8bbb      	ldrh	r3, [r7, #28]
 80038ec:	4911      	ldr	r1, [pc, #68]	; (8003934 <DRV_CANFDSPI_ReadWordArray+0xdc>)
 80038ee:	5c8a      	ldrb	r2, [r1, r2]
 80038f0:	3320      	adds	r3, #32
 80038f2:	443b      	add	r3, r7
 80038f4:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 80038f8:	8bbb      	ldrh	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	83bb      	strh	r3, [r7, #28]
 80038fe:	8b7b      	ldrh	r3, [r7, #26]
 8003900:	3301      	adds	r3, #1
 8003902:	837b      	strh	r3, [r7, #26]
 8003904:	8bbb      	ldrh	r3, [r7, #28]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d9ee      	bls.n	80038e8 <DRV_CANFDSPI_ReadWordArray+0x90>
        }
        rxd[i] = w.word;
 800390a:	8bfb      	ldrh	r3, [r7, #30]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8003916:	8bfb      	ldrh	r3, [r7, #30]
 8003918:	3301      	adds	r3, #1
 800391a:	83fb      	strh	r3, [r7, #30]
 800391c:	8bfa      	ldrh	r2, [r7, #30]
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3dc      	bcc.n	80038de <DRV_CANFDSPI_ReadWordArray+0x86>
    }

    return spiTransferError;
 8003924:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000300 	.word	0x20000300
 8003934:	20000364 	.word	0x20000364

08003938 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <DRV_CANFDSPI_Configure+0x118>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003956:	b2da      	uxtb	r2, r3
 8003958:	7a3b      	ldrb	r3, [r7, #8]
 800395a:	f362 0304 	bfi	r3, r2, #0, #5
 800395e:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003968:	b2da      	uxtb	r2, r3
 800396a:	7a3b      	ldrb	r3, [r7, #8]
 800396c:	f362 1345 	bfi	r3, r2, #5, #1
 8003970:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	7a3b      	ldrb	r3, [r7, #8]
 800397e:	f362 1386 	bfi	r3, r2, #6, #1
 8003982:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	7a7b      	ldrb	r3, [r7, #9]
 8003990:	f362 0300 	bfi	r3, r2, #0, #1
 8003994:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	7a7b      	ldrb	r3, [r7, #9]
 80039a2:	f362 0342 	bfi	r3, r2, #1, #2
 80039a6:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	7a7b      	ldrb	r3, [r7, #9]
 80039b4:	f362 1304 	bfi	r3, r2, #4, #1
 80039b8:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	7abb      	ldrb	r3, [r7, #10]
 80039c6:	f362 0300 	bfi	r3, r2, #0, #1
 80039ca:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	7abb      	ldrb	r3, [r7, #10]
 80039d8:	f362 0341 	bfi	r3, r2, #1, #1
 80039dc:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	7abb      	ldrb	r3, [r7, #10]
 80039ea:	f362 0382 	bfi	r3, r2, #2, #1
 80039ee:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	7abb      	ldrb	r3, [r7, #10]
 80039fc:	f362 03c3 	bfi	r3, r2, #3, #1
 8003a00:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	7abb      	ldrb	r3, [r7, #10]
 8003a0e:	f362 1304 	bfi	r3, r2, #4, #1
 8003a12:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	789b      	ldrb	r3, [r3, #2]
 8003a18:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	7afb      	ldrb	r3, [r7, #11]
 8003a20:	f362 1307 	bfi	r3, r2, #4, #4
 8003a24:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fe3d 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <DRV_CANFDSPI_Configure+0x10c>
        return -1;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e001      	b.n	8003a48 <DRV_CANFDSPI_Configure+0x110>
    }

    return spiTransferError;
 8003a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000010 	.word	0x20000010

08003a54 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8003a5c:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8003a62:	7b3b      	ldrb	r3, [r7, #12]
 8003a64:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003a68:	b2d9      	uxtb	r1, r3
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	7813      	ldrb	r3, [r2, #0]
 8003a6e:	f361 0304 	bfi	r3, r1, #0, #5
 8003a72:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8003a74:	7b3b      	ldrb	r3, [r7, #12]
 8003a76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a7a:	b2d9      	uxtb	r1, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	7813      	ldrb	r3, [r2, #0]
 8003a80:	f361 1345 	bfi	r3, r1, #5, #1
 8003a84:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8003a86:	7b3b      	ldrb	r3, [r7, #12]
 8003a88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003a8c:	b2d9      	uxtb	r1, r3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	7813      	ldrb	r3, [r2, #0]
 8003a92:	f361 1386 	bfi	r3, r1, #6, #1
 8003a96:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8003a98:	7b7b      	ldrb	r3, [r7, #13]
 8003a9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a9e:	b2d9      	uxtb	r1, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	7813      	ldrb	r3, [r2, #0]
 8003aa4:	f361 13c7 	bfi	r3, r1, #7, #1
 8003aa8:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8003aaa:	7b7b      	ldrb	r3, [r7, #13]
 8003aac:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	7853      	ldrb	r3, [r2, #1]
 8003ab6:	f361 0301 	bfi	r3, r1, #0, #2
 8003aba:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8003abc:	7b7b      	ldrb	r3, [r7, #13]
 8003abe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ac2:	b2d9      	uxtb	r1, r3
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	7853      	ldrb	r3, [r2, #1]
 8003ac8:	f361 0382 	bfi	r3, r1, #2, #1
 8003acc:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8003ace:	7bbb      	ldrb	r3, [r7, #14]
 8003ad0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ad4:	b2d9      	uxtb	r1, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	7853      	ldrb	r3, [r2, #1]
 8003ada:	f361 03c3 	bfi	r3, r1, #3, #1
 8003ade:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ae6:	b2d9      	uxtb	r1, r3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	7853      	ldrb	r3, [r2, #1]
 8003aec:	f361 1304 	bfi	r3, r1, #4, #1
 8003af0:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8003af2:	7bbb      	ldrb	r3, [r7, #14]
 8003af4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003af8:	b2d9      	uxtb	r1, r3
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	7853      	ldrb	r3, [r2, #1]
 8003afe:	f361 1345 	bfi	r3, r1, #5, #1
 8003b02:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8003b04:	7bbb      	ldrb	r3, [r7, #14]
 8003b06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b0a:	b2d9      	uxtb	r1, r3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	7853      	ldrb	r3, [r2, #1]
 8003b10:	f361 1386 	bfi	r3, r1, #6, #1
 8003b14:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8003b16:	7bbb      	ldrb	r3, [r7, #14]
 8003b18:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b1c:	b2d9      	uxtb	r1, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	7853      	ldrb	r3, [r2, #1]
 8003b22:	f361 13c7 	bfi	r3, r1, #7, #1
 8003b26:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b2e:	b2d9      	uxtb	r1, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	7893      	ldrb	r3, [r2, #2]
 8003b34:	f361 0303 	bfi	r3, r1, #0, #4
 8003b38:	7093      	strb	r3, [r2, #2]

    return 0;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	20000010 	.word	0x20000010

08003b4c <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	460a      	mov	r2, r1
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8003b64:	f107 020e 	add.w	r2, r7, #14
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fd37 	bl	80035e0 <DRV_CANFDSPI_ReadByte>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	e01a      	b.n	8003bba <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	f023 0307 	bic.w	r3, r3, #7
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8003b8e:	7bba      	ldrb	r2, [r7, #14]
 8003b90:	79bb      	ldrb	r3, [r7, #6]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8003b98:	7bba      	ldrb	r2, [r7, #14]
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	2103      	movs	r1, #3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd52 	bl	8003648 <DRV_CANFDSPI_WriteByte>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8003bb0:	f06f 0301 	mvn.w	r3, #1
 8003bb4:	e001      	b.n	8003bba <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	603a      	str	r2, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <DRV_CANFDSPI_TransmitChannelConfigure+0xb0>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.TxEnable = 1;
 8003be2:	7a3b      	ldrb	r3, [r7, #8]
 8003be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be8:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	f362 0304 	bfi	r3, r2, #0, #5
 8003bfa:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	f362 1347 	bfi	r3, r2, #5, #3
 8003c0c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	7abb      	ldrb	r3, [r7, #10]
 8003c1a:	f362 1346 	bfi	r3, r2, #5, #2
 8003c1e:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	7abb      	ldrb	r3, [r7, #10]
 8003c2c:	f362 0304 	bfi	r3, r2, #0, #5
 8003c30:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	7a3b      	ldrb	r3, [r7, #8]
 8003c3e:	f362 1386 	bfi	r3, r2, #6, #1
 8003c42:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003c44:	79bb      	ldrb	r3, [r7, #6]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	0052      	lsls	r2, r2, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3350      	adds	r3, #80	; 0x50
 8003c54:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	89b9      	ldrh	r1, [r7, #12]
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fd25 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000010 	.word	0x20000010

08003c78 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x78>)
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8003c86:	7b3b      	ldrb	r3, [r7, #12]
 8003c88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c8c:	b2d9      	uxtb	r1, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	7813      	ldrb	r3, [r2, #0]
 8003c92:	f361 0300 	bfi	r3, r1, #0, #1
 8003c96:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8003c98:	7bbb      	ldrb	r3, [r7, #14]
 8003c9a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003c9e:	b2d9      	uxtb	r1, r3
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	7813      	ldrb	r3, [r2, #0]
 8003ca4:	f361 0345 	bfi	r3, r1, #1, #5
 8003ca8:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8003caa:	7bbb      	ldrb	r3, [r7, #14]
 8003cac:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003cb0:	b2d9      	uxtb	r1, r3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	7813      	ldrb	r3, [r2, #0]
 8003cb6:	f361 1387 	bfi	r3, r1, #6, #2
 8003cba:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003cc2:	b2d9      	uxtb	r1, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	7853      	ldrb	r3, [r2, #1]
 8003cc8:	f361 0304 	bfi	r3, r1, #0, #5
 8003ccc:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003cd4:	b2d9      	uxtb	r1, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	7853      	ldrb	r3, [r2, #1]
 8003cda:	f361 1347 	bfi	r3, r1, #5, #3
 8003cde:	7053      	strb	r3, [r2, #1]

    return 0;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000010 	.word	0x20000010

08003cf4 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b0a0      	sub	sp, #128	; 0x80
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60ba      	str	r2, [r7, #8]
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	460b      	mov	r3, r1
 8003d04:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	0052      	lsls	r2, r2, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3350      	adds	r3, #80	; 0x50
 8003d1c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8003d20:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d24:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8003d28:	7bf8      	ldrb	r0, [r7, #15]
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	f7ff fd94 	bl	8003858 <DRV_CANFDSPI_ReadWordArray>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003d36:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	e0c5      	b.n	8003ed0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8003d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d46:	667b      	str	r3, [r7, #100]	; 0x64
//    ciFifoCon.txBF.TxEnable = 1;
    if (!ciFifoCon.txBF.TxEnable) {
 8003d48:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003d4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8003d56:	f06f 0301 	mvn.w	r3, #1
 8003d5a:	e0b9      	b.n	8003ed0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	791b      	ldrb	r3, [r3, #4]
 8003d60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fb5e 	bl	8005428 <DRV_CANFDSPI_DlcToDataBytes>
 8003d6c:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8003d6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d202      	bcs.n	8003d7e <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8003d78:	f06f 0302 	mvn.w	r3, #2
 8003d7c:	e0a8      	b.n	8003ed0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8003d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d84:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8003d86:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8003d94:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d9c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];
//    uint8_t rxBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	789b      	ldrb	r3, [r3, #2]
 8003db0:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	78db      	ldrb	r3, [r3, #3]
 8003db6:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	795b      	ldrb	r3, [r3, #5]
 8003dc2:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	799b      	ldrb	r3, [r3, #6]
 8003dc8:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	79db      	ldrb	r3, [r3, #7]
 8003dce:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003dd6:	e010      	b.n	8003dfa <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8003dd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	441a      	add	r2, r3
 8003de0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003de4:	3308      	adds	r3, #8
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	3380      	adds	r3, #128	; 0x80
 8003dea:	443b      	add	r3, r7
 8003dec:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8003df0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003df4:	3301      	adds	r3, #1
 8003df6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003dfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003dfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d8e8      	bhi.n	8003dd8 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8003e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d02b      	beq.n	8003e76 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8003e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f1c3 0304 	rsb	r3, r3, #4
 8003e2e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8003e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	3308      	adds	r3, #8
 8003e3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003e44:	e010      	b.n	8003e68 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8003e46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003e4a:	f103 0208 	add.w	r2, r3, #8
 8003e4e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003e52:	4413      	add	r3, r2
 8003e54:	3380      	adds	r3, #128	; 0x80
 8003e56:	443b      	add	r3, r7
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8003e5e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003e62:	3301      	adds	r3, #1
 8003e64:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003e68:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d8e7      	bhi.n	8003e46 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8003e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003e80:	4413      	add	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3308      	adds	r3, #8
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f107 0210 	add.w	r2, r7, #16
 8003e8c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8003e90:	7bf8      	ldrb	r0, [r7, #15]
 8003e92:	f7ff fc9d 	bl	80037d0 <DRV_CANFDSPI_WriteByteArray>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003e9c:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8003ea4:	f06f 0303 	mvn.w	r3, #3
 8003ea8:	e012      	b.n	8003ed0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    //test
    //DRV_CANFDSPI_ReadByteArray(index, a, rxBuffer, txdNumBytes + 8 + n);
    //test

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8003eaa:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8003eae:	7bb9      	ldrb	r1, [r7, #14]
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f810 	bl	8003ed8 <DRV_CANFDSPI_TransmitChannelUpdate>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003ebe:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 8003ec6:	f06f 0304 	mvn.w	r3, #4
 8003eca:	e001      	b.n	8003ed0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8003ecc:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3780      	adds	r7, #128	; 0x80
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	71bb      	strb	r3, [r7, #6]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8003eee:	79bb      	ldrb	r3, [r7, #6]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	0052      	lsls	r2, r2, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3351      	adds	r3, #81	; 0x51
 8003efe:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8003f04:	7a7b      	ldrb	r3, [r7, #9]
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8003f0c:	797b      	ldrb	r3, [r7, #5]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8003f12:	7a7b      	ldrb	r3, [r7, #9]
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8003f1a:	7a7a      	ldrb	r2, [r7, #9]
 8003f1c:	89b9      	ldrh	r1, [r7, #12]
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fb91 	bl	8003648 <DRV_CANFDSPI_WriteByte>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	e001      	b.n	8003f3c <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 8003f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	603a      	str	r2, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
 8003f50:	460b      	mov	r3, r1
 8003f52:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8003f62:	79bb      	ldrb	r3, [r7, #6]
 8003f64:	333e      	adds	r3, #62	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	89b9      	ldrh	r1, [r7, #12]
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fb9a 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	603a      	str	r2, [r7, #0]
 8003f92:	71fb      	strb	r3, [r7, #7]
 8003f94:	460b      	mov	r3, r1
 8003f96:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8003fa6:	79bb      	ldrb	r3, [r7, #6]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003fb2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	89b9      	ldrh	r1, [r7, #12]
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fb76 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4623      	mov	r3, r4
 8003fe0:	71fb      	strb	r3, [r7, #7]
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71bb      	strb	r3, [r7, #6]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	717b      	strb	r3, [r7, #5]
 8003fea:	4613      	mov	r3, r2
 8003fec:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 8003ff2:	793b      	ldrb	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 8003ff8:	7a3b      	ldrb	r3, [r7, #8]
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffe:	723b      	strb	r3, [r7, #8]
 8004000:	e003      	b.n	800400a <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 8004002:	7a3b      	ldrb	r3, [r7, #8]
 8004004:	f36f 13c7 	bfc	r3, #7, #1
 8004008:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 800400a:	797b      	ldrb	r3, [r7, #5]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	b2da      	uxtb	r2, r3
 8004012:	7a3b      	ldrb	r3, [r7, #8]
 8004014:	f362 0304 	bfi	r3, r2, #0, #5
 8004018:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 800401a:	79bb      	ldrb	r3, [r7, #6]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004022:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8004024:	7a3a      	ldrb	r2, [r7, #8]
 8004026:	89b9      	ldrh	r1, [r7, #12]
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fb0c 	bl	8003648 <DRV_CANFDSPI_WriteByte>
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bd90      	pop	{r4, r7, pc}

08004040 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	603a      	str	r2, [r7, #0]
 800404a:	71fb      	strb	r3, [r7, #7]
 800404c:	460b      	mov	r3, r1
 800404e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	81bb      	strh	r3, [r7, #12]

#ifdef CAN_TXQUEUE_IMPLEMENTED
    if (channel == CAN_TXQUEUE_CH0) {
 8004058:	79bb      	ldrb	r3, [r7, #6]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800405e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004062:	e034      	b.n	80040ce <DRV_CANFDSPI_ReceiveChannelConfigure+0x8e>
    }
#endif

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <DRV_CANFDSPI_ReceiveChannelConfigure+0x98>)
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 800406a:	7a3b      	ldrb	r3, [r7, #8]
 800406c:	f36f 13c7 	bfc	r3, #7, #1
 8004070:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800407a:	b2da      	uxtb	r2, r3
 800407c:	7afb      	ldrb	r3, [r7, #11]
 800407e:	f362 0304 	bfi	r3, r2, #0, #5
 8004082:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800408c:	b2da      	uxtb	r2, r3
 800408e:	7afb      	ldrb	r3, [r7, #11]
 8004090:	f362 1347 	bfi	r3, r2, #5, #3
 8004094:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	7a3b      	ldrb	r3, [r7, #8]
 80040a2:	f362 1345 	bfi	r3, r2, #5, #1
 80040a6:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80040a8:	79bb      	ldrb	r3, [r7, #6]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	0052      	lsls	r2, r2, #1
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3350      	adds	r3, #80	; 0x50
 80040b8:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	89b9      	ldrh	r1, [r7, #12]
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff faf3 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80040ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000010 	.word	0x20000010

080040dc <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x54>)
 80040e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e8:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80040f0:	b2d9      	uxtb	r1, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	7813      	ldrb	r3, [r2, #0]
 80040f6:	f361 0345 	bfi	r3, r1, #1, #5
 80040fa:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004102:	b2d9      	uxtb	r1, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	8813      	ldrh	r3, [r2, #0]
 8004108:	f361 1388 	bfi	r3, r1, #6, #3
 800410c:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 800410e:	7b3b      	ldrb	r3, [r7, #12]
 8004110:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004114:	b2d9      	uxtb	r1, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	7813      	ldrb	r3, [r2, #0]
 800411a:	f361 0300 	bfi	r3, r1, #0, #1
 800411e:	7013      	strb	r3, [r2, #0]

    return 0;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000010 	.word	0x20000010

08004134 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0a0      	sub	sp, #128	; 0x80
 8004138:	af00      	add	r7, sp, #0
 800413a:	60ba      	str	r2, [r7, #8]
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]
 8004142:	460b      	mov	r3, r1
 8004144:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	0052      	lsls	r2, r2, #1
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	b29b      	uxth	r3, r3
 8004166:	3350      	adds	r3, #80	; 0x50
 8004168:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 800416c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004170:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8004174:	7bf8      	ldrb	r0, [r7, #15]
 8004176:	2303      	movs	r3, #3
 8004178:	f7ff fb6e 	bl	8003858 <DRV_CANFDSPI_ReadWordArray>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8004182:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	e114      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8004194:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 80041a2:	f06f 0301 	mvn.w	r3, #1
 80041a6:	e108      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 80041a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041aa:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 80041ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ae:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80041b0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 80041be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80041c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 80041ca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80041ce:	3308      	adds	r3, #8
 80041d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80041d4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 80041e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80041e6:	3304      	adds	r3, #4
 80041e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80041ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80041fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3304      	adds	r3, #4
 8004206:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 800420a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800420e:	2b4c      	cmp	r3, #76	; 0x4c
 8004210:	d902      	bls.n	8004218 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 8004212:	234c      	movs	r3, #76	; 0x4c
 8004214:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8004218:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800421c:	b29b      	uxth	r3, r3
 800421e:	f107 0214 	add.w	r2, r7, #20
 8004222:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8004226:	7bf8      	ldrb	r0, [r7, #15]
 8004228:	f7ff fa80 	bl	800372c <DRV_CANFDSPI_ReadByteArray>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8004232:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 800423a:	f06f 0302 	mvn.w	r3, #2
 800423e:	e0bc      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
	

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 8004240:	7d3b      	ldrb	r3, [r7, #20]
 8004242:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 8004244:	7d7b      	ldrb	r3, [r7, #21]
 8004246:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8004248:	7dbb      	ldrb	r3, [r7, #22]
 800424a:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 8004256:	7e3b      	ldrb	r3, [r7, #24]
 8004258:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 800425a:	7e7b      	ldrb	r3, [r7, #25]
 800425c:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 800425e:	7ebb      	ldrb	r3, [r7, #26]
 8004260:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 8004262:	7efb      	ldrb	r3, [r7, #27]
 8004264:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 800426c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d027      	beq.n	80042ca <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 800427a:	7f3b      	ldrb	r3, [r7, #28]
 800427c:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 800427e:	7f7b      	ldrb	r3, [r7, #29]
 8004280:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8004282:	7fbb      	ldrb	r3, [r7, #30]
 8004284:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8004290:	2300      	movs	r3, #0
 8004292:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004296:	e011      	b.n	80042bc <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8004298:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800429c:	f103 020c 	add.w	r2, r3, #12
 80042a0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	440b      	add	r3, r1
 80042a8:	3280      	adds	r2, #128	; 0x80
 80042aa:	443a      	add	r2, r7
 80042ac:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80042b0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80042b2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80042b6:	3301      	adds	r3, #1
 80042b8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80042bc:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80042c0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d3e7      	bcc.n	8004298 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 80042c8:	e01e      	b.n	8004308 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80042d6:	e011      	b.n	80042fc <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 80042d8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80042dc:	f103 0208 	add.w	r2, r3, #8
 80042e0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	440b      	add	r3, r1
 80042e8:	3280      	adds	r2, #128	; 0x80
 80042ea:	443a      	add	r2, r7
 80042ec:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80042f0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80042f2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80042f6:	3301      	adds	r3, #1
 80042f8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80042fc:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8004300:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004304:	429a      	cmp	r2, r3
 8004306:	d3e7      	bcc.n	80042d8 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8004308:	7bba      	ldrb	r2, [r7, #14]
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f858 	bl	80043c4 <DRV_CANFDSPI_ReceiveChannelUpdate>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800431a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 8004322:	f06f 0303 	mvn.w	r3, #3
 8004326:	e048      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
    }
	
	//�Ķ�������ֵ��������֡�ĳ���
	switch(ba[4] & 0x0f)
 8004328:	7e3b      	ldrb	r3, [r7, #24]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d842      	bhi.n	80043b8 <DRV_CANFDSPI_ReceiveMessageGet+0x284>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <DRV_CANFDSPI_ReceiveMessageGet+0x204>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004379 	.word	0x08004379
 800433c:	0800437d 	.word	0x0800437d
 8004340:	08004381 	.word	0x08004381
 8004344:	08004385 	.word	0x08004385
 8004348:	08004389 	.word	0x08004389
 800434c:	0800438d 	.word	0x0800438d
 8004350:	08004391 	.word	0x08004391
 8004354:	08004395 	.word	0x08004395
 8004358:	08004399 	.word	0x08004399
 800435c:	0800439d 	.word	0x0800439d
 8004360:	080043a1 	.word	0x080043a1
 8004364:	080043a5 	.word	0x080043a5
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043ad 	.word	0x080043ad
 8004370:	080043b1 	.word	0x080043b1
 8004374:	080043b5 	.word	0x080043b5
	{
		case 0x00:
			return 0;
 8004378:	2300      	movs	r3, #0
 800437a:	e01e      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x01:
			return 1;
 800437c:	2301      	movs	r3, #1
 800437e:	e01c      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x02:
			return 2;
 8004380:	2302      	movs	r3, #2
 8004382:	e01a      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x03:
			return 3;
 8004384:	2303      	movs	r3, #3
 8004386:	e018      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x04:
			return 4;
 8004388:	2304      	movs	r3, #4
 800438a:	e016      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x05:
			return 5;
 800438c:	2305      	movs	r3, #5
 800438e:	e014      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x06:
			return 6;
 8004390:	2306      	movs	r3, #6
 8004392:	e012      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x07:
			return 7;
 8004394:	2307      	movs	r3, #7
 8004396:	e010      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x08:
			return 8;
 8004398:	2308      	movs	r3, #8
 800439a:	e00e      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x09:
			return 12;
 800439c:	230c      	movs	r3, #12
 800439e:	e00c      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0a:
			return 16;
 80043a0:	2310      	movs	r3, #16
 80043a2:	e00a      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0b:
			return 20;
 80043a4:	2314      	movs	r3, #20
 80043a6:	e008      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0c:
			return 24;
 80043a8:	2318      	movs	r3, #24
 80043aa:	e006      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0d:
			return 32;
 80043ac:	2320      	movs	r3, #32
 80043ae:	e004      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0e:
			return 48;
 80043b0:	2330      	movs	r3, #48	; 0x30
 80043b2:	e002      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		case 0x0f:
			return 64;
 80043b4:	2340      	movs	r3, #64	; 0x40
 80043b6:	e000      	b.n	80043ba <DRV_CANFDSPI_ReceiveMessageGet+0x286>
		default:
			return 64;
 80043b8:	2340      	movs	r3, #64	; 0x40
	}
    //return spiTransferError;
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3780      	adds	r7, #128	; 0x80
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	460a      	mov	r2, r1
 80043ce:	71fb      	strb	r3, [r7, #7]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80043e0:	79bb      	ldrb	r3, [r7, #6]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	0052      	lsls	r2, r2, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3351      	adds	r3, #81	; 0x51
 80043f0:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 80043f2:	7a7b      	ldrb	r3, [r7, #9]
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80043fa:	7a7a      	ldrb	r2, [r7, #9]
 80043fc:	89f9      	ldrh	r1, [r7, #14]
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f921 	bl	8003648 <DRV_CANFDSPI_WriteByte>
 8004406:	4603      	mov	r3, r0
 8004408:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800440a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	603a      	str	r2, [r7, #0]
 8004420:	71fb      	strb	r3, [r7, #7]
 8004422:	460b      	mov	r3, r1
 8004424:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8004432:	79bb      	ldrb	r3, [r7, #6]
 8004434:	b29b      	uxth	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	0052      	lsls	r2, r2, #1
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	b29b      	uxth	r3, r3
 8004440:	3354      	adds	r3, #84	; 0x54
 8004442:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8004444:	f107 0208 	add.w	r2, r7, #8
 8004448:	89b9      	ldrh	r1, [r7, #12]
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff f8c7 	bl	80035e0 <DRV_CANFDSPI_ReadByte>
 8004452:	4603      	mov	r3, r0
 8004454:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	e007      	b.n	8004474 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8004464:	7a3b      	ldrb	r3, [r7, #8]
 8004466:	f003 0317 	and.w	r3, r3, #23
 800446a:	b2da      	uxtb	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8004470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	603a      	str	r2, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
 8004488:	460b      	mov	r3, r1
 800448a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	81bb      	strh	r3, [r7, #12]

#ifdef CAN_TXQUEUE_IMPLEMENTED
    if (channel == CAN_TXQUEUE_CH0) return -100;
 8004494:	79bb      	ldrb	r3, [r7, #6]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 800449a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800449e:	e022      	b.n	80044e6 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
#endif

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80044a4:	79bb      	ldrb	r3, [r7, #6]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	0052      	lsls	r2, r2, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3354      	adds	r3, #84	; 0x54
 80044b4:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80044b6:	f107 0208 	add.w	r2, r7, #8
 80044ba:	89b9      	ldrh	r1, [r7, #12]
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f88e 	bl	80035e0 <DRV_CANFDSPI_ReadByte>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	e007      	b.n	80044e6 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 80044d6:	7a3b      	ldrb	r3, [r7, #8]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80044e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8004500:	f107 020e 	add.w	r2, r7, #14
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f640 610c 	movw	r1, #3596	; 0xe0c
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f868 	bl	80035e0 <DRV_CANFDSPI_ReadByte>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	e015      	b.n	800454e <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8004522:	7bbb      	ldrb	r3, [r7, #14]
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	b2db      	uxtb	r3, r3
 800452a:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 800452c:	7bba      	ldrb	r2, [r7, #14]
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f640 610c 	movw	r1, #3596	; 0xe0c
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f887 	bl	8003648 <DRV_CANFDSPI_WriteByte>
 800453a:	4603      	mov	r3, r0
 800453c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800453e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8004546:	f06f 0301 	mvn.w	r3, #1
 800454a:	e000      	b.n	800454e <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b09e      	sub	sp, #120	; 0x78
 800455a:	af00      	add	r7, sp, #0
 800455c:	4603      	mov	r3, r0
 800455e:	460a      	mov	r2, r1
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	4613      	mov	r3, r2
 8004564:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH];
    uint32_t k;
    int8_t spiTransferError = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
 800456c:	2300      	movs	r3, #0
 800456e:	677b      	str	r3, [r7, #116]	; 0x74
 8004570:	e008      	b.n	8004584 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8004572:	f107 020c 	add.w	r2, r7, #12
 8004576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004578:	4413      	add	r3, r2
 800457a:	79ba      	ldrb	r2, [r7, #6]
 800457c:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	3301      	adds	r3, #1
 8004582:	677b      	str	r3, [r7, #116]	; 0x74
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	2b63      	cmp	r3, #99	; 0x63
 8004588:	d9f3      	bls.n	8004572 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 800458a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800458e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
 8004592:	2300      	movs	r3, #0
 8004594:	677b      	str	r3, [r7, #116]	; 0x74
 8004596:	e019      	b.n	80045cc <DRV_CANFDSPI_RamInit+0x76>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH);
 8004598:	f107 020c 	add.w	r2, r7, #12
 800459c:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80045a0:	79f8      	ldrb	r0, [r7, #7]
 80045a2:	2364      	movs	r3, #100	; 0x64
 80045a4:	f7ff f914 	bl	80037d0 <DRV_CANFDSPI_WriteByteArray>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        if (spiTransferError) {
 80045ae:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <DRV_CANFDSPI_RamInit+0x66>
            return -1;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	e00c      	b.n	80045d6 <DRV_CANFDSPI_RamInit+0x80>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH;
 80045bc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80045c0:	3364      	adds	r3, #100	; 0x64
 80045c2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
 80045c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c8:	3301      	adds	r3, #1
 80045ca:	677b      	str	r3, [r7, #116]	; 0x74
 80045cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ce:	2b13      	cmp	r3, #19
 80045d0:	d9e2      	bls.n	8004598 <DRV_CANFDSPI_RamInit+0x42>
    }

    return spiTransferError;
 80045d2:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3778      	adds	r7, #120	; 0x78
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 80045de:	b590      	push	{r4, r7, lr}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	4604      	mov	r4, r0
 80045e6:	4608      	mov	r0, r1
 80045e8:	4611      	mov	r1, r2
 80045ea:	461a      	mov	r2, r3
 80045ec:	4623      	mov	r3, r4
 80045ee:	71fb      	strb	r3, [r7, #7]
 80045f0:	4603      	mov	r3, r0
 80045f2:	71bb      	strb	r3, [r7, #6]
 80045f4:	460b      	mov	r3, r1
 80045f6:	717b      	strb	r3, [r7, #5]
 80045f8:	4613      	mov	r3, r2
 80045fa:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8004600:	793b      	ldrb	r3, [r7, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d036      	beq.n	8004674 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8004606:	2b02      	cmp	r3, #2
 8004608:	dc4c      	bgt.n	80046a4 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 800460e:	2b01      	cmp	r3, #1
 8004610:	d018      	beq.n	8004644 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8004612:	e047      	b.n	80046a4 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8004614:	79ba      	ldrb	r2, [r7, #6]
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f84c 	bl	80046b8 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 800462c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004630:	e03d      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8004632:	797a      	ldrb	r2, [r7, #5]
 8004634:	79b9      	ldrb	r1, [r7, #6]
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f8c5 	bl	80047c8 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 800463e:	4603      	mov	r3, r0
 8004640:	73fb      	strb	r3, [r7, #15]
            break;
 8004642:	e032      	b.n	80046aa <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8004644:	79ba      	ldrb	r2, [r7, #6]
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f000 faf4 	bl	8004c38 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 800465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004660:	e025      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8004662:	797a      	ldrb	r2, [r7, #5]
 8004664:	79b9      	ldrb	r1, [r7, #6]
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fb73 	bl	8004d54 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 800466e:	4603      	mov	r3, r0
 8004670:	73fb      	strb	r3, [r7, #15]
            break;
 8004672:	e01a      	b.n	80046aa <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8004674:	79ba      	ldrb	r2, [r7, #6]
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fd14 	bl	80050a8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 800468c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004690:	e00d      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8004692:	797a      	ldrb	r2, [r7, #5]
 8004694:	79b9      	ldrb	r1, [r7, #6]
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fd93 	bl	80051c4 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]
            break;
 80046a2:	e002      	b.n	80046aa <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 80046a4:	23ff      	movs	r3, #255	; 0xff
 80046a6:	73fb      	strb	r3, [r7, #15]
            break;
 80046a8:	bf00      	nop
    }

    return spiTransferError;
 80046aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}
	...

080046b8 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	460a      	mov	r2, r1
 80046c2:	71fb      	strb	r3, [r7, #7]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80046cc:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x10c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80046d2:	79bb      	ldrb	r3, [r7, #6]
 80046d4:	2b11      	cmp	r3, #17
 80046d6:	d863      	bhi.n	80047a0 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe8>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x28>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004729 	.word	0x08004729
 80046e4:	08004729 	.word	0x08004729
 80046e8:	08004729 	.word	0x08004729
 80046ec:	08004729 	.word	0x08004729
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004729 	.word	0x08004729
 8004700:	08004747 	.word	0x08004747
 8004704:	08004747 	.word	0x08004747
 8004708:	08004747 	.word	0x08004747
 800470c:	08004747 	.word	0x08004747
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	08004765 	.word	0x08004765
 8004720:	08004765 	.word	0x08004765
 8004724:	08004783 	.word	0x08004783
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800472c:	233e      	movs	r3, #62	; 0x3e
 800472e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004730:	7a7b      	ldrb	r3, [r7, #9]
 8004732:	220f      	movs	r2, #15
 8004734:	f362 0306 	bfi	r3, r2, #0, #7
 8004738:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800473a:	7a3b      	ldrb	r3, [r7, #8]
 800473c:	220f      	movs	r2, #15
 800473e:	f362 0306 	bfi	r3, r2, #0, #7
 8004742:	723b      	strb	r3, [r7, #8]
            break;
 8004744:	e02f      	b.n	80047a6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800474a:	237e      	movs	r3, #126	; 0x7e
 800474c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800474e:	7a7b      	ldrb	r3, [r7, #9]
 8004750:	221f      	movs	r2, #31
 8004752:	f362 0306 	bfi	r3, r2, #0, #7
 8004756:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004758:	7a3b      	ldrb	r3, [r7, #8]
 800475a:	221f      	movs	r2, #31
 800475c:	f362 0306 	bfi	r3, r2, #0, #7
 8004760:	723b      	strb	r3, [r7, #8]
            break;
 8004762:	e020      	b.n	80047a6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004768:	231e      	movs	r3, #30
 800476a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800476c:	7a7b      	ldrb	r3, [r7, #9]
 800476e:	2207      	movs	r2, #7
 8004770:	f362 0306 	bfi	r3, r2, #0, #7
 8004774:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004776:	7a3b      	ldrb	r3, [r7, #8]
 8004778:	2207      	movs	r2, #7
 800477a:	f362 0306 	bfi	r3, r2, #0, #7
 800477e:	723b      	strb	r3, [r7, #8]
            break;
 8004780:	e011      	b.n	80047a6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8004786:	23fe      	movs	r3, #254	; 0xfe
 8004788:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 800478a:	7a7b      	ldrb	r3, [r7, #9]
 800478c:	223f      	movs	r2, #63	; 0x3f
 800478e:	f362 0306 	bfi	r3, r2, #0, #7
 8004792:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8004794:	7a3b      	ldrb	r3, [r7, #8]
 8004796:	223f      	movs	r2, #63	; 0x3f
 8004798:	f362 0306 	bfi	r3, r2, #0, #7
 800479c:	723b      	strb	r3, [r7, #8]
            break;
 800479e:	e002      	b.n	80047a6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        default:
            return -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	e009      	b.n	80047ba <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x102>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	2104      	movs	r1, #4
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ff7d 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 80047b2:	4603      	mov	r3, r0
 80047b4:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80047b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000010 	.word	0x20000010

080047c8 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
 80047d2:	460b      	mov	r3, r1
 80047d4:	71bb      	strb	r3, [r7, #6]
 80047d6:	4613      	mov	r3, r2
 80047d8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80047de:	4be2      	ldr	r3, [pc, #904]	; (8004b68 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80047e8:	7abb      	ldrb	r3, [r7, #10]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f362 0301 	bfi	r3, r2, #0, #2
 80047f0:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80047f6:	79bb      	ldrb	r3, [r7, #6]
 80047f8:	2b11      	cmp	r3, #17
 80047fa:	f200 81f5 	bhi.w	8004be8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	0800484d 	.word	0x0800484d
 8004808:	0800488b 	.word	0x0800488b
 800480c:	080048c9 	.word	0x080048c9
 8004810:	08004907 	.word	0x08004907
 8004814:	08004945 	.word	0x08004945
 8004818:	08004983 	.word	0x08004983
 800481c:	080049bd 	.word	0x080049bd
 8004820:	080049f1 	.word	0x080049f1
 8004824:	08004a23 	.word	0x08004a23
 8004828:	08004a69 	.word	0x08004a69
 800482c:	08004aaf 	.word	0x08004aaf
 8004830:	08004aed 	.word	0x08004aed
 8004834:	08004b2b 	.word	0x08004b2b
 8004838:	08004b6d 	.word	0x08004b6d
 800483c:	08004bab 	.word	0x08004bab
 8004840:	08004907 	.word	0x08004907
 8004844:	080049bd 	.word	0x080049bd
 8004848:	08004a23 	.word	0x08004a23
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	221e      	movs	r2, #30
 8004854:	f362 0304 	bfi	r3, r2, #0, #5
 8004858:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	2207      	movs	r2, #7
 800485e:	f362 0303 	bfi	r3, r2, #0, #4
 8004862:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004864:	7b3b      	ldrb	r3, [r7, #12]
 8004866:	2207      	movs	r2, #7
 8004868:	f362 0303 	bfi	r3, r2, #0, #4
 800486c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 800486e:	7a7b      	ldrb	r3, [r7, #9]
 8004870:	221f      	movs	r2, #31
 8004872:	f362 0306 	bfi	r3, r2, #0, #7
 8004876:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487e:	b2da      	uxtb	r2, r3
 8004880:	7a3b      	ldrb	r3, [r7, #8]
 8004882:	f362 0305 	bfi	r3, r2, #0, #6
 8004886:	723b      	strb	r3, [r7, #8]
            break;
 8004888:	e1b1      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	220e      	movs	r2, #14
 8004892:	f362 0304 	bfi	r3, r2, #0, #5
 8004896:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004898:	7b7b      	ldrb	r3, [r7, #13]
 800489a:	2203      	movs	r2, #3
 800489c:	f362 0303 	bfi	r3, r2, #0, #4
 80048a0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80048a2:	7b3b      	ldrb	r3, [r7, #12]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f362 0303 	bfi	r3, r2, #0, #4
 80048aa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80048ac:	7a7b      	ldrb	r3, [r7, #9]
 80048ae:	220f      	movs	r2, #15
 80048b0:	f362 0306 	bfi	r3, r2, #0, #7
 80048b4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	7a3b      	ldrb	r3, [r7, #8]
 80048c0:	f362 0305 	bfi	r3, r2, #0, #6
 80048c4:	723b      	strb	r3, [r7, #8]
            break;
 80048c6:	e192      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	2208      	movs	r2, #8
 80048d0:	f362 0304 	bfi	r3, r2, #0, #5
 80048d4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80048d6:	7b7b      	ldrb	r3, [r7, #13]
 80048d8:	2202      	movs	r2, #2
 80048da:	f362 0303 	bfi	r3, r2, #0, #4
 80048de:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80048e0:	7b3b      	ldrb	r3, [r7, #12]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f362 0303 	bfi	r3, r2, #0, #4
 80048e8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80048ea:	7a7b      	ldrb	r3, [r7, #9]
 80048ec:	2209      	movs	r2, #9
 80048ee:	f362 0306 	bfi	r3, r2, #0, #7
 80048f2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	7a3b      	ldrb	r3, [r7, #8]
 80048fe:	f362 0305 	bfi	r3, r2, #0, #6
 8004902:	723b      	strb	r3, [r7, #8]
            break;
 8004904:	e173      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	2206      	movs	r2, #6
 800490e:	f362 0304 	bfi	r3, r2, #0, #5
 8004912:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004914:	7b7b      	ldrb	r3, [r7, #13]
 8004916:	2201      	movs	r2, #1
 8004918:	f362 0303 	bfi	r3, r2, #0, #4
 800491c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800491e:	7b3b      	ldrb	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f362 0303 	bfi	r3, r2, #0, #4
 8004926:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004928:	7a7b      	ldrb	r3, [r7, #9]
 800492a:	2207      	movs	r2, #7
 800492c:	f362 0306 	bfi	r3, r2, #0, #7
 8004930:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	b2da      	uxtb	r2, r3
 800493a:	7a3b      	ldrb	r3, [r7, #8]
 800493c:	f362 0305 	bfi	r3, r2, #0, #6
 8004940:	723b      	strb	r3, [r7, #8]
            break;
 8004942:	e154      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	2204      	movs	r2, #4
 800494c:	f362 0304 	bfi	r3, r2, #0, #5
 8004950:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004952:	7b7b      	ldrb	r3, [r7, #13]
 8004954:	2201      	movs	r2, #1
 8004956:	f362 0303 	bfi	r3, r2, #0, #4
 800495a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800495c:	7b3b      	ldrb	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f362 0303 	bfi	r3, r2, #0, #4
 8004964:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8004966:	7a7b      	ldrb	r3, [r7, #9]
 8004968:	2205      	movs	r2, #5
 800496a:	f362 0306 	bfi	r3, r2, #0, #7
 800496e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	7a3b      	ldrb	r3, [r7, #8]
 800497a:	f362 0305 	bfi	r3, r2, #0, #6
 800497e:	723b      	strb	r3, [r7, #8]
            break;
 8004980:	e135      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	2203      	movs	r2, #3
 800498a:	f362 0304 	bfi	r3, r2, #0, #5
 800498e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004990:	7b7b      	ldrb	r3, [r7, #13]
 8004992:	f36f 0303 	bfc	r3, #0, #4
 8004996:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004998:	7b3b      	ldrb	r3, [r7, #12]
 800499a:	f36f 0303 	bfc	r3, #0, #4
 800499e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 80049a0:	7a7b      	ldrb	r3, [r7, #9]
 80049a2:	2204      	movs	r2, #4
 80049a4:	f362 0306 	bfi	r3, r2, #0, #7
 80049a8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	7a3b      	ldrb	r3, [r7, #8]
 80049b4:	f362 0305 	bfi	r3, r2, #0, #6
 80049b8:	723b      	strb	r3, [r7, #8]
            break;
 80049ba:	e118      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80049c0:	7bbb      	ldrb	r3, [r7, #14]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f362 0304 	bfi	r3, r2, #0, #5
 80049c8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80049ca:	7b7b      	ldrb	r3, [r7, #13]
 80049cc:	f36f 0303 	bfc	r3, #0, #4
 80049d0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80049d2:	7b3b      	ldrb	r3, [r7, #12]
 80049d4:	f36f 0303 	bfc	r3, #0, #4
 80049d8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80049da:	7a7b      	ldrb	r3, [r7, #9]
 80049dc:	2203      	movs	r2, #3
 80049de:	f362 0306 	bfi	r3, r2, #0, #7
 80049e2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 80049e4:	7a3b      	ldrb	r3, [r7, #8]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f362 0305 	bfi	r3, r2, #0, #6
 80049ec:	723b      	strb	r3, [r7, #8]
            break;
 80049ee:	e0fe      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f362 0304 	bfi	r3, r2, #0, #5
 80049fc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80049fe:	7b7b      	ldrb	r3, [r7, #13]
 8004a00:	f36f 0303 	bfc	r3, #0, #4
 8004a04:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004a06:	7b3b      	ldrb	r3, [r7, #12]
 8004a08:	f36f 0303 	bfc	r3, #0, #4
 8004a0c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8004a0e:	7a7b      	ldrb	r3, [r7, #9]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f362 0306 	bfi	r3, r2, #0, #7
 8004a16:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8004a18:	7a3b      	ldrb	r3, [r7, #8]
 8004a1a:	f36f 0305 	bfc	r3, #0, #6
 8004a1e:	723b      	strb	r3, [r7, #8]
            break;
 8004a20:	e0e5      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004a26:	7bbb      	ldrb	r3, [r7, #14]
 8004a28:	221e      	movs	r2, #30
 8004a2a:	f362 0304 	bfi	r3, r2, #0, #5
 8004a2e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004a30:	7b7b      	ldrb	r3, [r7, #13]
 8004a32:	2207      	movs	r2, #7
 8004a34:	f362 0303 	bfi	r3, r2, #0, #4
 8004a38:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004a3a:	7b3b      	ldrb	r3, [r7, #12]
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	f362 0303 	bfi	r3, r2, #0, #4
 8004a42:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004a44:	7a7b      	ldrb	r3, [r7, #9]
 8004a46:	221f      	movs	r2, #31
 8004a48:	f362 0306 	bfi	r3, r2, #0, #7
 8004a4c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	7a3b      	ldrb	r3, [r7, #8]
 8004a58:	f362 0305 	bfi	r3, r2, #0, #6
 8004a5c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004a5e:	7abb      	ldrb	r3, [r7, #10]
 8004a60:	f36f 0301 	bfc	r3, #0, #2
 8004a64:	72bb      	strb	r3, [r7, #10]
            break;
 8004a66:	e0c2      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8004a6c:	7bbb      	ldrb	r3, [r7, #14]
 8004a6e:	2211      	movs	r2, #17
 8004a70:	f362 0304 	bfi	r3, r2, #0, #5
 8004a74:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8004a76:	7b7b      	ldrb	r3, [r7, #13]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	f362 0303 	bfi	r3, r2, #0, #4
 8004a7e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8004a80:	7b3b      	ldrb	r3, [r7, #12]
 8004a82:	2204      	movs	r2, #4
 8004a84:	f362 0303 	bfi	r3, r2, #0, #4
 8004a88:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8004a8a:	7a7b      	ldrb	r3, [r7, #9]
 8004a8c:	2212      	movs	r2, #18
 8004a8e:	f362 0306 	bfi	r3, r2, #0, #7
 8004a92:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	7a3b      	ldrb	r3, [r7, #8]
 8004a9e:	f362 0305 	bfi	r3, r2, #0, #6
 8004aa2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004aa4:	7abb      	ldrb	r3, [r7, #10]
 8004aa6:	f36f 0301 	bfc	r3, #0, #2
 8004aaa:	72bb      	strb	r3, [r7, #10]
            break;
 8004aac:	e09f      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004ab2:	7bbb      	ldrb	r3, [r7, #14]
 8004ab4:	221e      	movs	r2, #30
 8004ab6:	f362 0304 	bfi	r3, r2, #0, #5
 8004aba:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004abc:	7b7b      	ldrb	r3, [r7, #13]
 8004abe:	2207      	movs	r2, #7
 8004ac0:	f362 0303 	bfi	r3, r2, #0, #4
 8004ac4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004ac6:	7b3b      	ldrb	r3, [r7, #12]
 8004ac8:	2207      	movs	r2, #7
 8004aca:	f362 0303 	bfi	r3, r2, #0, #4
 8004ace:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004ad0:	7a7b      	ldrb	r3, [r7, #9]
 8004ad2:	221f      	movs	r2, #31
 8004ad4:	f362 0306 	bfi	r3, r2, #0, #7
 8004ad8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	7a3b      	ldrb	r3, [r7, #8]
 8004ae4:	f362 0305 	bfi	r3, r2, #0, #6
 8004ae8:	723b      	strb	r3, [r7, #8]
            break;
 8004aea:	e080      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8004af0:	7bbb      	ldrb	r3, [r7, #14]
 8004af2:	2212      	movs	r2, #18
 8004af4:	f362 0304 	bfi	r3, r2, #0, #5
 8004af8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8004afa:	7b7b      	ldrb	r3, [r7, #13]
 8004afc:	2205      	movs	r2, #5
 8004afe:	f362 0303 	bfi	r3, r2, #0, #4
 8004b02:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8004b04:	7b3b      	ldrb	r3, [r7, #12]
 8004b06:	2205      	movs	r2, #5
 8004b08:	f362 0303 	bfi	r3, r2, #0, #4
 8004b0c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8004b0e:	7a7b      	ldrb	r3, [r7, #9]
 8004b10:	2213      	movs	r2, #19
 8004b12:	f362 0306 	bfi	r3, r2, #0, #7
 8004b16:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	7a3b      	ldrb	r3, [r7, #8]
 8004b22:	f362 0305 	bfi	r3, r2, #0, #6
 8004b26:	723b      	strb	r3, [r7, #8]
            break;
 8004b28:	e061      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	220e      	movs	r2, #14
 8004b32:	f362 0304 	bfi	r3, r2, #0, #5
 8004b36:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004b38:	7b7b      	ldrb	r3, [r7, #13]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f362 0303 	bfi	r3, r2, #0, #4
 8004b40:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004b42:	7b3b      	ldrb	r3, [r7, #12]
 8004b44:	2203      	movs	r2, #3
 8004b46:	f362 0303 	bfi	r3, r2, #0, #4
 8004b4a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004b4c:	7a7b      	ldrb	r3, [r7, #9]
 8004b4e:	220f      	movs	r2, #15
 8004b50:	f362 0306 	bfi	r3, r2, #0, #7
 8004b54:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	7a3b      	ldrb	r3, [r7, #8]
 8004b60:	f362 0305 	bfi	r3, r2, #0, #6
 8004b64:	723b      	strb	r3, [r7, #8]
            break;
 8004b66:	e042      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8004b68:	20000010 	.word	0x20000010
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	2208      	movs	r2, #8
 8004b74:	f362 0304 	bfi	r3, r2, #0, #5
 8004b78:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004b7a:	7b7b      	ldrb	r3, [r7, #13]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f362 0303 	bfi	r3, r2, #0, #4
 8004b82:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004b84:	7b3b      	ldrb	r3, [r7, #12]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f362 0303 	bfi	r3, r2, #0, #4
 8004b8c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8004b8e:	7a7b      	ldrb	r3, [r7, #9]
 8004b90:	2209      	movs	r2, #9
 8004b92:	f362 0306 	bfi	r3, r2, #0, #7
 8004b96:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	7a3b      	ldrb	r3, [r7, #8]
 8004ba2:	f362 0305 	bfi	r3, r2, #0, #6
 8004ba6:	723b      	strb	r3, [r7, #8]
            break;
 8004ba8:	e021      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004bae:	7bbb      	ldrb	r3, [r7, #14]
 8004bb0:	2206      	movs	r2, #6
 8004bb2:	f362 0304 	bfi	r3, r2, #0, #5
 8004bb6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004bb8:	7b7b      	ldrb	r3, [r7, #13]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f362 0303 	bfi	r3, r2, #0, #4
 8004bc0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004bc2:	7b3b      	ldrb	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f362 0303 	bfi	r3, r2, #0, #4
 8004bca:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004bcc:	7a7b      	ldrb	r3, [r7, #9]
 8004bce:	2207      	movs	r2, #7
 8004bd0:	f362 0306 	bfi	r3, r2, #0, #7
 8004bd4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	7a3b      	ldrb	r3, [r7, #8]
 8004be0:	f362 0305 	bfi	r3, r2, #0, #6
 8004be4:	723b      	strb	r3, [r7, #8]
            break;
 8004be6:	e002      	b.n	8004bee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	e01f      	b.n	8004c2e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	2108      	movs	r1, #8
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fd59 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8004c06:	f06f 0301 	mvn.w	r3, #1
 8004c0a:	e010      	b.n	8004c2e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	210c      	movs	r1, #12
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fd4a 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8004c24:	f06f 0302 	mvn.w	r3, #2
 8004c28:	e001      	b.n	8004c2e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8004c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop

08004c38 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	460a      	mov	r2, r1
 8004c42:	71fb      	strb	r3, [r7, #7]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8004c4c:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x118>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004c52:	79bb      	ldrb	r3, [r7, #6]
 8004c54:	2b11      	cmp	r3, #17
 8004c56:	d863      	bhi.n	8004d20 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe8>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x28>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004ca9 	.word	0x08004ca9
 8004c64:	08004ca9 	.word	0x08004ca9
 8004c68:	08004d21 	.word	0x08004d21
 8004c6c:	08004ca9 	.word	0x08004ca9
 8004c70:	08004ca9 	.word	0x08004ca9
 8004c74:	08004ca9 	.word	0x08004ca9
 8004c78:	08004ca9 	.word	0x08004ca9
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cc7 	.word	0x08004cc7
 8004c84:	08004cc7 	.word	0x08004cc7
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cc7 	.word	0x08004cc7
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cc7 	.word	0x08004cc7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004ce5 	.word	0x08004ce5
 8004ca0:	08004ce5 	.word	0x08004ce5
 8004ca4:	08004d03 	.word	0x08004d03
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004cac:	231e      	movs	r3, #30
 8004cae:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8004cb0:	7a7b      	ldrb	r3, [r7, #9]
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	f362 0306 	bfi	r3, r2, #0, #7
 8004cb8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004cba:	7a3b      	ldrb	r3, [r7, #8]
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	f362 0306 	bfi	r3, r2, #0, #7
 8004cc2:	723b      	strb	r3, [r7, #8]
            break;
 8004cc4:	e02f      	b.n	8004d26 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8004cca:	233e      	movs	r3, #62	; 0x3e
 8004ccc:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004cce:	7a7b      	ldrb	r3, [r7, #9]
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	f362 0306 	bfi	r3, r2, #0, #7
 8004cd6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004cd8:	7a3b      	ldrb	r3, [r7, #8]
 8004cda:	220f      	movs	r2, #15
 8004cdc:	f362 0306 	bfi	r3, r2, #0, #7
 8004ce0:	723b      	strb	r3, [r7, #8]
            break;
 8004ce2:	e020      	b.n	8004d26 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8004ce8:	230e      	movs	r3, #14
 8004cea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8004cec:	7a7b      	ldrb	r3, [r7, #9]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	f362 0306 	bfi	r3, r2, #0, #7
 8004cf4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8004cf6:	7a3b      	ldrb	r3, [r7, #8]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	f362 0306 	bfi	r3, r2, #0, #7
 8004cfe:	723b      	strb	r3, [r7, #8]
            break;
 8004d00:	e011      	b.n	8004d26 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8004d06:	237e      	movs	r3, #126	; 0x7e
 8004d08:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8004d0a:	7a7b      	ldrb	r3, [r7, #9]
 8004d0c:	221f      	movs	r2, #31
 8004d0e:	f362 0306 	bfi	r3, r2, #0, #7
 8004d12:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004d14:	7a3b      	ldrb	r3, [r7, #8]
 8004d16:	221f      	movs	r2, #31
 8004d18:	f362 0306 	bfi	r3, r2, #0, #7
 8004d1c:	723b      	strb	r3, [r7, #8]
            break;
 8004d1e:	e002      	b.n	8004d26 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        default:
            return -1;
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295
 8004d24:	e010      	b.n	8004d48 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x110>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fcbd 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
        return -2;
 8004d3e:	f06f 0301 	mvn.w	r3, #1
 8004d42:	e001      	b.n	8004d48 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x110>
    }

    return spiTransferError;
 8004d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000010 	.word	0x20000010

08004d54 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	71bb      	strb	r3, [r7, #6]
 8004d62:	4613      	mov	r3, r2
 8004d64:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004d6a:	4bce      	ldr	r3, [pc, #824]	; (80050a4 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8004d74:	7abb      	ldrb	r3, [r7, #10]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f362 0301 	bfi	r3, r2, #0, #2
 8004d7c:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8004d82:	79bb      	ldrb	r3, [r7, #6]
 8004d84:	2b11      	cmp	r3, #17
 8004d86:	f200 8165 	bhi.w	8005054 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004dd9 	.word	0x08004dd9
 8004d94:	08004e17 	.word	0x08004e17
 8004d98:	08005055 	.word	0x08005055
 8004d9c:	08004e55 	.word	0x08004e55
 8004da0:	08004e8f 	.word	0x08004e8f
 8004da4:	08004ec9 	.word	0x08004ec9
 8004da8:	08004ec9 	.word	0x08004ec9
 8004dac:	08004ec9 	.word	0x08004ec9
 8004db0:	08004ecf 	.word	0x08004ecf
 8004db4:	08004f15 	.word	0x08004f15
 8004db8:	08004f5b 	.word	0x08004f5b
 8004dbc:	08004f99 	.word	0x08004f99
 8004dc0:	08004fd7 	.word	0x08004fd7
 8004dc4:	08005015 	.word	0x08005015
 8004dc8:	0800501b 	.word	0x0800501b
 8004dcc:	08004e55 	.word	0x08004e55
 8004dd0:	08004ec9 	.word	0x08004ec9
 8004dd4:	08004ecf 	.word	0x08004ecf
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004ddc:	7bbb      	ldrb	r3, [r7, #14]
 8004dde:	220e      	movs	r2, #14
 8004de0:	f362 0304 	bfi	r3, r2, #0, #5
 8004de4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004de6:	7b7b      	ldrb	r3, [r7, #13]
 8004de8:	2203      	movs	r2, #3
 8004dea:	f362 0303 	bfi	r3, r2, #0, #4
 8004dee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004df0:	7b3b      	ldrb	r3, [r7, #12]
 8004df2:	2203      	movs	r2, #3
 8004df4:	f362 0303 	bfi	r3, r2, #0, #4
 8004df8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004dfa:	7a7b      	ldrb	r3, [r7, #9]
 8004dfc:	220f      	movs	r2, #15
 8004dfe:	f362 0306 	bfi	r3, r2, #0, #7
 8004e02:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	7a3b      	ldrb	r3, [r7, #8]
 8004e0e:	f362 0305 	bfi	r3, r2, #0, #6
 8004e12:	723b      	strb	r3, [r7, #8]
            break;
 8004e14:	e121      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004e1a:	7bbb      	ldrb	r3, [r7, #14]
 8004e1c:	2206      	movs	r2, #6
 8004e1e:	f362 0304 	bfi	r3, r2, #0, #5
 8004e22:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004e24:	7b7b      	ldrb	r3, [r7, #13]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f362 0303 	bfi	r3, r2, #0, #4
 8004e2c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004e2e:	7b3b      	ldrb	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f362 0303 	bfi	r3, r2, #0, #4
 8004e36:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004e38:	7a7b      	ldrb	r3, [r7, #9]
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	f362 0306 	bfi	r3, r2, #0, #7
 8004e40:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	7a3b      	ldrb	r3, [r7, #8]
 8004e4c:	f362 0305 	bfi	r3, r2, #0, #6
 8004e50:	723b      	strb	r3, [r7, #8]
            break;
 8004e52:	e102      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004e58:	7bbb      	ldrb	r3, [r7, #14]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f362 0304 	bfi	r3, r2, #0, #5
 8004e60:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004e62:	7b7b      	ldrb	r3, [r7, #13]
 8004e64:	f36f 0303 	bfc	r3, #0, #4
 8004e68:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004e6a:	7b3b      	ldrb	r3, [r7, #12]
 8004e6c:	f36f 0303 	bfc	r3, #0, #4
 8004e70:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004e72:	7a7b      	ldrb	r3, [r7, #9]
 8004e74:	2203      	movs	r2, #3
 8004e76:	f362 0306 	bfi	r3, r2, #0, #7
 8004e7a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	7a3b      	ldrb	r3, [r7, #8]
 8004e86:	f362 0305 	bfi	r3, r2, #0, #6
 8004e8a:	723b      	strb	r3, [r7, #8]
            break;
 8004e8c:	e0e5      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8004e92:	7bbb      	ldrb	r3, [r7, #14]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f362 0304 	bfi	r3, r2, #0, #5
 8004e9a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004e9c:	7b7b      	ldrb	r3, [r7, #13]
 8004e9e:	f36f 0303 	bfc	r3, #0, #4
 8004ea2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004ea4:	7b3b      	ldrb	r3, [r7, #12]
 8004ea6:	f36f 0303 	bfc	r3, #0, #4
 8004eaa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8004eac:	7a7b      	ldrb	r3, [r7, #9]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f362 0306 	bfi	r3, r2, #0, #7
 8004eb4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	7a3b      	ldrb	r3, [r7, #8]
 8004ec0:	f362 0305 	bfi	r3, r2, #0, #6
 8004ec4:	723b      	strb	r3, [r7, #8]
            break;
 8004ec6:	e0c8      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ecc:	e0e5      	b.n	800509a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>


        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	221e      	movs	r2, #30
 8004ed6:	f362 0304 	bfi	r3, r2, #0, #5
 8004eda:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004edc:	7b7b      	ldrb	r3, [r7, #13]
 8004ede:	2207      	movs	r2, #7
 8004ee0:	f362 0303 	bfi	r3, r2, #0, #4
 8004ee4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004ee6:	7b3b      	ldrb	r3, [r7, #12]
 8004ee8:	2207      	movs	r2, #7
 8004eea:	f362 0303 	bfi	r3, r2, #0, #4
 8004eee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004ef0:	7a7b      	ldrb	r3, [r7, #9]
 8004ef2:	221f      	movs	r2, #31
 8004ef4:	f362 0306 	bfi	r3, r2, #0, #7
 8004ef8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	7a3b      	ldrb	r3, [r7, #8]
 8004f04:	f362 0305 	bfi	r3, r2, #0, #6
 8004f08:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004f0a:	7abb      	ldrb	r3, [r7, #10]
 8004f0c:	f36f 0301 	bfc	r3, #0, #2
 8004f10:	72bb      	strb	r3, [r7, #10]
            break;
 8004f12:	e0a2      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8004f18:	7bbb      	ldrb	r3, [r7, #14]
 8004f1a:	2211      	movs	r2, #17
 8004f1c:	f362 0304 	bfi	r3, r2, #0, #5
 8004f20:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8004f22:	7b7b      	ldrb	r3, [r7, #13]
 8004f24:	2204      	movs	r2, #4
 8004f26:	f362 0303 	bfi	r3, r2, #0, #4
 8004f2a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8004f2c:	7b3b      	ldrb	r3, [r7, #12]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	f362 0303 	bfi	r3, r2, #0, #4
 8004f34:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8004f36:	7a7b      	ldrb	r3, [r7, #9]
 8004f38:	2212      	movs	r2, #18
 8004f3a:	f362 0306 	bfi	r3, r2, #0, #7
 8004f3e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	7a3b      	ldrb	r3, [r7, #8]
 8004f4a:	f362 0305 	bfi	r3, r2, #0, #6
 8004f4e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004f50:	7abb      	ldrb	r3, [r7, #10]
 8004f52:	f36f 0301 	bfc	r3, #0, #2
 8004f56:	72bb      	strb	r3, [r7, #10]
            break;
 8004f58:	e07f      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004f5e:	7bbb      	ldrb	r3, [r7, #14]
 8004f60:	220e      	movs	r2, #14
 8004f62:	f362 0304 	bfi	r3, r2, #0, #5
 8004f66:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004f68:	7b7b      	ldrb	r3, [r7, #13]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	f362 0303 	bfi	r3, r2, #0, #4
 8004f70:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004f72:	7b3b      	ldrb	r3, [r7, #12]
 8004f74:	2203      	movs	r2, #3
 8004f76:	f362 0303 	bfi	r3, r2, #0, #4
 8004f7a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004f7c:	7a7b      	ldrb	r3, [r7, #9]
 8004f7e:	220f      	movs	r2, #15
 8004f80:	f362 0306 	bfi	r3, r2, #0, #7
 8004f84:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	7a3b      	ldrb	r3, [r7, #8]
 8004f90:	f362 0305 	bfi	r3, r2, #0, #6
 8004f94:	723b      	strb	r3, [r7, #8]
            break;
 8004f96:	e060      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004f9c:	7bbb      	ldrb	r3, [r7, #14]
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	f362 0304 	bfi	r3, r2, #0, #5
 8004fa4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004fa6:	7b7b      	ldrb	r3, [r7, #13]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f362 0303 	bfi	r3, r2, #0, #4
 8004fae:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004fb0:	7b3b      	ldrb	r3, [r7, #12]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f362 0303 	bfi	r3, r2, #0, #4
 8004fb8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8004fba:	7a7b      	ldrb	r3, [r7, #9]
 8004fbc:	2209      	movs	r2, #9
 8004fbe:	f362 0306 	bfi	r3, r2, #0, #7
 8004fc2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	7a3b      	ldrb	r3, [r7, #8]
 8004fce:	f362 0305 	bfi	r3, r2, #0, #6
 8004fd2:	723b      	strb	r3, [r7, #8]
            break;
 8004fd4:	e041      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004fda:	7bbb      	ldrb	r3, [r7, #14]
 8004fdc:	2206      	movs	r2, #6
 8004fde:	f362 0304 	bfi	r3, r2, #0, #5
 8004fe2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004fe4:	7b7b      	ldrb	r3, [r7, #13]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f362 0303 	bfi	r3, r2, #0, #4
 8004fec:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004fee:	7b3b      	ldrb	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f362 0303 	bfi	r3, r2, #0, #4
 8004ff6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004ff8:	7a7b      	ldrb	r3, [r7, #9]
 8004ffa:	2207      	movs	r2, #7
 8004ffc:	f362 0306 	bfi	r3, r2, #0, #7
 8005000:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005008:	b2da      	uxtb	r2, r3
 800500a:	7a3b      	ldrb	r3, [r7, #8]
 800500c:	f362 0305 	bfi	r3, r2, #0, #6
 8005010:	723b      	strb	r3, [r7, #8]
            break;
 8005012:	e022      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	e03f      	b.n	800509a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>

        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	2202      	movs	r2, #2
 8005022:	f362 0304 	bfi	r3, r2, #0, #5
 8005026:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8005028:	7b7b      	ldrb	r3, [r7, #13]
 800502a:	f36f 0303 	bfc	r3, #0, #4
 800502e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8005030:	7b3b      	ldrb	r3, [r7, #12]
 8005032:	f36f 0303 	bfc	r3, #0, #4
 8005036:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8005038:	7a7b      	ldrb	r3, [r7, #9]
 800503a:	2203      	movs	r2, #3
 800503c:	f362 0306 	bfi	r3, r2, #0, #7
 8005040:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	b2da      	uxtb	r2, r3
 800504a:	7a3b      	ldrb	r3, [r7, #8]
 800504c:	f362 0305 	bfi	r3, r2, #0, #6
 8005050:	723b      	strb	r3, [r7, #8]
            break;
 8005052:	e002      	b.n	800505a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	e01f      	b.n	800509a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	2108      	movs	r1, #8
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe fb23 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8005066:	4603      	mov	r3, r0
 8005068:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800506a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8005072:	f06f 0301 	mvn.w	r3, #1
 8005076:	e010      	b.n	800509a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	210c      	movs	r1, #12
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fb14 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8005088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8005090:	f06f 0302 	mvn.w	r3, #2
 8005094:	e001      	b.n	800509a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8005096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000010 	.word	0x20000010

080050a8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	460a      	mov	r2, r1
 80050b2:	71fb      	strb	r3, [r7, #7]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80050bc:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x118>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80050c2:	79bb      	ldrb	r3, [r7, #6]
 80050c4:	2b11      	cmp	r3, #17
 80050c6:	d863      	bhi.n	8005190 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe8>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x28>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	08005119 	.word	0x08005119
 80050d4:	08005119 	.word	0x08005119
 80050d8:	08005191 	.word	0x08005191
 80050dc:	08005119 	.word	0x08005119
 80050e0:	08005119 	.word	0x08005119
 80050e4:	08005119 	.word	0x08005119
 80050e8:	08005119 	.word	0x08005119
 80050ec:	08005119 	.word	0x08005119
 80050f0:	08005137 	.word	0x08005137
 80050f4:	08005137 	.word	0x08005137
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005137 	.word	0x08005137
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	08005155 	.word	0x08005155
 8005110:	08005155 	.word	0x08005155
 8005114:	08005173 	.word	0x08005173
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 800511c:	230e      	movs	r3, #14
 800511e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8005120:	7a7b      	ldrb	r3, [r7, #9]
 8005122:	2203      	movs	r2, #3
 8005124:	f362 0306 	bfi	r3, r2, #0, #7
 8005128:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800512a:	7a3b      	ldrb	r3, [r7, #8]
 800512c:	2203      	movs	r2, #3
 800512e:	f362 0306 	bfi	r3, r2, #0, #7
 8005132:	723b      	strb	r3, [r7, #8]
            break;
 8005134:	e02f      	b.n	8005196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800513a:	231e      	movs	r3, #30
 800513c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800513e:	7a7b      	ldrb	r3, [r7, #9]
 8005140:	2207      	movs	r2, #7
 8005142:	f362 0306 	bfi	r3, r2, #0, #7
 8005146:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8005148:	7a3b      	ldrb	r3, [r7, #8]
 800514a:	2207      	movs	r2, #7
 800514c:	f362 0306 	bfi	r3, r2, #0, #7
 8005150:	723b      	strb	r3, [r7, #8]
            break;
 8005152:	e020      	b.n	8005196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8005158:	2307      	movs	r3, #7
 800515a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 800515c:	7a7b      	ldrb	r3, [r7, #9]
 800515e:	2202      	movs	r2, #2
 8005160:	f362 0306 	bfi	r3, r2, #0, #7
 8005164:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8005166:	7a3b      	ldrb	r3, [r7, #8]
 8005168:	2202      	movs	r2, #2
 800516a:	f362 0306 	bfi	r3, r2, #0, #7
 800516e:	723b      	strb	r3, [r7, #8]
            break;
 8005170:	e011      	b.n	8005196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8005176:	233e      	movs	r3, #62	; 0x3e
 8005178:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800517a:	7a7b      	ldrb	r3, [r7, #9]
 800517c:	220f      	movs	r2, #15
 800517e:	f362 0306 	bfi	r3, r2, #0, #7
 8005182:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8005184:	7a3b      	ldrb	r3, [r7, #8]
 8005186:	220f      	movs	r2, #15
 8005188:	f362 0306 	bfi	r3, r2, #0, #7
 800518c:	723b      	strb	r3, [r7, #8]
            break;
 800518e:	e002      	b.n	8005196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        default:
            return -1;
 8005190:	f04f 33ff 	mov.w	r3, #4294967295
 8005194:	e010      	b.n	80051b8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x110>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2104      	movs	r1, #4
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe fa85 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80051a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
        return -2;
 80051ae:	f06f 0301 	mvn.w	r3, #1
 80051b2:	e001      	b.n	80051b8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x110>
    }

    return spiTransferError;
 80051b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000010 	.word	0x20000010

080051c4 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
 80051ce:	460b      	mov	r3, r1
 80051d0:	71bb      	strb	r3, [r7, #6]
 80051d2:	4613      	mov	r3, r2
 80051d4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80051da:	4b92      	ldr	r3, [pc, #584]	; (8005424 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80051e4:	7abb      	ldrb	r3, [r7, #10]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f362 0301 	bfi	r3, r2, #0, #2
 80051ec:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	2b11      	cmp	r3, #17
 80051f6:	f200 80ee 	bhi.w	80053d6 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005249 	.word	0x08005249
 8005204:	08005287 	.word	0x08005287
 8005208:	080053d7 	.word	0x080053d7
 800520c:	080052c1 	.word	0x080052c1
 8005210:	080052c1 	.word	0x080052c1
 8005214:	080052c1 	.word	0x080052c1
 8005218:	080052c1 	.word	0x080052c1
 800521c:	080052c1 	.word	0x080052c1
 8005220:	080052c7 	.word	0x080052c7
 8005224:	0800530d 	.word	0x0800530d
 8005228:	08005353 	.word	0x08005353
 800522c:	08005391 	.word	0x08005391
 8005230:	08005397 	.word	0x08005397
 8005234:	080053d1 	.word	0x080053d1
 8005238:	080053d1 	.word	0x080053d1
 800523c:	080052c1 	.word	0x080052c1
 8005240:	080052c1 	.word	0x080052c1
 8005244:	080052c7 	.word	0x080052c7
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	2206      	movs	r2, #6
 8005250:	f362 0304 	bfi	r3, r2, #0, #5
 8005254:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	2201      	movs	r2, #1
 800525a:	f362 0303 	bfi	r3, r2, #0, #4
 800525e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8005260:	7b3b      	ldrb	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	f362 0303 	bfi	r3, r2, #0, #4
 8005268:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800526a:	7a7b      	ldrb	r3, [r7, #9]
 800526c:	2207      	movs	r2, #7
 800526e:	f362 0306 	bfi	r3, r2, #0, #7
 8005272:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800527a:	b2da      	uxtb	r2, r3
 800527c:	7a3b      	ldrb	r3, [r7, #8]
 800527e:	f362 0305 	bfi	r3, r2, #0, #6
 8005282:	723b      	strb	r3, [r7, #8]
            break;
 8005284:	e0aa      	b.n	80053dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	2202      	movs	r2, #2
 800528e:	f362 0304 	bfi	r3, r2, #0, #5
 8005292:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8005294:	7b7b      	ldrb	r3, [r7, #13]
 8005296:	f36f 0303 	bfc	r3, #0, #4
 800529a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800529c:	7b3b      	ldrb	r3, [r7, #12]
 800529e:	f36f 0303 	bfc	r3, #0, #4
 80052a2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80052a4:	7a7b      	ldrb	r3, [r7, #9]
 80052a6:	2203      	movs	r2, #3
 80052a8:	f362 0306 	bfi	r3, r2, #0, #7
 80052ac:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	7a3b      	ldrb	r3, [r7, #8]
 80052b8:	f362 0305 	bfi	r3, r2, #0, #6
 80052bc:	723b      	strb	r3, [r7, #8]
            break;
 80052be:	e08d      	b.n	80053dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	e0aa      	b.n	800541c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>


        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	220e      	movs	r2, #14
 80052ce:	f362 0304 	bfi	r3, r2, #0, #5
 80052d2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80052d4:	7b7b      	ldrb	r3, [r7, #13]
 80052d6:	2203      	movs	r2, #3
 80052d8:	f362 0303 	bfi	r3, r2, #0, #4
 80052dc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80052de:	7b3b      	ldrb	r3, [r7, #12]
 80052e0:	2203      	movs	r2, #3
 80052e2:	f362 0303 	bfi	r3, r2, #0, #4
 80052e6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80052e8:	7a7b      	ldrb	r3, [r7, #9]
 80052ea:	220f      	movs	r2, #15
 80052ec:	f362 0306 	bfi	r3, r2, #0, #7
 80052f0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	7a3b      	ldrb	r3, [r7, #8]
 80052fc:	f362 0305 	bfi	r3, r2, #0, #6
 8005300:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8005302:	7abb      	ldrb	r3, [r7, #10]
 8005304:	f36f 0301 	bfc	r3, #0, #2
 8005308:	72bb      	strb	r3, [r7, #10]
            break;
 800530a:	e067      	b.n	80053dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	2207      	movs	r2, #7
 8005314:	f362 0304 	bfi	r3, r2, #0, #5
 8005318:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800531a:	7b7b      	ldrb	r3, [r7, #13]
 800531c:	2202      	movs	r2, #2
 800531e:	f362 0303 	bfi	r3, r2, #0, #4
 8005322:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8005324:	7b3b      	ldrb	r3, [r7, #12]
 8005326:	2202      	movs	r2, #2
 8005328:	f362 0303 	bfi	r3, r2, #0, #4
 800532c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 800532e:	7a7b      	ldrb	r3, [r7, #9]
 8005330:	2208      	movs	r2, #8
 8005332:	f362 0306 	bfi	r3, r2, #0, #7
 8005336:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533e:	b2da      	uxtb	r2, r3
 8005340:	7a3b      	ldrb	r3, [r7, #8]
 8005342:	f362 0305 	bfi	r3, r2, #0, #6
 8005346:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8005348:	7abb      	ldrb	r3, [r7, #10]
 800534a:	f36f 0301 	bfc	r3, #0, #2
 800534e:	72bb      	strb	r3, [r7, #10]
            break;
 8005350:	e044      	b.n	80053dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8005356:	7bbb      	ldrb	r3, [r7, #14]
 8005358:	2206      	movs	r2, #6
 800535a:	f362 0304 	bfi	r3, r2, #0, #5
 800535e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8005360:	7b7b      	ldrb	r3, [r7, #13]
 8005362:	2201      	movs	r2, #1
 8005364:	f362 0303 	bfi	r3, r2, #0, #4
 8005368:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800536a:	7b3b      	ldrb	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f362 0303 	bfi	r3, r2, #0, #4
 8005372:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8005374:	7a7b      	ldrb	r3, [r7, #9]
 8005376:	2207      	movs	r2, #7
 8005378:	f362 0306 	bfi	r3, r2, #0, #7
 800537c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005384:	b2da      	uxtb	r2, r3
 8005386:	7a3b      	ldrb	r3, [r7, #8]
 8005388:	f362 0305 	bfi	r3, r2, #0, #6
 800538c:	723b      	strb	r3, [r7, #8]
            break;
 800538e:	e025      	b.n	80053dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	e042      	b.n	800541c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>

        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	2202      	movs	r2, #2
 800539e:	f362 0304 	bfi	r3, r2, #0, #5
 80053a2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80053a4:	7b7b      	ldrb	r3, [r7, #13]
 80053a6:	f36f 0303 	bfc	r3, #0, #4
 80053aa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80053ac:	7b3b      	ldrb	r3, [r7, #12]
 80053ae:	f36f 0303 	bfc	r3, #0, #4
 80053b2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80053b4:	7a7b      	ldrb	r3, [r7, #9]
 80053b6:	2203      	movs	r2, #3
 80053b8:	f362 0306 	bfi	r3, r2, #0, #7
 80053bc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	7a3b      	ldrb	r3, [r7, #8]
 80053c8:	f362 0305 	bfi	r3, r2, #0, #6
 80053cc:	723b      	strb	r3, [r7, #8]
            break;
 80053ce:	e005      	b.n	80053dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295
 80053d4:	e022      	b.n	800541c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>


        default:
            return -1;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	e01f      	b.n	800541c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	2108      	movs	r1, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe f962 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80053ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80053f4:	f06f 0301 	mvn.w	r3, #1
 80053f8:	e010      	b.n	800541c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	210c      	movs	r1, #12
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe f953 	bl	80036ac <DRV_CANFDSPI_WriteWord>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800540a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8005412:	f06f 0302 	mvn.w	r3, #2
 8005416:	e001      	b.n	800541c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8005418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000010 	.word	0x20000010

08005428 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
	
//    Nop();
//    Nop();

    if (dlc < CAN_DLC_12) {
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d802      	bhi.n	8005442 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e02a      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	3b09      	subs	r3, #9
 8005446:	2b06      	cmp	r3, #6
 8005448:	d825      	bhi.n	8005496 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	0800546d 	.word	0x0800546d
 8005454:	08005473 	.word	0x08005473
 8005458:	08005479 	.word	0x08005479
 800545c:	0800547f 	.word	0x0800547f
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548b 	.word	0x0800548b
 8005468:	08005491 	.word	0x08005491
            case CAN_DLC_12:
                dataBytesInObject = 12;
 800546c:	230c      	movs	r3, #12
 800546e:	60fb      	str	r3, [r7, #12]
                break;
 8005470:	e012      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8005472:	2310      	movs	r3, #16
 8005474:	60fb      	str	r3, [r7, #12]
                break;
 8005476:	e00f      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8005478:	2314      	movs	r3, #20
 800547a:	60fb      	str	r3, [r7, #12]
                break;
 800547c:	e00c      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800547e:	2318      	movs	r3, #24
 8005480:	60fb      	str	r3, [r7, #12]
                break;
 8005482:	e009      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8005484:	2320      	movs	r3, #32
 8005486:	60fb      	str	r3, [r7, #12]
                break;
 8005488:	e006      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 800548a:	2330      	movs	r3, #48	; 0x30
 800548c:	60fb      	str	r3, [r7, #12]
                break;
 800548e:	e003      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	60fb      	str	r3, [r7, #12]
                break;
 8005494:	e000      	b.n	8005498 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8005496:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8005498:	68fb      	ldr	r3, [r7, #12]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <CANFDSPI_Init>:
uint8_t tec;
uint8_t rec;
CAN_ERROR_STATE errorFlags;

void CANFDSPI_Init( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0

    /**************************************************************************/
    // MCP2518FD 1#
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 80054ac:	2000      	movs	r0, #0
 80054ae:	f7fe f875 	bl	800359c <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 80054b2:	2000      	movs	r0, #0
 80054b4:	f7ff f81b 	bl	80044ee <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 80054b8:	21ff      	movs	r1, #255	; 0xff
 80054ba:	2000      	movs	r0, #0
 80054bc:	f7ff f84b 	bl	8004556 <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 80054c0:	4857      	ldr	r0, [pc, #348]	; (8005620 <CANFDSPI_Init+0x178>)
 80054c2:	f7fe fac7 	bl	8003a54 <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 80054c6:	4a56      	ldr	r2, [pc, #344]	; (8005620 <CANFDSPI_Init+0x178>)
 80054c8:	7813      	ldrb	r3, [r2, #0]
 80054ca:	f043 0320 	orr.w	r3, r3, #32
 80054ce:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 80054d0:	4a53      	ldr	r2, [pc, #332]	; (8005620 <CANFDSPI_Init+0x178>)
 80054d2:	7853      	ldrb	r3, [r2, #1]
 80054d4:	f36f 1386 	bfc	r3, #6, #1
 80054d8:	7053      	strb	r3, [r2, #1]
    config.TXQEnable = 0;
 80054da:	4a51      	ldr	r2, [pc, #324]	; (8005620 <CANFDSPI_Init+0x178>)
 80054dc:	7853      	ldrb	r3, [r2, #1]
 80054de:	f36f 13c7 	bfc	r3, #7, #1
 80054e2:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 80054e4:	494e      	ldr	r1, [pc, #312]	; (8005620 <CANFDSPI_Init+0x178>)
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7fe fa26 	bl	8003938 <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 80054ec:	484d      	ldr	r0, [pc, #308]	; (8005624 <CANFDSPI_Init+0x17c>)
 80054ee:	f7fe fbc3 	bl	8003c78 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 80054f2:	4a4c      	ldr	r2, [pc, #304]	; (8005624 <CANFDSPI_Init+0x17c>)
 80054f4:	7853      	ldrb	r3, [r2, #1]
 80054f6:	2107      	movs	r1, #7
 80054f8:	f361 0304 	bfi	r3, r1, #0, #5
 80054fc:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 80054fe:	4a49      	ldr	r2, [pc, #292]	; (8005624 <CANFDSPI_Init+0x17c>)
 8005500:	7853      	ldrb	r3, [r2, #1]
 8005502:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005506:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 8005508:	4a46      	ldr	r2, [pc, #280]	; (8005624 <CANFDSPI_Init+0x17c>)
 800550a:	7813      	ldrb	r3, [r2, #0]
 800550c:	2101      	movs	r1, #1
 800550e:	f361 0345 	bfi	r3, r1, #1, #5
 8005512:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 8005514:	4a43      	ldr	r2, [pc, #268]	; (8005624 <CANFDSPI_Init+0x17c>)
 8005516:	2102      	movs	r1, #2
 8005518:	2000      	movs	r0, #0
 800551a:	f7fe fb53 	bl	8003bc4 <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_5M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 800551e:	2300      	movs	r3, #0
 8005520:	2202      	movs	r2, #2
 8005522:	2104      	movs	r1, #4
 8005524:	2000      	movs	r0, #0
 8005526:	f7ff f85a 	bl	80045de <DRV_CANFDSPI_BitTimeConfigure>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 800552a:	2100      	movs	r1, #0
 800552c:	2000      	movs	r0, #0
 800552e:	f7fe fb0d 	bl	8003b4c <DRV_CANFDSPI_OperationModeSelect>

//    STBY_0_Clear();
    /**************************************************************************/
    // MCP2518FD 2#
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_1);
 8005532:	2001      	movs	r0, #1
 8005534:	f7fe f832 	bl	800359c <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_1);
 8005538:	2001      	movs	r0, #1
 800553a:	f7fe ffd8 	bl	80044ee <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_1, 0xff);
 800553e:	21ff      	movs	r1, #255	; 0xff
 8005540:	2001      	movs	r0, #1
 8005542:	f7ff f808 	bl	8004556 <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8005546:	4836      	ldr	r0, [pc, #216]	; (8005620 <CANFDSPI_Init+0x178>)
 8005548:	f7fe fa84 	bl	8003a54 <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 800554c:	4a34      	ldr	r2, [pc, #208]	; (8005620 <CANFDSPI_Init+0x178>)
 800554e:	7813      	ldrb	r3, [r2, #0]
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 8005556:	4a32      	ldr	r2, [pc, #200]	; (8005620 <CANFDSPI_Init+0x178>)
 8005558:	7853      	ldrb	r3, [r2, #1]
 800555a:	f36f 1386 	bfc	r3, #6, #1
 800555e:	7053      	strb	r3, [r2, #1]
    config.TXQEnable = 0;
 8005560:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <CANFDSPI_Init+0x178>)
 8005562:	7853      	ldrb	r3, [r2, #1]
 8005564:	f36f 13c7 	bfc	r3, #7, #1
 8005568:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_1, &config);
 800556a:	492d      	ldr	r1, [pc, #180]	; (8005620 <CANFDSPI_Init+0x178>)
 800556c:	2001      	movs	r0, #1
 800556e:	f7fe f9e3 	bl	8003938 <DRV_CANFDSPI_Configure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8005572:	482d      	ldr	r0, [pc, #180]	; (8005628 <CANFDSPI_Init+0x180>)
 8005574:	f7fe fdb2 	bl	80040dc <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 8005578:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <CANFDSPI_Init+0x180>)
 800557a:	7813      	ldrb	r3, [r2, #0]
 800557c:	210f      	movs	r1, #15
 800557e:	f361 0345 	bfi	r3, r1, #1, #5
 8005582:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <CANFDSPI_Init+0x180>)
 8005586:	8813      	ldrh	r3, [r2, #0]
 8005588:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800558c:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, &rxConfig);
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <CANFDSPI_Init+0x180>)
 8005590:	2101      	movs	r1, #1
 8005592:	2001      	movs	r0, #1
 8005594:	f7fe fd54 	bl	8004040 <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <CANFDSPI_Init+0x184>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
    fObj.bF.SID = 0x300;
 800559e:	4a23      	ldr	r2, [pc, #140]	; (800562c <CANFDSPI_Init+0x184>)
 80055a0:	8813      	ldrh	r3, [r2, #0]
 80055a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055a6:	f361 030a 	bfi	r3, r1, #0, #11
 80055aa:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 80055ac:	4a1f      	ldr	r2, [pc, #124]	; (800562c <CANFDSPI_Init+0x184>)
 80055ae:	78d3      	ldrb	r3, [r2, #3]
 80055b0:	f36f 1386 	bfc	r3, #6, #1
 80055b4:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 80055b6:	4a1d      	ldr	r2, [pc, #116]	; (800562c <CANFDSPI_Init+0x184>)
 80055b8:	6813      	ldr	r3, [r2, #0]
 80055ba:	f36f 23dc 	bfc	r3, #11, #18
 80055be:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_1, CAN_FILTER0, &fObj.bF);
 80055c0:	4a1a      	ldr	r2, [pc, #104]	; (800562c <CANFDSPI_Init+0x184>)
 80055c2:	2100      	movs	r1, #0
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fe fcbd 	bl	8003f44 <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 80055ca:	4b19      	ldr	r3, [pc, #100]	; (8005630 <CANFDSPI_Init+0x188>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x7F8;
 80055d0:	4a17      	ldr	r2, [pc, #92]	; (8005630 <CANFDSPI_Init+0x188>)
 80055d2:	8813      	ldrh	r3, [r2, #0]
 80055d4:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80055d8:	f361 030a 	bfi	r3, r1, #0, #11
 80055dc:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 1; // Only allow standard IDs
 80055de:	4a14      	ldr	r2, [pc, #80]	; (8005630 <CANFDSPI_Init+0x188>)
 80055e0:	78d3      	ldrb	r3, [r2, #3]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e6:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 80055e8:	4a11      	ldr	r2, [pc, #68]	; (8005630 <CANFDSPI_Init+0x188>)
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	f36f 23dc 	bfc	r3, #11, #18
 80055f0:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_1, CAN_FILTER0, &mObj.bF);
 80055f2:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <CANFDSPI_Init+0x188>)
 80055f4:	2100      	movs	r1, #0
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7fe fcc6 	bl	8003f88 <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_1, CAN_FILTER0, APP_RX_FIFO, true);
 80055fc:	2301      	movs	r3, #1
 80055fe:	2201      	movs	r2, #1
 8005600:	2100      	movs	r1, #0
 8005602:	2001      	movs	r0, #1
 8005604:	f7fe fce4 	bl	8003fd0 <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_1, CAN_500K_5M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8005608:	2300      	movs	r3, #0
 800560a:	2202      	movs	r2, #2
 800560c:	2104      	movs	r1, #4
 800560e:	2001      	movs	r0, #1
 8005610:	f7fe ffe5 	bl	80045de <DRV_CANFDSPI_BitTimeConfigure>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_1, CAN_NORMAL_MODE);
 8005614:	2100      	movs	r1, #0
 8005616:	2001      	movs	r0, #1
 8005618:	f7fe fa98 	bl	8003b4c <DRV_CANFDSPI_OperationModeSelect>

//    STBY_1_Clear();
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200003c8 	.word	0x200003c8
 8005624:	200003cc 	.word	0x200003cc
 8005628:	20000420 	.word	0x20000420
 800562c:	20000424 	.word	0x20000424
 8005630:	20000428 	.word	0x20000428

08005634 <DRV_SPI_ChipSelectAssert>:
  * @param  spiSlaveDeviceIndex: ��·SPIѡ��Ҫ����оƬ�ͺ����жϿɳ���·
  * @param  assert: �Ƿ�ѡ��ģ�顣true�������ͣ�false��������
  * @retval -1����Ƭѡʧ�ܣ�0����Ƭѡ���
  */
int8_t DRV_SPI_ChipSelectAssert(uint8_t spiSlaveDeviceIndex, bool assert)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	460a      	mov	r2, r1
 800563e:	71fb      	strb	r3, [r7, #7]
 8005640:	4613      	mov	r3, r2
 8005642:	71bb      	strb	r3, [r7, #6]
    int8_t error = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]

    // Select Chip Select
    switch (spiSlaveDeviceIndex) {
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <DRV_SPI_ChipSelectAssert+0x20>
 800564e:	2b01      	cmp	r3, #1
 8005650:	d00f      	beq.n	8005672 <DRV_SPI_ChipSelectAssert+0x3e>
 8005652:	e01f      	b.n	8005694 <DRV_SPI_ChipSelectAssert+0x60>
        case DRV_CANFDSPI_INDEX_0:
            if (assert)
 8005654:	79bb      	ldrb	r3, [r7, #6]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <DRV_SPI_ChipSelectAssert+0x32>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800565a:	2200      	movs	r2, #0
 800565c:	2110      	movs	r1, #16
 800565e:	4812      	ldr	r0, [pc, #72]	; (80056a8 <DRV_SPI_ChipSelectAssert+0x74>)
 8005660:	f7fc f890 	bl	8001784 <HAL_GPIO_WritePin>
            else
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
            break;
 8005664:	e019      	b.n	800569a <DRV_SPI_ChipSelectAssert+0x66>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005666:	2201      	movs	r2, #1
 8005668:	2110      	movs	r1, #16
 800566a:	480f      	ldr	r0, [pc, #60]	; (80056a8 <DRV_SPI_ChipSelectAssert+0x74>)
 800566c:	f7fc f88a 	bl	8001784 <HAL_GPIO_WritePin>
            break;
 8005670:	e013      	b.n	800569a <DRV_SPI_ChipSelectAssert+0x66>
        case DRV_CANFDSPI_INDEX_1:
			if (assert)
 8005672:	79bb      	ldrb	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d006      	beq.n	8005686 <DRV_SPI_ChipSelectAssert+0x52>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8005678:	2200      	movs	r2, #0
 800567a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800567e:	480b      	ldr	r0, [pc, #44]	; (80056ac <DRV_SPI_ChipSelectAssert+0x78>)
 8005680:	f7fc f880 	bl	8001784 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
			break;
 8005684:	e009      	b.n	800569a <DRV_SPI_ChipSelectAssert+0x66>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8005686:	2201      	movs	r2, #1
 8005688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800568c:	4807      	ldr	r0, [pc, #28]	; (80056ac <DRV_SPI_ChipSelectAssert+0x78>)
 800568e:	f7fc f879 	bl	8001784 <HAL_GPIO_WritePin>
			break;
 8005692:	e002      	b.n	800569a <DRV_SPI_ChipSelectAssert+0x66>
        default:
            error = -1;
 8005694:	23ff      	movs	r3, #255	; 0xff
 8005696:	73fb      	strb	r3, [r7, #15]
            break;
 8005698:	bf00      	nop
    }
    return error;
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40020000 	.word	0x40020000
 80056ac:	40020400 	.word	0x40020400

080056b0 <DRV_SPI_TransferData>:
  * @param  SpiRxData: ���յ�����
  * @param  spiTransferSize: �������ݵĳ���
  * @retval Ƭѡ�ź�״̬  -1����Ƭѡʧ�ܣ�0����Ƭѡ�ɹ�
  */
int8_t DRV_SPI_TransferData(uint8_t spiSlaveDeviceIndex, uint8_t *SpiTxData, uint8_t *SpiRxData, uint16_t spiTransferSize)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	461a      	mov	r2, r3
 80056bc:	4603      	mov	r3, r0
 80056be:	73fb      	strb	r3, [r7, #15]
 80056c0:	4613      	mov	r3, r2
 80056c2:	81bb      	strh	r3, [r7, #12]
    int8_t error = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	75fb      	strb	r3, [r7, #23]
    // Assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, true);
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	2101      	movs	r1, #1
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ffb1 	bl	8005634 <DRV_SPI_ChipSelectAssert>
 80056d2:	4603      	mov	r3, r0
 80056d4:	75fb      	strb	r3, [r7, #23]
    if (error != 0)
 80056d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <DRV_SPI_TransferData+0x34>
        return error;
 80056de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056e2:	e016      	b.n	8005712 <DRV_SPI_TransferData+0x62>

    switch (spiSlaveDeviceIndex){
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <DRV_SPI_TransferData+0x4e>
        case DRV_CANFDSPI_INDEX_0:
            HAL_SPI_TransmitReceive(&hspi1,SpiTxData,SpiRxData,spiTransferSize,1000);
 80056ea:	89bb      	ldrh	r3, [r7, #12]
 80056ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f0:	9200      	str	r2, [sp, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4809      	ldr	r0, [pc, #36]	; (800571c <DRV_SPI_TransferData+0x6c>)
 80056f8:	f7fc fd49 	bl	800218e <HAL_SPI_TransmitReceive>
            break;
 80056fc:	e000      	b.n	8005700 <DRV_SPI_TransferData+0x50>
        default:
            break;
 80056fe:	bf00      	nop
    }
    // De�\assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, false);
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff95 	bl	8005634 <DRV_SPI_ChipSelectAssert>
 800570a:	4603      	mov	r3, r0
 800570c:	75fb      	strb	r3, [r7, #23]

    return error;
 800570e:	f997 3017 	ldrsb.w	r3, [r7, #23]
} 
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000144 	.word	0x20000144

08005720 <mcp2518fd_transmit>:

CAN_TX_MSGOBJ txObj;
uint8_t flag_transmit = 0;
//CAN_TX_MSGOBJ txObj;
uint8_t txd[MAX_DATA_BYTES];
void mcp2518fd_transmit(void) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af02      	add	r7, sp, #8
//	uint8_t attempts = 50;
	uint8_t n;
	int16_t i;
	bool flush = true;
 8005726:	2301      	movs	r3, #1
 8005728:	717b      	strb	r3, [r7, #5]
	static uint16_t messageID_add = 0;

    /**********************Prepare Data****************************************/
//    Nop();
//    Nop();
    txObj.bF.id.SID = 0x300 + ((messageID_add++) & 0xF);
 800572a:	4b38      	ldr	r3, [pc, #224]	; (800580c <mcp2518fd_transmit+0xec>)
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	b291      	uxth	r1, r2
 8005732:	4a36      	ldr	r2, [pc, #216]	; (800580c <mcp2518fd_transmit+0xec>)
 8005734:	8011      	strh	r1, [r2, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	b29b      	uxth	r3, r3
 800573c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005740:	b29b      	uxth	r3, r3
 8005742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005746:	b299      	uxth	r1, r3
 8005748:	4a31      	ldr	r2, [pc, #196]	; (8005810 <mcp2518fd_transmit+0xf0>)
 800574a:	8813      	ldrh	r3, [r2, #0]
 800574c:	f361 030a 	bfi	r3, r1, #0, #11
 8005750:	8013      	strh	r3, [r2, #0]

    txObj.bF.ctrl.DLC = CAN_DLC_64;
 8005752:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <mcp2518fd_transmit+0xf0>)
 8005754:	7913      	ldrb	r3, [r2, #4]
 8005756:	f043 030f 	orr.w	r3, r3, #15
 800575a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 0; //0: standard frame | 1: extended frame
 800575c:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <mcp2518fd_transmit+0xf0>)
 800575e:	7913      	ldrb	r3, [r2, #4]
 8005760:	f36f 1304 	bfc	r3, #4, #1
 8005764:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.BRS = 1; //switch bit rate
 8005766:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <mcp2518fd_transmit+0xf0>)
 8005768:	7913      	ldrb	r3, [r2, #4]
 800576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 1; //1: CAN FD frame | 0: CAN frame
 8005770:	4a27      	ldr	r2, [pc, #156]	; (8005810 <mcp2518fd_transmit+0xf0>)
 8005772:	7913      	ldrb	r3, [r2, #4]
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	7113      	strb	r3, [r2, #4]

    n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj.bF.ctrl.DLC);
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <mcp2518fd_transmit+0xf0>)
 800577c:	791b      	ldrb	r3, [r3, #4]
 800577e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fe4f 	bl	8005428 <DRV_CANFDSPI_DlcToDataBytes>
 800578a:	4603      	mov	r3, r0
 800578c:	713b      	strb	r3, [r7, #4]
    //create random data with size of buffer = size of DLC
    for (i = 0; i < 2; i++)
 800578e:	2300      	movs	r3, #0
 8005790:	80fb      	strh	r3, [r7, #6]
 8005792:	e00d      	b.n	80057b0 <mcp2518fd_transmit+0x90>
    {
        txd[i] = rand() & 0xff;
 8005794:	f000 f876 	bl	8005884 <rand>
 8005798:	4602      	mov	r2, r0
 800579a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800579e:	b2d1      	uxtb	r1, r2
 80057a0:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <mcp2518fd_transmit+0xf4>)
 80057a2:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++)
 80057a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3301      	adds	r3, #1
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	80fb      	strh	r3, [r7, #6]
 80057b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	dded      	ble.n	8005794 <mcp2518fd_transmit+0x74>
    }

    DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <mcp2518fd_transmit+0xf8>)
 80057ba:	2102      	movs	r1, #2
 80057bc:	2000      	movs	r0, #0
 80057be:	f7fe fe2a 	bl	8004416 <DRV_CANFDSPI_TransmitChannelEventGet>

    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)); //WAIT
 80057c2:	bf00      	nop
 80057c4:	4b14      	ldr	r3, [pc, #80]	; (8005818 <mcp2518fd_transmit+0xf8>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f9      	beq.n	80057c4 <mcp2518fd_transmit+0xa4>

//    if (txFlags & CAN_TX_FIFO_NOT_FULL_EVENT) {
	DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, flush);
 80057d0:	793b      	ldrb	r3, [r7, #4]
 80057d2:	797a      	ldrb	r2, [r7, #5]
 80057d4:	9201      	str	r2, [sp, #4]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <mcp2518fd_transmit+0xf4>)
 80057da:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <mcp2518fd_transmit+0xf0>)
 80057dc:	2102      	movs	r1, #2
 80057de:	2000      	movs	r0, #0
 80057e0:	f7fe fa88 	bl	8003cf4 <DRV_CANFDSPI_TransmitChannelLoad>
	printf("\r\n Transmit message's ID = %04x, and txd[0] = %02x", txObj.bF.id.SID, txd[0]);
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <mcp2518fd_transmit+0xf0>)
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	4619      	mov	r1, r3
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <mcp2518fd_transmit+0xf4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	4809      	ldr	r0, [pc, #36]	; (800581c <mcp2518fd_transmit+0xfc>)
 80057f8:	f000 f932 	bl	8005a60 <iprintf>
	flag_transmit = 1;
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <mcp2518fd_transmit+0x100>)
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
//    }
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000047e 	.word	0x2000047e
 8005810:	200003d4 	.word	0x200003d4
 8005814:	200003e0 	.word	0x200003e0
 8005818:	200003d0 	.word	0x200003d0
 800581c:	08006950 	.word	0x08006950
 8005820:	2000047c 	.word	0x2000047c

08005824 <mcp2518fd_receive>:

void mcp2518fd_receive(void) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af02      	add	r7, sp, #8
//	DRV_CANFDSPI_2_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
//	if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
		// Get message
	DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, &rxFlags);
 800582a:	4a11      	ldr	r2, [pc, #68]	; (8005870 <mcp2518fd_receive+0x4c>)
 800582c:	2101      	movs	r1, #1
 800582e:	2001      	movs	r0, #1
 8005830:	f7fe fe24 	bl	800447c <DRV_CANFDSPI_ReceiveChannelEventGet>
	if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <mcp2518fd_receive+0x4c>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <mcp2518fd_receive+0x44>
		DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_1, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <mcp2518fd_receive+0x50>)
 8005846:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <mcp2518fd_receive+0x54>)
 8005848:	2101      	movs	r1, #1
 800584a:	2001      	movs	r0, #1
 800584c:	f7fe fc72 	bl	8004134 <DRV_CANFDSPI_ReceiveMessageGet>
		printf("\r\n Receive message's ID = %04x, and rxd[0] = %02x", txObj.bF.id.SID, rxd[0]);
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <mcp2518fd_receive+0x58>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005858:	b29b      	uxth	r3, r3
 800585a:	4619      	mov	r1, r3
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <mcp2518fd_receive+0x50>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	4807      	ldr	r0, [pc, #28]	; (8005880 <mcp2518fd_receive+0x5c>)
 8005864:	f000 f8fc 	bl	8005a60 <iprintf>
//	}
//	rxFlags = CAN_RX_FIFO_NO_EVENT;
	}
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	2000042c 	.word	0x2000042c
 8005874:	2000043c 	.word	0x2000043c
 8005878:	20000430 	.word	0x20000430
 800587c:	200003d4 	.word	0x200003d4
 8005880:	08006984 	.word	0x08006984

08005884 <rand>:
 8005884:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <rand+0x5c>)
 8005886:	b510      	push	{r4, lr}
 8005888:	681c      	ldr	r4, [r3, #0]
 800588a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800588c:	b9b3      	cbnz	r3, 80058bc <rand+0x38>
 800588e:	2018      	movs	r0, #24
 8005890:	f000 fa20 	bl	8005cd4 <malloc>
 8005894:	4602      	mov	r2, r0
 8005896:	6320      	str	r0, [r4, #48]	; 0x30
 8005898:	b920      	cbnz	r0, 80058a4 <rand+0x20>
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <rand+0x60>)
 800589c:	4812      	ldr	r0, [pc, #72]	; (80058e8 <rand+0x64>)
 800589e:	2152      	movs	r1, #82	; 0x52
 80058a0:	f000 f9ae 	bl	8005c00 <__assert_func>
 80058a4:	4911      	ldr	r1, [pc, #68]	; (80058ec <rand+0x68>)
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <rand+0x6c>)
 80058a8:	e9c0 1300 	strd	r1, r3, [r0]
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <rand+0x70>)
 80058ae:	6083      	str	r3, [r0, #8]
 80058b0:	230b      	movs	r3, #11
 80058b2:	8183      	strh	r3, [r0, #12]
 80058b4:	2100      	movs	r1, #0
 80058b6:	2001      	movs	r0, #1
 80058b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80058bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80058be:	480e      	ldr	r0, [pc, #56]	; (80058f8 <rand+0x74>)
 80058c0:	690b      	ldr	r3, [r1, #16]
 80058c2:	694c      	ldr	r4, [r1, #20]
 80058c4:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <rand+0x78>)
 80058c6:	4358      	muls	r0, r3
 80058c8:	fb02 0004 	mla	r0, r2, r4, r0
 80058cc:	fba3 3202 	umull	r3, r2, r3, r2
 80058d0:	3301      	adds	r3, #1
 80058d2:	eb40 0002 	adc.w	r0, r0, r2
 80058d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80058da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80058de:	bd10      	pop	{r4, pc}
 80058e0:	200000b8 	.word	0x200000b8
 80058e4:	080069c8 	.word	0x080069c8
 80058e8:	080069df 	.word	0x080069df
 80058ec:	abcd330e 	.word	0xabcd330e
 80058f0:	e66d1234 	.word	0xe66d1234
 80058f4:	0005deec 	.word	0x0005deec
 80058f8:	5851f42d 	.word	0x5851f42d
 80058fc:	4c957f2d 	.word	0x4c957f2d

08005900 <std>:
 8005900:	2300      	movs	r3, #0
 8005902:	b510      	push	{r4, lr}
 8005904:	4604      	mov	r4, r0
 8005906:	e9c0 3300 	strd	r3, r3, [r0]
 800590a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800590e:	6083      	str	r3, [r0, #8]
 8005910:	8181      	strh	r1, [r0, #12]
 8005912:	6643      	str	r3, [r0, #100]	; 0x64
 8005914:	81c2      	strh	r2, [r0, #14]
 8005916:	6183      	str	r3, [r0, #24]
 8005918:	4619      	mov	r1, r3
 800591a:	2208      	movs	r2, #8
 800591c:	305c      	adds	r0, #92	; 0x5c
 800591e:	f000 f8f4 	bl	8005b0a <memset>
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <std+0x38>)
 8005924:	6263      	str	r3, [r4, #36]	; 0x24
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <std+0x3c>)
 8005928:	62a3      	str	r3, [r4, #40]	; 0x28
 800592a:	4b05      	ldr	r3, [pc, #20]	; (8005940 <std+0x40>)
 800592c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <std+0x44>)
 8005930:	6224      	str	r4, [r4, #32]
 8005932:	6323      	str	r3, [r4, #48]	; 0x30
 8005934:	bd10      	pop	{r4, pc}
 8005936:	bf00      	nop
 8005938:	08005a85 	.word	0x08005a85
 800593c:	08005aa7 	.word	0x08005aa7
 8005940:	08005adf 	.word	0x08005adf
 8005944:	08005b03 	.word	0x08005b03

08005948 <stdio_exit_handler>:
 8005948:	4a02      	ldr	r2, [pc, #8]	; (8005954 <stdio_exit_handler+0xc>)
 800594a:	4903      	ldr	r1, [pc, #12]	; (8005958 <stdio_exit_handler+0x10>)
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <stdio_exit_handler+0x14>)
 800594e:	f000 b869 	b.w	8005a24 <_fwalk_sglue>
 8005952:	bf00      	nop
 8005954:	20000060 	.word	0x20000060
 8005958:	080064f1 	.word	0x080064f1
 800595c:	2000006c 	.word	0x2000006c

08005960 <cleanup_stdio>:
 8005960:	6841      	ldr	r1, [r0, #4]
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <cleanup_stdio+0x34>)
 8005964:	4299      	cmp	r1, r3
 8005966:	b510      	push	{r4, lr}
 8005968:	4604      	mov	r4, r0
 800596a:	d001      	beq.n	8005970 <cleanup_stdio+0x10>
 800596c:	f000 fdc0 	bl	80064f0 <_fflush_r>
 8005970:	68a1      	ldr	r1, [r4, #8]
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <cleanup_stdio+0x38>)
 8005974:	4299      	cmp	r1, r3
 8005976:	d002      	beq.n	800597e <cleanup_stdio+0x1e>
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fdb9 	bl	80064f0 <_fflush_r>
 800597e:	68e1      	ldr	r1, [r4, #12]
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <cleanup_stdio+0x3c>)
 8005982:	4299      	cmp	r1, r3
 8005984:	d004      	beq.n	8005990 <cleanup_stdio+0x30>
 8005986:	4620      	mov	r0, r4
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598c:	f000 bdb0 	b.w	80064f0 <_fflush_r>
 8005990:	bd10      	pop	{r4, pc}
 8005992:	bf00      	nop
 8005994:	20000480 	.word	0x20000480
 8005998:	200004e8 	.word	0x200004e8
 800599c:	20000550 	.word	0x20000550

080059a0 <global_stdio_init.part.0>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <global_stdio_init.part.0+0x30>)
 80059a4:	4c0b      	ldr	r4, [pc, #44]	; (80059d4 <global_stdio_init.part.0+0x34>)
 80059a6:	4a0c      	ldr	r2, [pc, #48]	; (80059d8 <global_stdio_init.part.0+0x38>)
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	4620      	mov	r0, r4
 80059ac:	2200      	movs	r2, #0
 80059ae:	2104      	movs	r1, #4
 80059b0:	f7ff ffa6 	bl	8005900 <std>
 80059b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80059b8:	2201      	movs	r2, #1
 80059ba:	2109      	movs	r1, #9
 80059bc:	f7ff ffa0 	bl	8005900 <std>
 80059c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80059c4:	2202      	movs	r2, #2
 80059c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ca:	2112      	movs	r1, #18
 80059cc:	f7ff bf98 	b.w	8005900 <std>
 80059d0:	200005b8 	.word	0x200005b8
 80059d4:	20000480 	.word	0x20000480
 80059d8:	08005949 	.word	0x08005949

080059dc <__sfp_lock_acquire>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sfp_lock_acquire+0x8>)
 80059de:	f000 b90d 	b.w	8005bfc <__retarget_lock_acquire_recursive>
 80059e2:	bf00      	nop
 80059e4:	200005c1 	.word	0x200005c1

080059e8 <__sfp_lock_release>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__sfp_lock_release+0x8>)
 80059ea:	f000 b908 	b.w	8005bfe <__retarget_lock_release_recursive>
 80059ee:	bf00      	nop
 80059f0:	200005c1 	.word	0x200005c1

080059f4 <__sinit>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4604      	mov	r4, r0
 80059f8:	f7ff fff0 	bl	80059dc <__sfp_lock_acquire>
 80059fc:	6a23      	ldr	r3, [r4, #32]
 80059fe:	b11b      	cbz	r3, 8005a08 <__sinit+0x14>
 8005a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a04:	f7ff bff0 	b.w	80059e8 <__sfp_lock_release>
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <__sinit+0x28>)
 8005a0a:	6223      	str	r3, [r4, #32]
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <__sinit+0x2c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f5      	bne.n	8005a00 <__sinit+0xc>
 8005a14:	f7ff ffc4 	bl	80059a0 <global_stdio_init.part.0>
 8005a18:	e7f2      	b.n	8005a00 <__sinit+0xc>
 8005a1a:	bf00      	nop
 8005a1c:	08005961 	.word	0x08005961
 8005a20:	200005b8 	.word	0x200005b8

08005a24 <_fwalk_sglue>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	4607      	mov	r7, r0
 8005a2a:	4688      	mov	r8, r1
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	2600      	movs	r6, #0
 8005a30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a34:	f1b9 0901 	subs.w	r9, r9, #1
 8005a38:	d505      	bpl.n	8005a46 <_fwalk_sglue+0x22>
 8005a3a:	6824      	ldr	r4, [r4, #0]
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	d1f7      	bne.n	8005a30 <_fwalk_sglue+0xc>
 8005a40:	4630      	mov	r0, r6
 8005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d907      	bls.n	8005a5c <_fwalk_sglue+0x38>
 8005a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a50:	3301      	adds	r3, #1
 8005a52:	d003      	beq.n	8005a5c <_fwalk_sglue+0x38>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c0      	blx	r8
 8005a5a:	4306      	orrs	r6, r0
 8005a5c:	3568      	adds	r5, #104	; 0x68
 8005a5e:	e7e9      	b.n	8005a34 <_fwalk_sglue+0x10>

08005a60 <iprintf>:
 8005a60:	b40f      	push	{r0, r1, r2, r3}
 8005a62:	b507      	push	{r0, r1, r2, lr}
 8005a64:	4906      	ldr	r1, [pc, #24]	; (8005a80 <iprintf+0x20>)
 8005a66:	ab04      	add	r3, sp, #16
 8005a68:	6808      	ldr	r0, [r1, #0]
 8005a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a6e:	6881      	ldr	r1, [r0, #8]
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	f000 fa0d 	bl	8005e90 <_vfiprintf_r>
 8005a76:	b003      	add	sp, #12
 8005a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a7c:	b004      	add	sp, #16
 8005a7e:	4770      	bx	lr
 8005a80:	200000b8 	.word	0x200000b8

08005a84 <__sread>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	460c      	mov	r4, r1
 8005a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8c:	f000 f868 	bl	8005b60 <_read_r>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	bfab      	itete	ge
 8005a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a96:	89a3      	ldrhlt	r3, [r4, #12]
 8005a98:	181b      	addge	r3, r3, r0
 8005a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a9e:	bfac      	ite	ge
 8005aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aa2:	81a3      	strhlt	r3, [r4, #12]
 8005aa4:	bd10      	pop	{r4, pc}

08005aa6 <__swrite>:
 8005aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	461f      	mov	r7, r3
 8005aac:	898b      	ldrh	r3, [r1, #12]
 8005aae:	05db      	lsls	r3, r3, #23
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	d505      	bpl.n	8005ac4 <__swrite+0x1e>
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	2302      	movs	r3, #2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f000 f83c 	bl	8005b3c <_lseek_r>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ada:	f000 b853 	b.w	8005b84 <_write_r>

08005ade <__sseek>:
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	f000 f829 	bl	8005b3c <_lseek_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	bf15      	itete	ne
 8005af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005afa:	81a3      	strheq	r3, [r4, #12]
 8005afc:	bf18      	it	ne
 8005afe:	81a3      	strhne	r3, [r4, #12]
 8005b00:	bd10      	pop	{r4, pc}

08005b02 <__sclose>:
 8005b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b06:	f000 b809 	b.w	8005b1c <_close_r>

08005b0a <memset>:
 8005b0a:	4402      	add	r2, r0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d100      	bne.n	8005b14 <memset+0xa>
 8005b12:	4770      	bx	lr
 8005b14:	f803 1b01 	strb.w	r1, [r3], #1
 8005b18:	e7f9      	b.n	8005b0e <memset+0x4>
	...

08005b1c <_close_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d06      	ldr	r5, [pc, #24]	; (8005b38 <_close_r+0x1c>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fb f989 	bl	8000e3e <_close>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_close_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_close_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	200005bc 	.word	0x200005bc

08005b3c <_lseek_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_lseek_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fb f99e 	bl	8000e8c <_lseek>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_lseek_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_lseek_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	200005bc 	.word	0x200005bc

08005b60 <_read_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d07      	ldr	r5, [pc, #28]	; (8005b80 <_read_r+0x20>)
 8005b64:	4604      	mov	r4, r0
 8005b66:	4608      	mov	r0, r1
 8005b68:	4611      	mov	r1, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	602a      	str	r2, [r5, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f7fb f92c 	bl	8000dcc <_read>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_read_r+0x1e>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_read_r+0x1e>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	200005bc 	.word	0x200005bc

08005b84 <_write_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d07      	ldr	r5, [pc, #28]	; (8005ba4 <_write_r+0x20>)
 8005b88:	4604      	mov	r4, r0
 8005b8a:	4608      	mov	r0, r1
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	2200      	movs	r2, #0
 8005b90:	602a      	str	r2, [r5, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f7fb f937 	bl	8000e06 <_write>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_write_r+0x1e>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_write_r+0x1e>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	200005bc 	.word	0x200005bc

08005ba8 <__errno>:
 8005ba8:	4b01      	ldr	r3, [pc, #4]	; (8005bb0 <__errno+0x8>)
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	200000b8 	.word	0x200000b8

08005bb4 <__libc_init_array>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4d0d      	ldr	r5, [pc, #52]	; (8005bec <__libc_init_array+0x38>)
 8005bb8:	4c0d      	ldr	r4, [pc, #52]	; (8005bf0 <__libc_init_array+0x3c>)
 8005bba:	1b64      	subs	r4, r4, r5
 8005bbc:	10a4      	asrs	r4, r4, #2
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	42a6      	cmp	r6, r4
 8005bc2:	d109      	bne.n	8005bd8 <__libc_init_array+0x24>
 8005bc4:	4d0b      	ldr	r5, [pc, #44]	; (8005bf4 <__libc_init_array+0x40>)
 8005bc6:	4c0c      	ldr	r4, [pc, #48]	; (8005bf8 <__libc_init_array+0x44>)
 8005bc8:	f000 fe42 	bl	8006850 <_init>
 8005bcc:	1b64      	subs	r4, r4, r5
 8005bce:	10a4      	asrs	r4, r4, #2
 8005bd0:	2600      	movs	r6, #0
 8005bd2:	42a6      	cmp	r6, r4
 8005bd4:	d105      	bne.n	8005be2 <__libc_init_array+0x2e>
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bdc:	4798      	blx	r3
 8005bde:	3601      	adds	r6, #1
 8005be0:	e7ee      	b.n	8005bc0 <__libc_init_array+0xc>
 8005be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be6:	4798      	blx	r3
 8005be8:	3601      	adds	r6, #1
 8005bea:	e7f2      	b.n	8005bd2 <__libc_init_array+0x1e>
 8005bec:	08006ab0 	.word	0x08006ab0
 8005bf0:	08006ab0 	.word	0x08006ab0
 8005bf4:	08006ab0 	.word	0x08006ab0
 8005bf8:	08006ab4 	.word	0x08006ab4

08005bfc <__retarget_lock_acquire_recursive>:
 8005bfc:	4770      	bx	lr

08005bfe <__retarget_lock_release_recursive>:
 8005bfe:	4770      	bx	lr

08005c00 <__assert_func>:
 8005c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c02:	4614      	mov	r4, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <__assert_func+0x2c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	68d8      	ldr	r0, [r3, #12]
 8005c0e:	b14c      	cbz	r4, 8005c24 <__assert_func+0x24>
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <__assert_func+0x30>)
 8005c12:	9100      	str	r1, [sp, #0]
 8005c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c18:	4906      	ldr	r1, [pc, #24]	; (8005c34 <__assert_func+0x34>)
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	f000 fc90 	bl	8006540 <fiprintf>
 8005c20:	f000 fd46 	bl	80066b0 <abort>
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <__assert_func+0x38>)
 8005c26:	461c      	mov	r4, r3
 8005c28:	e7f3      	b.n	8005c12 <__assert_func+0x12>
 8005c2a:	bf00      	nop
 8005c2c:	200000b8 	.word	0x200000b8
 8005c30:	08006a37 	.word	0x08006a37
 8005c34:	08006a44 	.word	0x08006a44
 8005c38:	08006a72 	.word	0x08006a72

08005c3c <_free_r>:
 8005c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c3e:	2900      	cmp	r1, #0
 8005c40:	d044      	beq.n	8005ccc <_free_r+0x90>
 8005c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c46:	9001      	str	r0, [sp, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c4e:	bfb8      	it	lt
 8005c50:	18e4      	addlt	r4, r4, r3
 8005c52:	f000 f8e7 	bl	8005e24 <__malloc_lock>
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <_free_r+0x94>)
 8005c58:	9801      	ldr	r0, [sp, #4]
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	b933      	cbnz	r3, 8005c6c <_free_r+0x30>
 8005c5e:	6063      	str	r3, [r4, #4]
 8005c60:	6014      	str	r4, [r2, #0]
 8005c62:	b003      	add	sp, #12
 8005c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c68:	f000 b8e2 	b.w	8005e30 <__malloc_unlock>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d908      	bls.n	8005c82 <_free_r+0x46>
 8005c70:	6825      	ldr	r5, [r4, #0]
 8005c72:	1961      	adds	r1, r4, r5
 8005c74:	428b      	cmp	r3, r1
 8005c76:	bf01      	itttt	eq
 8005c78:	6819      	ldreq	r1, [r3, #0]
 8005c7a:	685b      	ldreq	r3, [r3, #4]
 8005c7c:	1949      	addeq	r1, r1, r5
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	e7ed      	b.n	8005c5e <_free_r+0x22>
 8005c82:	461a      	mov	r2, r3
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	b10b      	cbz	r3, 8005c8c <_free_r+0x50>
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	d9fa      	bls.n	8005c82 <_free_r+0x46>
 8005c8c:	6811      	ldr	r1, [r2, #0]
 8005c8e:	1855      	adds	r5, r2, r1
 8005c90:	42a5      	cmp	r5, r4
 8005c92:	d10b      	bne.n	8005cac <_free_r+0x70>
 8005c94:	6824      	ldr	r4, [r4, #0]
 8005c96:	4421      	add	r1, r4
 8005c98:	1854      	adds	r4, r2, r1
 8005c9a:	42a3      	cmp	r3, r4
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	d1e0      	bne.n	8005c62 <_free_r+0x26>
 8005ca0:	681c      	ldr	r4, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	6053      	str	r3, [r2, #4]
 8005ca6:	440c      	add	r4, r1
 8005ca8:	6014      	str	r4, [r2, #0]
 8005caa:	e7da      	b.n	8005c62 <_free_r+0x26>
 8005cac:	d902      	bls.n	8005cb4 <_free_r+0x78>
 8005cae:	230c      	movs	r3, #12
 8005cb0:	6003      	str	r3, [r0, #0]
 8005cb2:	e7d6      	b.n	8005c62 <_free_r+0x26>
 8005cb4:	6825      	ldr	r5, [r4, #0]
 8005cb6:	1961      	adds	r1, r4, r5
 8005cb8:	428b      	cmp	r3, r1
 8005cba:	bf04      	itt	eq
 8005cbc:	6819      	ldreq	r1, [r3, #0]
 8005cbe:	685b      	ldreq	r3, [r3, #4]
 8005cc0:	6063      	str	r3, [r4, #4]
 8005cc2:	bf04      	itt	eq
 8005cc4:	1949      	addeq	r1, r1, r5
 8005cc6:	6021      	streq	r1, [r4, #0]
 8005cc8:	6054      	str	r4, [r2, #4]
 8005cca:	e7ca      	b.n	8005c62 <_free_r+0x26>
 8005ccc:	b003      	add	sp, #12
 8005cce:	bd30      	pop	{r4, r5, pc}
 8005cd0:	200005c4 	.word	0x200005c4

08005cd4 <malloc>:
 8005cd4:	4b02      	ldr	r3, [pc, #8]	; (8005ce0 <malloc+0xc>)
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f000 b823 	b.w	8005d24 <_malloc_r>
 8005cde:	bf00      	nop
 8005ce0:	200000b8 	.word	0x200000b8

08005ce4 <sbrk_aligned>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	4e0e      	ldr	r6, [pc, #56]	; (8005d20 <sbrk_aligned+0x3c>)
 8005ce8:	460c      	mov	r4, r1
 8005cea:	6831      	ldr	r1, [r6, #0]
 8005cec:	4605      	mov	r5, r0
 8005cee:	b911      	cbnz	r1, 8005cf6 <sbrk_aligned+0x12>
 8005cf0:	f000 fcce 	bl	8006690 <_sbrk_r>
 8005cf4:	6030      	str	r0, [r6, #0]
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 fcc9 	bl	8006690 <_sbrk_r>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d00a      	beq.n	8005d18 <sbrk_aligned+0x34>
 8005d02:	1cc4      	adds	r4, r0, #3
 8005d04:	f024 0403 	bic.w	r4, r4, #3
 8005d08:	42a0      	cmp	r0, r4
 8005d0a:	d007      	beq.n	8005d1c <sbrk_aligned+0x38>
 8005d0c:	1a21      	subs	r1, r4, r0
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 fcbe 	bl	8006690 <_sbrk_r>
 8005d14:	3001      	adds	r0, #1
 8005d16:	d101      	bne.n	8005d1c <sbrk_aligned+0x38>
 8005d18:	f04f 34ff 	mov.w	r4, #4294967295
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	200005c8 	.word	0x200005c8

08005d24 <_malloc_r>:
 8005d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d28:	1ccd      	adds	r5, r1, #3
 8005d2a:	f025 0503 	bic.w	r5, r5, #3
 8005d2e:	3508      	adds	r5, #8
 8005d30:	2d0c      	cmp	r5, #12
 8005d32:	bf38      	it	cc
 8005d34:	250c      	movcc	r5, #12
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	4607      	mov	r7, r0
 8005d3a:	db01      	blt.n	8005d40 <_malloc_r+0x1c>
 8005d3c:	42a9      	cmp	r1, r5
 8005d3e:	d905      	bls.n	8005d4c <_malloc_r+0x28>
 8005d40:	230c      	movs	r3, #12
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	2600      	movs	r6, #0
 8005d46:	4630      	mov	r0, r6
 8005d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e20 <_malloc_r+0xfc>
 8005d50:	f000 f868 	bl	8005e24 <__malloc_lock>
 8005d54:	f8d8 3000 	ldr.w	r3, [r8]
 8005d58:	461c      	mov	r4, r3
 8005d5a:	bb5c      	cbnz	r4, 8005db4 <_malloc_r+0x90>
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f7ff ffc0 	bl	8005ce4 <sbrk_aligned>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	4604      	mov	r4, r0
 8005d68:	d155      	bne.n	8005e16 <_malloc_r+0xf2>
 8005d6a:	f8d8 4000 	ldr.w	r4, [r8]
 8005d6e:	4626      	mov	r6, r4
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	d145      	bne.n	8005e00 <_malloc_r+0xdc>
 8005d74:	2c00      	cmp	r4, #0
 8005d76:	d048      	beq.n	8005e0a <_malloc_r+0xe6>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	eb04 0903 	add.w	r9, r4, r3
 8005d82:	f000 fc85 	bl	8006690 <_sbrk_r>
 8005d86:	4581      	cmp	r9, r0
 8005d88:	d13f      	bne.n	8005e0a <_malloc_r+0xe6>
 8005d8a:	6821      	ldr	r1, [r4, #0]
 8005d8c:	1a6d      	subs	r5, r5, r1
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff ffa7 	bl	8005ce4 <sbrk_aligned>
 8005d96:	3001      	adds	r0, #1
 8005d98:	d037      	beq.n	8005e0a <_malloc_r+0xe6>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	442b      	add	r3, r5
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	f8d8 3000 	ldr.w	r3, [r8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d038      	beq.n	8005e1a <_malloc_r+0xf6>
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	42a2      	cmp	r2, r4
 8005dac:	d12b      	bne.n	8005e06 <_malloc_r+0xe2>
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	e00f      	b.n	8005dd4 <_malloc_r+0xb0>
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	1b52      	subs	r2, r2, r5
 8005db8:	d41f      	bmi.n	8005dfa <_malloc_r+0xd6>
 8005dba:	2a0b      	cmp	r2, #11
 8005dbc:	d917      	bls.n	8005dee <_malloc_r+0xca>
 8005dbe:	1961      	adds	r1, r4, r5
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	6025      	str	r5, [r4, #0]
 8005dc4:	bf18      	it	ne
 8005dc6:	6059      	strne	r1, [r3, #4]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	bf08      	it	eq
 8005dcc:	f8c8 1000 	streq.w	r1, [r8]
 8005dd0:	5162      	str	r2, [r4, r5]
 8005dd2:	604b      	str	r3, [r1, #4]
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f104 060b 	add.w	r6, r4, #11
 8005dda:	f000 f829 	bl	8005e30 <__malloc_unlock>
 8005dde:	f026 0607 	bic.w	r6, r6, #7
 8005de2:	1d23      	adds	r3, r4, #4
 8005de4:	1af2      	subs	r2, r6, r3
 8005de6:	d0ae      	beq.n	8005d46 <_malloc_r+0x22>
 8005de8:	1b9b      	subs	r3, r3, r6
 8005dea:	50a3      	str	r3, [r4, r2]
 8005dec:	e7ab      	b.n	8005d46 <_malloc_r+0x22>
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	6862      	ldr	r2, [r4, #4]
 8005df2:	d1dd      	bne.n	8005db0 <_malloc_r+0x8c>
 8005df4:	f8c8 2000 	str.w	r2, [r8]
 8005df8:	e7ec      	b.n	8005dd4 <_malloc_r+0xb0>
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	6864      	ldr	r4, [r4, #4]
 8005dfe:	e7ac      	b.n	8005d5a <_malloc_r+0x36>
 8005e00:	4634      	mov	r4, r6
 8005e02:	6876      	ldr	r6, [r6, #4]
 8005e04:	e7b4      	b.n	8005d70 <_malloc_r+0x4c>
 8005e06:	4613      	mov	r3, r2
 8005e08:	e7cc      	b.n	8005da4 <_malloc_r+0x80>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f000 f80e 	bl	8005e30 <__malloc_unlock>
 8005e14:	e797      	b.n	8005d46 <_malloc_r+0x22>
 8005e16:	6025      	str	r5, [r4, #0]
 8005e18:	e7dc      	b.n	8005dd4 <_malloc_r+0xb0>
 8005e1a:	605b      	str	r3, [r3, #4]
 8005e1c:	deff      	udf	#255	; 0xff
 8005e1e:	bf00      	nop
 8005e20:	200005c4 	.word	0x200005c4

08005e24 <__malloc_lock>:
 8005e24:	4801      	ldr	r0, [pc, #4]	; (8005e2c <__malloc_lock+0x8>)
 8005e26:	f7ff bee9 	b.w	8005bfc <__retarget_lock_acquire_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	200005c0 	.word	0x200005c0

08005e30 <__malloc_unlock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__malloc_unlock+0x8>)
 8005e32:	f7ff bee4 	b.w	8005bfe <__retarget_lock_release_recursive>
 8005e36:	bf00      	nop
 8005e38:	200005c0 	.word	0x200005c0

08005e3c <__sfputc_r>:
 8005e3c:	6893      	ldr	r3, [r2, #8]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	b410      	push	{r4}
 8005e44:	6093      	str	r3, [r2, #8]
 8005e46:	da08      	bge.n	8005e5a <__sfputc_r+0x1e>
 8005e48:	6994      	ldr	r4, [r2, #24]
 8005e4a:	42a3      	cmp	r3, r4
 8005e4c:	db01      	blt.n	8005e52 <__sfputc_r+0x16>
 8005e4e:	290a      	cmp	r1, #10
 8005e50:	d103      	bne.n	8005e5a <__sfputc_r+0x1e>
 8005e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e56:	f000 bb85 	b.w	8006564 <__swbuf_r>
 8005e5a:	6813      	ldr	r3, [r2, #0]
 8005e5c:	1c58      	adds	r0, r3, #1
 8005e5e:	6010      	str	r0, [r2, #0]
 8005e60:	7019      	strb	r1, [r3, #0]
 8005e62:	4608      	mov	r0, r1
 8005e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <__sfputs_r>:
 8005e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	18d5      	adds	r5, r2, r3
 8005e74:	42ac      	cmp	r4, r5
 8005e76:	d101      	bne.n	8005e7c <__sfputs_r+0x12>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e007      	b.n	8005e8c <__sfputs_r+0x22>
 8005e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e80:	463a      	mov	r2, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff ffda 	bl	8005e3c <__sfputc_r>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d1f3      	bne.n	8005e74 <__sfputs_r+0xa>
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e90 <_vfiprintf_r>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	460d      	mov	r5, r1
 8005e96:	b09d      	sub	sp, #116	; 0x74
 8005e98:	4614      	mov	r4, r2
 8005e9a:	4698      	mov	r8, r3
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	b118      	cbz	r0, 8005ea8 <_vfiprintf_r+0x18>
 8005ea0:	6a03      	ldr	r3, [r0, #32]
 8005ea2:	b90b      	cbnz	r3, 8005ea8 <_vfiprintf_r+0x18>
 8005ea4:	f7ff fda6 	bl	80059f4 <__sinit>
 8005ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eaa:	07d9      	lsls	r1, r3, #31
 8005eac:	d405      	bmi.n	8005eba <_vfiprintf_r+0x2a>
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	059a      	lsls	r2, r3, #22
 8005eb2:	d402      	bmi.n	8005eba <_vfiprintf_r+0x2a>
 8005eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eb6:	f7ff fea1 	bl	8005bfc <__retarget_lock_acquire_recursive>
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	071b      	lsls	r3, r3, #28
 8005ebe:	d501      	bpl.n	8005ec4 <_vfiprintf_r+0x34>
 8005ec0:	692b      	ldr	r3, [r5, #16]
 8005ec2:	b99b      	cbnz	r3, 8005eec <_vfiprintf_r+0x5c>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f000 fb8a 	bl	80065e0 <__swsetup_r>
 8005ecc:	b170      	cbz	r0, 8005eec <_vfiprintf_r+0x5c>
 8005ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ed0:	07dc      	lsls	r4, r3, #31
 8005ed2:	d504      	bpl.n	8005ede <_vfiprintf_r+0x4e>
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	b01d      	add	sp, #116	; 0x74
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	0598      	lsls	r0, r3, #22
 8005ee2:	d4f7      	bmi.n	8005ed4 <_vfiprintf_r+0x44>
 8005ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ee6:	f7ff fe8a 	bl	8005bfe <__retarget_lock_release_recursive>
 8005eea:	e7f3      	b.n	8005ed4 <_vfiprintf_r+0x44>
 8005eec:	2300      	movs	r3, #0
 8005eee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005efa:	2330      	movs	r3, #48	; 0x30
 8005efc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80060b0 <_vfiprintf_r+0x220>
 8005f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f04:	f04f 0901 	mov.w	r9, #1
 8005f08:	4623      	mov	r3, r4
 8005f0a:	469a      	mov	sl, r3
 8005f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f10:	b10a      	cbz	r2, 8005f16 <_vfiprintf_r+0x86>
 8005f12:	2a25      	cmp	r2, #37	; 0x25
 8005f14:	d1f9      	bne.n	8005f0a <_vfiprintf_r+0x7a>
 8005f16:	ebba 0b04 	subs.w	fp, sl, r4
 8005f1a:	d00b      	beq.n	8005f34 <_vfiprintf_r+0xa4>
 8005f1c:	465b      	mov	r3, fp
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ffa1 	bl	8005e6a <__sfputs_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f000 80a9 	beq.w	8006080 <_vfiprintf_r+0x1f0>
 8005f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f30:	445a      	add	r2, fp
 8005f32:	9209      	str	r2, [sp, #36]	; 0x24
 8005f34:	f89a 3000 	ldrb.w	r3, [sl]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80a1 	beq.w	8006080 <_vfiprintf_r+0x1f0>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f48:	f10a 0a01 	add.w	sl, sl, #1
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f54:	931a      	str	r3, [sp, #104]	; 0x68
 8005f56:	4654      	mov	r4, sl
 8005f58:	2205      	movs	r2, #5
 8005f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5e:	4854      	ldr	r0, [pc, #336]	; (80060b0 <_vfiprintf_r+0x220>)
 8005f60:	f7fa f936 	bl	80001d0 <memchr>
 8005f64:	9a04      	ldr	r2, [sp, #16]
 8005f66:	b9d8      	cbnz	r0, 8005fa0 <_vfiprintf_r+0x110>
 8005f68:	06d1      	lsls	r1, r2, #27
 8005f6a:	bf44      	itt	mi
 8005f6c:	2320      	movmi	r3, #32
 8005f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f72:	0713      	lsls	r3, r2, #28
 8005f74:	bf44      	itt	mi
 8005f76:	232b      	movmi	r3, #43	; 0x2b
 8005f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f80:	2b2a      	cmp	r3, #42	; 0x2a
 8005f82:	d015      	beq.n	8005fb0 <_vfiprintf_r+0x120>
 8005f84:	9a07      	ldr	r2, [sp, #28]
 8005f86:	4654      	mov	r4, sl
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f04f 0c0a 	mov.w	ip, #10
 8005f8e:	4621      	mov	r1, r4
 8005f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f94:	3b30      	subs	r3, #48	; 0x30
 8005f96:	2b09      	cmp	r3, #9
 8005f98:	d94d      	bls.n	8006036 <_vfiprintf_r+0x1a6>
 8005f9a:	b1b0      	cbz	r0, 8005fca <_vfiprintf_r+0x13a>
 8005f9c:	9207      	str	r2, [sp, #28]
 8005f9e:	e014      	b.n	8005fca <_vfiprintf_r+0x13a>
 8005fa0:	eba0 0308 	sub.w	r3, r0, r8
 8005fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	46a2      	mov	sl, r4
 8005fae:	e7d2      	b.n	8005f56 <_vfiprintf_r+0xc6>
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	1d19      	adds	r1, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	9103      	str	r1, [sp, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bfbb      	ittet	lt
 8005fbc:	425b      	neglt	r3, r3
 8005fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005fc2:	9307      	strge	r3, [sp, #28]
 8005fc4:	9307      	strlt	r3, [sp, #28]
 8005fc6:	bfb8      	it	lt
 8005fc8:	9204      	strlt	r2, [sp, #16]
 8005fca:	7823      	ldrb	r3, [r4, #0]
 8005fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fce:	d10c      	bne.n	8005fea <_vfiprintf_r+0x15a>
 8005fd0:	7863      	ldrb	r3, [r4, #1]
 8005fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd4:	d134      	bne.n	8006040 <_vfiprintf_r+0x1b0>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	1d1a      	adds	r2, r3, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	9203      	str	r2, [sp, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bfb8      	it	lt
 8005fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fe6:	3402      	adds	r4, #2
 8005fe8:	9305      	str	r3, [sp, #20]
 8005fea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80060c0 <_vfiprintf_r+0x230>
 8005fee:	7821      	ldrb	r1, [r4, #0]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	f7fa f8ec 	bl	80001d0 <memchr>
 8005ff8:	b138      	cbz	r0, 800600a <_vfiprintf_r+0x17a>
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	eba0 000a 	sub.w	r0, r0, sl
 8006000:	2240      	movs	r2, #64	; 0x40
 8006002:	4082      	lsls	r2, r0
 8006004:	4313      	orrs	r3, r2
 8006006:	3401      	adds	r4, #1
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4829      	ldr	r0, [pc, #164]	; (80060b4 <_vfiprintf_r+0x224>)
 8006010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006014:	2206      	movs	r2, #6
 8006016:	f7fa f8db 	bl	80001d0 <memchr>
 800601a:	2800      	cmp	r0, #0
 800601c:	d03f      	beq.n	800609e <_vfiprintf_r+0x20e>
 800601e:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <_vfiprintf_r+0x228>)
 8006020:	bb1b      	cbnz	r3, 800606a <_vfiprintf_r+0x1da>
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	3307      	adds	r3, #7
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	3308      	adds	r3, #8
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006030:	443b      	add	r3, r7
 8006032:	9309      	str	r3, [sp, #36]	; 0x24
 8006034:	e768      	b.n	8005f08 <_vfiprintf_r+0x78>
 8006036:	fb0c 3202 	mla	r2, ip, r2, r3
 800603a:	460c      	mov	r4, r1
 800603c:	2001      	movs	r0, #1
 800603e:	e7a6      	b.n	8005f8e <_vfiprintf_r+0xfe>
 8006040:	2300      	movs	r3, #0
 8006042:	3401      	adds	r4, #1
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	4619      	mov	r1, r3
 8006048:	f04f 0c0a 	mov.w	ip, #10
 800604c:	4620      	mov	r0, r4
 800604e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006052:	3a30      	subs	r2, #48	; 0x30
 8006054:	2a09      	cmp	r2, #9
 8006056:	d903      	bls.n	8006060 <_vfiprintf_r+0x1d0>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0c6      	beq.n	8005fea <_vfiprintf_r+0x15a>
 800605c:	9105      	str	r1, [sp, #20]
 800605e:	e7c4      	b.n	8005fea <_vfiprintf_r+0x15a>
 8006060:	fb0c 2101 	mla	r1, ip, r1, r2
 8006064:	4604      	mov	r4, r0
 8006066:	2301      	movs	r3, #1
 8006068:	e7f0      	b.n	800604c <_vfiprintf_r+0x1bc>
 800606a:	ab03      	add	r3, sp, #12
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	462a      	mov	r2, r5
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <_vfiprintf_r+0x22c>)
 8006072:	a904      	add	r1, sp, #16
 8006074:	4630      	mov	r0, r6
 8006076:	f3af 8000 	nop.w
 800607a:	4607      	mov	r7, r0
 800607c:	1c78      	adds	r0, r7, #1
 800607e:	d1d6      	bne.n	800602e <_vfiprintf_r+0x19e>
 8006080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006082:	07d9      	lsls	r1, r3, #31
 8006084:	d405      	bmi.n	8006092 <_vfiprintf_r+0x202>
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	059a      	lsls	r2, r3, #22
 800608a:	d402      	bmi.n	8006092 <_vfiprintf_r+0x202>
 800608c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800608e:	f7ff fdb6 	bl	8005bfe <__retarget_lock_release_recursive>
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	065b      	lsls	r3, r3, #25
 8006096:	f53f af1d 	bmi.w	8005ed4 <_vfiprintf_r+0x44>
 800609a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800609c:	e71c      	b.n	8005ed8 <_vfiprintf_r+0x48>
 800609e:	ab03      	add	r3, sp, #12
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	462a      	mov	r2, r5
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <_vfiprintf_r+0x22c>)
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 f879 	bl	80061a0 <_printf_i>
 80060ae:	e7e4      	b.n	800607a <_vfiprintf_r+0x1ea>
 80060b0:	08006a73 	.word	0x08006a73
 80060b4:	08006a7d 	.word	0x08006a7d
 80060b8:	00000000 	.word	0x00000000
 80060bc:	08005e6b 	.word	0x08005e6b
 80060c0:	08006a79 	.word	0x08006a79

080060c4 <_printf_common>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	4616      	mov	r6, r2
 80060ca:	4699      	mov	r9, r3
 80060cc:	688a      	ldr	r2, [r1, #8]
 80060ce:	690b      	ldr	r3, [r1, #16]
 80060d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bfb8      	it	lt
 80060d8:	4613      	movlt	r3, r2
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060e0:	4607      	mov	r7, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	b10a      	cbz	r2, 80060ea <_printf_common+0x26>
 80060e6:	3301      	adds	r3, #1
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	0699      	lsls	r1, r3, #26
 80060ee:	bf42      	ittt	mi
 80060f0:	6833      	ldrmi	r3, [r6, #0]
 80060f2:	3302      	addmi	r3, #2
 80060f4:	6033      	strmi	r3, [r6, #0]
 80060f6:	6825      	ldr	r5, [r4, #0]
 80060f8:	f015 0506 	ands.w	r5, r5, #6
 80060fc:	d106      	bne.n	800610c <_printf_common+0x48>
 80060fe:	f104 0a19 	add.w	sl, r4, #25
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	6832      	ldr	r2, [r6, #0]
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	42ab      	cmp	r3, r5
 800610a:	dc26      	bgt.n	800615a <_printf_common+0x96>
 800610c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006110:	1e13      	subs	r3, r2, #0
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	bf18      	it	ne
 8006116:	2301      	movne	r3, #1
 8006118:	0692      	lsls	r2, r2, #26
 800611a:	d42b      	bmi.n	8006174 <_printf_common+0xb0>
 800611c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006120:	4649      	mov	r1, r9
 8006122:	4638      	mov	r0, r7
 8006124:	47c0      	blx	r8
 8006126:	3001      	adds	r0, #1
 8006128:	d01e      	beq.n	8006168 <_printf_common+0xa4>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	f003 0306 	and.w	r3, r3, #6
 8006132:	2b04      	cmp	r3, #4
 8006134:	bf02      	ittt	eq
 8006136:	68e5      	ldreq	r5, [r4, #12]
 8006138:	6833      	ldreq	r3, [r6, #0]
 800613a:	1aed      	subeq	r5, r5, r3
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	bf0c      	ite	eq
 8006140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006144:	2500      	movne	r5, #0
 8006146:	4293      	cmp	r3, r2
 8006148:	bfc4      	itt	gt
 800614a:	1a9b      	subgt	r3, r3, r2
 800614c:	18ed      	addgt	r5, r5, r3
 800614e:	2600      	movs	r6, #0
 8006150:	341a      	adds	r4, #26
 8006152:	42b5      	cmp	r5, r6
 8006154:	d11a      	bne.n	800618c <_printf_common+0xc8>
 8006156:	2000      	movs	r0, #0
 8006158:	e008      	b.n	800616c <_printf_common+0xa8>
 800615a:	2301      	movs	r3, #1
 800615c:	4652      	mov	r2, sl
 800615e:	4649      	mov	r1, r9
 8006160:	4638      	mov	r0, r7
 8006162:	47c0      	blx	r8
 8006164:	3001      	adds	r0, #1
 8006166:	d103      	bne.n	8006170 <_printf_common+0xac>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006170:	3501      	adds	r5, #1
 8006172:	e7c6      	b.n	8006102 <_printf_common+0x3e>
 8006174:	18e1      	adds	r1, r4, r3
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	2030      	movs	r0, #48	; 0x30
 800617a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800617e:	4422      	add	r2, r4
 8006180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006188:	3302      	adds	r3, #2
 800618a:	e7c7      	b.n	800611c <_printf_common+0x58>
 800618c:	2301      	movs	r3, #1
 800618e:	4622      	mov	r2, r4
 8006190:	4649      	mov	r1, r9
 8006192:	4638      	mov	r0, r7
 8006194:	47c0      	blx	r8
 8006196:	3001      	adds	r0, #1
 8006198:	d0e6      	beq.n	8006168 <_printf_common+0xa4>
 800619a:	3601      	adds	r6, #1
 800619c:	e7d9      	b.n	8006152 <_printf_common+0x8e>
	...

080061a0 <_printf_i>:
 80061a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	7e0f      	ldrb	r7, [r1, #24]
 80061a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061a8:	2f78      	cmp	r7, #120	; 0x78
 80061aa:	4691      	mov	r9, r2
 80061ac:	4680      	mov	r8, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	469a      	mov	sl, r3
 80061b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061b6:	d807      	bhi.n	80061c8 <_printf_i+0x28>
 80061b8:	2f62      	cmp	r7, #98	; 0x62
 80061ba:	d80a      	bhi.n	80061d2 <_printf_i+0x32>
 80061bc:	2f00      	cmp	r7, #0
 80061be:	f000 80d4 	beq.w	800636a <_printf_i+0x1ca>
 80061c2:	2f58      	cmp	r7, #88	; 0x58
 80061c4:	f000 80c0 	beq.w	8006348 <_printf_i+0x1a8>
 80061c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061d0:	e03a      	b.n	8006248 <_printf_i+0xa8>
 80061d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061d6:	2b15      	cmp	r3, #21
 80061d8:	d8f6      	bhi.n	80061c8 <_printf_i+0x28>
 80061da:	a101      	add	r1, pc, #4	; (adr r1, 80061e0 <_printf_i+0x40>)
 80061dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061e0:	08006239 	.word	0x08006239
 80061e4:	0800624d 	.word	0x0800624d
 80061e8:	080061c9 	.word	0x080061c9
 80061ec:	080061c9 	.word	0x080061c9
 80061f0:	080061c9 	.word	0x080061c9
 80061f4:	080061c9 	.word	0x080061c9
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	080061c9 	.word	0x080061c9
 8006200:	080061c9 	.word	0x080061c9
 8006204:	080061c9 	.word	0x080061c9
 8006208:	080061c9 	.word	0x080061c9
 800620c:	08006351 	.word	0x08006351
 8006210:	08006279 	.word	0x08006279
 8006214:	0800630b 	.word	0x0800630b
 8006218:	080061c9 	.word	0x080061c9
 800621c:	080061c9 	.word	0x080061c9
 8006220:	08006373 	.word	0x08006373
 8006224:	080061c9 	.word	0x080061c9
 8006228:	08006279 	.word	0x08006279
 800622c:	080061c9 	.word	0x080061c9
 8006230:	080061c9 	.word	0x080061c9
 8006234:	08006313 	.word	0x08006313
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	602a      	str	r2, [r5, #0]
 8006240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006248:	2301      	movs	r3, #1
 800624a:	e09f      	b.n	800638c <_printf_i+0x1ec>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	682b      	ldr	r3, [r5, #0]
 8006250:	0607      	lsls	r7, r0, #24
 8006252:	f103 0104 	add.w	r1, r3, #4
 8006256:	6029      	str	r1, [r5, #0]
 8006258:	d501      	bpl.n	800625e <_printf_i+0xbe>
 800625a:	681e      	ldr	r6, [r3, #0]
 800625c:	e003      	b.n	8006266 <_printf_i+0xc6>
 800625e:	0646      	lsls	r6, r0, #25
 8006260:	d5fb      	bpl.n	800625a <_printf_i+0xba>
 8006262:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006266:	2e00      	cmp	r6, #0
 8006268:	da03      	bge.n	8006272 <_printf_i+0xd2>
 800626a:	232d      	movs	r3, #45	; 0x2d
 800626c:	4276      	negs	r6, r6
 800626e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006272:	485a      	ldr	r0, [pc, #360]	; (80063dc <_printf_i+0x23c>)
 8006274:	230a      	movs	r3, #10
 8006276:	e012      	b.n	800629e <_printf_i+0xfe>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	1d19      	adds	r1, r3, #4
 800627e:	6029      	str	r1, [r5, #0]
 8006280:	0605      	lsls	r5, r0, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0xe8>
 8006284:	681e      	ldr	r6, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0xee>
 8006288:	0641      	lsls	r1, r0, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0xe4>
 800628c:	881e      	ldrh	r6, [r3, #0]
 800628e:	4853      	ldr	r0, [pc, #332]	; (80063dc <_printf_i+0x23c>)
 8006290:	2f6f      	cmp	r7, #111	; 0x6f
 8006292:	bf0c      	ite	eq
 8006294:	2308      	moveq	r3, #8
 8006296:	230a      	movne	r3, #10
 8006298:	2100      	movs	r1, #0
 800629a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800629e:	6865      	ldr	r5, [r4, #4]
 80062a0:	60a5      	str	r5, [r4, #8]
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	bfa2      	ittt	ge
 80062a6:	6821      	ldrge	r1, [r4, #0]
 80062a8:	f021 0104 	bicge.w	r1, r1, #4
 80062ac:	6021      	strge	r1, [r4, #0]
 80062ae:	b90e      	cbnz	r6, 80062b4 <_printf_i+0x114>
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	d04b      	beq.n	800634c <_printf_i+0x1ac>
 80062b4:	4615      	mov	r5, r2
 80062b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ba:	fb03 6711 	mls	r7, r3, r1, r6
 80062be:	5dc7      	ldrb	r7, [r0, r7]
 80062c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062c4:	4637      	mov	r7, r6
 80062c6:	42bb      	cmp	r3, r7
 80062c8:	460e      	mov	r6, r1
 80062ca:	d9f4      	bls.n	80062b6 <_printf_i+0x116>
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d10b      	bne.n	80062e8 <_printf_i+0x148>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	07de      	lsls	r6, r3, #31
 80062d4:	d508      	bpl.n	80062e8 <_printf_i+0x148>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	6861      	ldr	r1, [r4, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	bfde      	ittt	le
 80062de:	2330      	movle	r3, #48	; 0x30
 80062e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062e8:	1b52      	subs	r2, r2, r5
 80062ea:	6122      	str	r2, [r4, #16]
 80062ec:	f8cd a000 	str.w	sl, [sp]
 80062f0:	464b      	mov	r3, r9
 80062f2:	aa03      	add	r2, sp, #12
 80062f4:	4621      	mov	r1, r4
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff fee4 	bl	80060c4 <_printf_common>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d14a      	bne.n	8006396 <_printf_i+0x1f6>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	b004      	add	sp, #16
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f043 0320 	orr.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	4833      	ldr	r0, [pc, #204]	; (80063e0 <_printf_i+0x240>)
 8006314:	2778      	movs	r7, #120	; 0x78
 8006316:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	6829      	ldr	r1, [r5, #0]
 800631e:	061f      	lsls	r7, r3, #24
 8006320:	f851 6b04 	ldr.w	r6, [r1], #4
 8006324:	d402      	bmi.n	800632c <_printf_i+0x18c>
 8006326:	065f      	lsls	r7, r3, #25
 8006328:	bf48      	it	mi
 800632a:	b2b6      	uxthmi	r6, r6
 800632c:	07df      	lsls	r7, r3, #31
 800632e:	bf48      	it	mi
 8006330:	f043 0320 	orrmi.w	r3, r3, #32
 8006334:	6029      	str	r1, [r5, #0]
 8006336:	bf48      	it	mi
 8006338:	6023      	strmi	r3, [r4, #0]
 800633a:	b91e      	cbnz	r6, 8006344 <_printf_i+0x1a4>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	f023 0320 	bic.w	r3, r3, #32
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	2310      	movs	r3, #16
 8006346:	e7a7      	b.n	8006298 <_printf_i+0xf8>
 8006348:	4824      	ldr	r0, [pc, #144]	; (80063dc <_printf_i+0x23c>)
 800634a:	e7e4      	b.n	8006316 <_printf_i+0x176>
 800634c:	4615      	mov	r5, r2
 800634e:	e7bd      	b.n	80062cc <_printf_i+0x12c>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	6826      	ldr	r6, [r4, #0]
 8006354:	6961      	ldr	r1, [r4, #20]
 8006356:	1d18      	adds	r0, r3, #4
 8006358:	6028      	str	r0, [r5, #0]
 800635a:	0635      	lsls	r5, r6, #24
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	d501      	bpl.n	8006364 <_printf_i+0x1c4>
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	e002      	b.n	800636a <_printf_i+0x1ca>
 8006364:	0670      	lsls	r0, r6, #25
 8006366:	d5fb      	bpl.n	8006360 <_printf_i+0x1c0>
 8006368:	8019      	strh	r1, [r3, #0]
 800636a:	2300      	movs	r3, #0
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	4615      	mov	r5, r2
 8006370:	e7bc      	b.n	80062ec <_printf_i+0x14c>
 8006372:	682b      	ldr	r3, [r5, #0]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	681d      	ldr	r5, [r3, #0]
 800637a:	6862      	ldr	r2, [r4, #4]
 800637c:	2100      	movs	r1, #0
 800637e:	4628      	mov	r0, r5
 8006380:	f7f9 ff26 	bl	80001d0 <memchr>
 8006384:	b108      	cbz	r0, 800638a <_printf_i+0x1ea>
 8006386:	1b40      	subs	r0, r0, r5
 8006388:	6060      	str	r0, [r4, #4]
 800638a:	6863      	ldr	r3, [r4, #4]
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	2300      	movs	r3, #0
 8006390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006394:	e7aa      	b.n	80062ec <_printf_i+0x14c>
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	462a      	mov	r2, r5
 800639a:	4649      	mov	r1, r9
 800639c:	4640      	mov	r0, r8
 800639e:	47d0      	blx	sl
 80063a0:	3001      	adds	r0, #1
 80063a2:	d0ad      	beq.n	8006300 <_printf_i+0x160>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	079b      	lsls	r3, r3, #30
 80063a8:	d413      	bmi.n	80063d2 <_printf_i+0x232>
 80063aa:	68e0      	ldr	r0, [r4, #12]
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	4298      	cmp	r0, r3
 80063b0:	bfb8      	it	lt
 80063b2:	4618      	movlt	r0, r3
 80063b4:	e7a6      	b.n	8006304 <_printf_i+0x164>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4632      	mov	r2, r6
 80063ba:	4649      	mov	r1, r9
 80063bc:	4640      	mov	r0, r8
 80063be:	47d0      	blx	sl
 80063c0:	3001      	adds	r0, #1
 80063c2:	d09d      	beq.n	8006300 <_printf_i+0x160>
 80063c4:	3501      	adds	r5, #1
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	9903      	ldr	r1, [sp, #12]
 80063ca:	1a5b      	subs	r3, r3, r1
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dcf2      	bgt.n	80063b6 <_printf_i+0x216>
 80063d0:	e7eb      	b.n	80063aa <_printf_i+0x20a>
 80063d2:	2500      	movs	r5, #0
 80063d4:	f104 0619 	add.w	r6, r4, #25
 80063d8:	e7f5      	b.n	80063c6 <_printf_i+0x226>
 80063da:	bf00      	nop
 80063dc:	08006a84 	.word	0x08006a84
 80063e0:	08006a95 	.word	0x08006a95

080063e4 <__sflush_r>:
 80063e4:	898a      	ldrh	r2, [r1, #12]
 80063e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	4605      	mov	r5, r0
 80063ec:	0710      	lsls	r0, r2, #28
 80063ee:	460c      	mov	r4, r1
 80063f0:	d458      	bmi.n	80064a4 <__sflush_r+0xc0>
 80063f2:	684b      	ldr	r3, [r1, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dc05      	bgt.n	8006404 <__sflush_r+0x20>
 80063f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dc02      	bgt.n	8006404 <__sflush_r+0x20>
 80063fe:	2000      	movs	r0, #0
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006406:	2e00      	cmp	r6, #0
 8006408:	d0f9      	beq.n	80063fe <__sflush_r+0x1a>
 800640a:	2300      	movs	r3, #0
 800640c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006410:	682f      	ldr	r7, [r5, #0]
 8006412:	6a21      	ldr	r1, [r4, #32]
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	d032      	beq.n	800647e <__sflush_r+0x9a>
 8006418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	075a      	lsls	r2, r3, #29
 800641e:	d505      	bpl.n	800642c <__sflush_r+0x48>
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	1ac0      	subs	r0, r0, r3
 8006424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006426:	b10b      	cbz	r3, 800642c <__sflush_r+0x48>
 8006428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800642a:	1ac0      	subs	r0, r0, r3
 800642c:	2300      	movs	r3, #0
 800642e:	4602      	mov	r2, r0
 8006430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006432:	6a21      	ldr	r1, [r4, #32]
 8006434:	4628      	mov	r0, r5
 8006436:	47b0      	blx	r6
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	d106      	bne.n	800644c <__sflush_r+0x68>
 800643e:	6829      	ldr	r1, [r5, #0]
 8006440:	291d      	cmp	r1, #29
 8006442:	d82b      	bhi.n	800649c <__sflush_r+0xb8>
 8006444:	4a29      	ldr	r2, [pc, #164]	; (80064ec <__sflush_r+0x108>)
 8006446:	410a      	asrs	r2, r1
 8006448:	07d6      	lsls	r6, r2, #31
 800644a:	d427      	bmi.n	800649c <__sflush_r+0xb8>
 800644c:	2200      	movs	r2, #0
 800644e:	6062      	str	r2, [r4, #4]
 8006450:	04d9      	lsls	r1, r3, #19
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	6022      	str	r2, [r4, #0]
 8006456:	d504      	bpl.n	8006462 <__sflush_r+0x7e>
 8006458:	1c42      	adds	r2, r0, #1
 800645a:	d101      	bne.n	8006460 <__sflush_r+0x7c>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b903      	cbnz	r3, 8006462 <__sflush_r+0x7e>
 8006460:	6560      	str	r0, [r4, #84]	; 0x54
 8006462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006464:	602f      	str	r7, [r5, #0]
 8006466:	2900      	cmp	r1, #0
 8006468:	d0c9      	beq.n	80063fe <__sflush_r+0x1a>
 800646a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800646e:	4299      	cmp	r1, r3
 8006470:	d002      	beq.n	8006478 <__sflush_r+0x94>
 8006472:	4628      	mov	r0, r5
 8006474:	f7ff fbe2 	bl	8005c3c <_free_r>
 8006478:	2000      	movs	r0, #0
 800647a:	6360      	str	r0, [r4, #52]	; 0x34
 800647c:	e7c0      	b.n	8006400 <__sflush_r+0x1c>
 800647e:	2301      	movs	r3, #1
 8006480:	4628      	mov	r0, r5
 8006482:	47b0      	blx	r6
 8006484:	1c41      	adds	r1, r0, #1
 8006486:	d1c8      	bne.n	800641a <__sflush_r+0x36>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0c5      	beq.n	800641a <__sflush_r+0x36>
 800648e:	2b1d      	cmp	r3, #29
 8006490:	d001      	beq.n	8006496 <__sflush_r+0xb2>
 8006492:	2b16      	cmp	r3, #22
 8006494:	d101      	bne.n	800649a <__sflush_r+0xb6>
 8006496:	602f      	str	r7, [r5, #0]
 8006498:	e7b1      	b.n	80063fe <__sflush_r+0x1a>
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	e7ad      	b.n	8006400 <__sflush_r+0x1c>
 80064a4:	690f      	ldr	r7, [r1, #16]
 80064a6:	2f00      	cmp	r7, #0
 80064a8:	d0a9      	beq.n	80063fe <__sflush_r+0x1a>
 80064aa:	0793      	lsls	r3, r2, #30
 80064ac:	680e      	ldr	r6, [r1, #0]
 80064ae:	bf08      	it	eq
 80064b0:	694b      	ldreq	r3, [r1, #20]
 80064b2:	600f      	str	r7, [r1, #0]
 80064b4:	bf18      	it	ne
 80064b6:	2300      	movne	r3, #0
 80064b8:	eba6 0807 	sub.w	r8, r6, r7
 80064bc:	608b      	str	r3, [r1, #8]
 80064be:	f1b8 0f00 	cmp.w	r8, #0
 80064c2:	dd9c      	ble.n	80063fe <__sflush_r+0x1a>
 80064c4:	6a21      	ldr	r1, [r4, #32]
 80064c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064c8:	4643      	mov	r3, r8
 80064ca:	463a      	mov	r2, r7
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b0      	blx	r6
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dc06      	bgt.n	80064e2 <__sflush_r+0xfe>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e78e      	b.n	8006400 <__sflush_r+0x1c>
 80064e2:	4407      	add	r7, r0
 80064e4:	eba8 0800 	sub.w	r8, r8, r0
 80064e8:	e7e9      	b.n	80064be <__sflush_r+0xda>
 80064ea:	bf00      	nop
 80064ec:	dfbffffe 	.word	0xdfbffffe

080064f0 <_fflush_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	690b      	ldr	r3, [r1, #16]
 80064f4:	4605      	mov	r5, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	b913      	cbnz	r3, 8006500 <_fflush_r+0x10>
 80064fa:	2500      	movs	r5, #0
 80064fc:	4628      	mov	r0, r5
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	b118      	cbz	r0, 800650a <_fflush_r+0x1a>
 8006502:	6a03      	ldr	r3, [r0, #32]
 8006504:	b90b      	cbnz	r3, 800650a <_fflush_r+0x1a>
 8006506:	f7ff fa75 	bl	80059f4 <__sinit>
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f3      	beq.n	80064fa <_fflush_r+0xa>
 8006512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006514:	07d0      	lsls	r0, r2, #31
 8006516:	d404      	bmi.n	8006522 <_fflush_r+0x32>
 8006518:	0599      	lsls	r1, r3, #22
 800651a:	d402      	bmi.n	8006522 <_fflush_r+0x32>
 800651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800651e:	f7ff fb6d 	bl	8005bfc <__retarget_lock_acquire_recursive>
 8006522:	4628      	mov	r0, r5
 8006524:	4621      	mov	r1, r4
 8006526:	f7ff ff5d 	bl	80063e4 <__sflush_r>
 800652a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652c:	07da      	lsls	r2, r3, #31
 800652e:	4605      	mov	r5, r0
 8006530:	d4e4      	bmi.n	80064fc <_fflush_r+0xc>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	059b      	lsls	r3, r3, #22
 8006536:	d4e1      	bmi.n	80064fc <_fflush_r+0xc>
 8006538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653a:	f7ff fb60 	bl	8005bfe <__retarget_lock_release_recursive>
 800653e:	e7dd      	b.n	80064fc <_fflush_r+0xc>

08006540 <fiprintf>:
 8006540:	b40e      	push	{r1, r2, r3}
 8006542:	b503      	push	{r0, r1, lr}
 8006544:	4601      	mov	r1, r0
 8006546:	ab03      	add	r3, sp, #12
 8006548:	4805      	ldr	r0, [pc, #20]	; (8006560 <fiprintf+0x20>)
 800654a:	f853 2b04 	ldr.w	r2, [r3], #4
 800654e:	6800      	ldr	r0, [r0, #0]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	f7ff fc9d 	bl	8005e90 <_vfiprintf_r>
 8006556:	b002      	add	sp, #8
 8006558:	f85d eb04 	ldr.w	lr, [sp], #4
 800655c:	b003      	add	sp, #12
 800655e:	4770      	bx	lr
 8006560:	200000b8 	.word	0x200000b8

08006564 <__swbuf_r>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	460e      	mov	r6, r1
 8006568:	4614      	mov	r4, r2
 800656a:	4605      	mov	r5, r0
 800656c:	b118      	cbz	r0, 8006576 <__swbuf_r+0x12>
 800656e:	6a03      	ldr	r3, [r0, #32]
 8006570:	b90b      	cbnz	r3, 8006576 <__swbuf_r+0x12>
 8006572:	f7ff fa3f 	bl	80059f4 <__sinit>
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	60a3      	str	r3, [r4, #8]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	071a      	lsls	r2, r3, #28
 800657e:	d525      	bpl.n	80065cc <__swbuf_r+0x68>
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	b31b      	cbz	r3, 80065cc <__swbuf_r+0x68>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	6922      	ldr	r2, [r4, #16]
 8006588:	1a98      	subs	r0, r3, r2
 800658a:	6963      	ldr	r3, [r4, #20]
 800658c:	b2f6      	uxtb	r6, r6
 800658e:	4283      	cmp	r3, r0
 8006590:	4637      	mov	r7, r6
 8006592:	dc04      	bgt.n	800659e <__swbuf_r+0x3a>
 8006594:	4621      	mov	r1, r4
 8006596:	4628      	mov	r0, r5
 8006598:	f7ff ffaa 	bl	80064f0 <_fflush_r>
 800659c:	b9e0      	cbnz	r0, 80065d8 <__swbuf_r+0x74>
 800659e:	68a3      	ldr	r3, [r4, #8]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	60a3      	str	r3, [r4, #8]
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	701e      	strb	r6, [r3, #0]
 80065ac:	6962      	ldr	r2, [r4, #20]
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d004      	beq.n	80065be <__swbuf_r+0x5a>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	07db      	lsls	r3, r3, #31
 80065b8:	d506      	bpl.n	80065c8 <__swbuf_r+0x64>
 80065ba:	2e0a      	cmp	r6, #10
 80065bc:	d104      	bne.n	80065c8 <__swbuf_r+0x64>
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7ff ff95 	bl	80064f0 <_fflush_r>
 80065c6:	b938      	cbnz	r0, 80065d8 <__swbuf_r+0x74>
 80065c8:	4638      	mov	r0, r7
 80065ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065cc:	4621      	mov	r1, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f806 	bl	80065e0 <__swsetup_r>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d0d5      	beq.n	8006584 <__swbuf_r+0x20>
 80065d8:	f04f 37ff 	mov.w	r7, #4294967295
 80065dc:	e7f4      	b.n	80065c8 <__swbuf_r+0x64>
	...

080065e0 <__swsetup_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4b2a      	ldr	r3, [pc, #168]	; (800668c <__swsetup_r+0xac>)
 80065e4:	4605      	mov	r5, r0
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	460c      	mov	r4, r1
 80065ea:	b118      	cbz	r0, 80065f4 <__swsetup_r+0x14>
 80065ec:	6a03      	ldr	r3, [r0, #32]
 80065ee:	b90b      	cbnz	r3, 80065f4 <__swsetup_r+0x14>
 80065f0:	f7ff fa00 	bl	80059f4 <__sinit>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065fa:	0718      	lsls	r0, r3, #28
 80065fc:	d422      	bmi.n	8006644 <__swsetup_r+0x64>
 80065fe:	06d9      	lsls	r1, r3, #27
 8006600:	d407      	bmi.n	8006612 <__swsetup_r+0x32>
 8006602:	2309      	movs	r3, #9
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	e034      	b.n	800667c <__swsetup_r+0x9c>
 8006612:	0758      	lsls	r0, r3, #29
 8006614:	d512      	bpl.n	800663c <__swsetup_r+0x5c>
 8006616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006618:	b141      	cbz	r1, 800662c <__swsetup_r+0x4c>
 800661a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800661e:	4299      	cmp	r1, r3
 8006620:	d002      	beq.n	8006628 <__swsetup_r+0x48>
 8006622:	4628      	mov	r0, r5
 8006624:	f7ff fb0a 	bl	8005c3c <_free_r>
 8006628:	2300      	movs	r3, #0
 800662a:	6363      	str	r3, [r4, #52]	; 0x34
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	2300      	movs	r3, #0
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f043 0308 	orr.w	r3, r3, #8
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	b94b      	cbnz	r3, 800665c <__swsetup_r+0x7c>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d003      	beq.n	800665c <__swsetup_r+0x7c>
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f857 	bl	800670a <__smakebuf_r>
 800665c:	89a0      	ldrh	r0, [r4, #12]
 800665e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006662:	f010 0301 	ands.w	r3, r0, #1
 8006666:	d00a      	beq.n	800667e <__swsetup_r+0x9e>
 8006668:	2300      	movs	r3, #0
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6963      	ldr	r3, [r4, #20]
 800666e:	425b      	negs	r3, r3
 8006670:	61a3      	str	r3, [r4, #24]
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	b943      	cbnz	r3, 8006688 <__swsetup_r+0xa8>
 8006676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800667a:	d1c4      	bne.n	8006606 <__swsetup_r+0x26>
 800667c:	bd38      	pop	{r3, r4, r5, pc}
 800667e:	0781      	lsls	r1, r0, #30
 8006680:	bf58      	it	pl
 8006682:	6963      	ldrpl	r3, [r4, #20]
 8006684:	60a3      	str	r3, [r4, #8]
 8006686:	e7f4      	b.n	8006672 <__swsetup_r+0x92>
 8006688:	2000      	movs	r0, #0
 800668a:	e7f7      	b.n	800667c <__swsetup_r+0x9c>
 800668c:	200000b8 	.word	0x200000b8

08006690 <_sbrk_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d06      	ldr	r5, [pc, #24]	; (80066ac <_sbrk_r+0x1c>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	f7fa fc04 	bl	8000ea8 <_sbrk>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d102      	bne.n	80066aa <_sbrk_r+0x1a>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b103      	cbz	r3, 80066aa <_sbrk_r+0x1a>
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
 80066ac:	200005bc 	.word	0x200005bc

080066b0 <abort>:
 80066b0:	b508      	push	{r3, lr}
 80066b2:	2006      	movs	r0, #6
 80066b4:	f000 f88e 	bl	80067d4 <raise>
 80066b8:	2001      	movs	r0, #1
 80066ba:	f7fa fb7d 	bl	8000db8 <_exit>

080066be <__swhatbuf_r>:
 80066be:	b570      	push	{r4, r5, r6, lr}
 80066c0:	460c      	mov	r4, r1
 80066c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c6:	2900      	cmp	r1, #0
 80066c8:	b096      	sub	sp, #88	; 0x58
 80066ca:	4615      	mov	r5, r2
 80066cc:	461e      	mov	r6, r3
 80066ce:	da0d      	bge.n	80066ec <__swhatbuf_r+0x2e>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066d6:	f04f 0100 	mov.w	r1, #0
 80066da:	bf0c      	ite	eq
 80066dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066e0:	2340      	movne	r3, #64	; 0x40
 80066e2:	2000      	movs	r0, #0
 80066e4:	6031      	str	r1, [r6, #0]
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	b016      	add	sp, #88	; 0x58
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	466a      	mov	r2, sp
 80066ee:	f000 f879 	bl	80067e4 <_fstat_r>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	dbec      	blt.n	80066d0 <__swhatbuf_r+0x12>
 80066f6:	9901      	ldr	r1, [sp, #4]
 80066f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006700:	4259      	negs	r1, r3
 8006702:	4159      	adcs	r1, r3
 8006704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006708:	e7eb      	b.n	80066e2 <__swhatbuf_r+0x24>

0800670a <__smakebuf_r>:
 800670a:	898b      	ldrh	r3, [r1, #12]
 800670c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800670e:	079d      	lsls	r5, r3, #30
 8006710:	4606      	mov	r6, r0
 8006712:	460c      	mov	r4, r1
 8006714:	d507      	bpl.n	8006726 <__smakebuf_r+0x1c>
 8006716:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	2301      	movs	r3, #1
 8006720:	6163      	str	r3, [r4, #20]
 8006722:	b002      	add	sp, #8
 8006724:	bd70      	pop	{r4, r5, r6, pc}
 8006726:	ab01      	add	r3, sp, #4
 8006728:	466a      	mov	r2, sp
 800672a:	f7ff ffc8 	bl	80066be <__swhatbuf_r>
 800672e:	9900      	ldr	r1, [sp, #0]
 8006730:	4605      	mov	r5, r0
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff faf6 	bl	8005d24 <_malloc_r>
 8006738:	b948      	cbnz	r0, 800674e <__smakebuf_r+0x44>
 800673a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800673e:	059a      	lsls	r2, r3, #22
 8006740:	d4ef      	bmi.n	8006722 <__smakebuf_r+0x18>
 8006742:	f023 0303 	bic.w	r3, r3, #3
 8006746:	f043 0302 	orr.w	r3, r3, #2
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	e7e3      	b.n	8006716 <__smakebuf_r+0xc>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	6020      	str	r0, [r4, #0]
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	9b00      	ldr	r3, [sp, #0]
 800675a:	6163      	str	r3, [r4, #20]
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	6120      	str	r0, [r4, #16]
 8006760:	b15b      	cbz	r3, 800677a <__smakebuf_r+0x70>
 8006762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006766:	4630      	mov	r0, r6
 8006768:	f000 f84e 	bl	8006808 <_isatty_r>
 800676c:	b128      	cbz	r0, 800677a <__smakebuf_r+0x70>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f023 0303 	bic.w	r3, r3, #3
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	431d      	orrs	r5, r3
 800677e:	81a5      	strh	r5, [r4, #12]
 8006780:	e7cf      	b.n	8006722 <__smakebuf_r+0x18>

08006782 <_raise_r>:
 8006782:	291f      	cmp	r1, #31
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4604      	mov	r4, r0
 8006788:	460d      	mov	r5, r1
 800678a:	d904      	bls.n	8006796 <_raise_r+0x14>
 800678c:	2316      	movs	r3, #22
 800678e:	6003      	str	r3, [r0, #0]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006798:	b112      	cbz	r2, 80067a0 <_raise_r+0x1e>
 800679a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800679e:	b94b      	cbnz	r3, 80067b4 <_raise_r+0x32>
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f853 	bl	800684c <_getpid_r>
 80067a6:	462a      	mov	r2, r5
 80067a8:	4601      	mov	r1, r0
 80067aa:	4620      	mov	r0, r4
 80067ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067b0:	f000 b83a 	b.w	8006828 <_kill_r>
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d00a      	beq.n	80067ce <_raise_r+0x4c>
 80067b8:	1c59      	adds	r1, r3, #1
 80067ba:	d103      	bne.n	80067c4 <_raise_r+0x42>
 80067bc:	2316      	movs	r3, #22
 80067be:	6003      	str	r3, [r0, #0]
 80067c0:	2001      	movs	r0, #1
 80067c2:	e7e7      	b.n	8006794 <_raise_r+0x12>
 80067c4:	2400      	movs	r4, #0
 80067c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067ca:	4628      	mov	r0, r5
 80067cc:	4798      	blx	r3
 80067ce:	2000      	movs	r0, #0
 80067d0:	e7e0      	b.n	8006794 <_raise_r+0x12>
	...

080067d4 <raise>:
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <raise+0xc>)
 80067d6:	4601      	mov	r1, r0
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	f7ff bfd2 	b.w	8006782 <_raise_r>
 80067de:	bf00      	nop
 80067e0:	200000b8 	.word	0x200000b8

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	; (8006804 <_fstat_r+0x20>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fa fb30 	bl	8000e56 <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	200005bc 	.word	0x200005bc

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	; (8006824 <_isatty_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa fb2f 	bl	8000e76 <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200005bc 	.word	0x200005bc

08006828 <_kill_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d07      	ldr	r5, [pc, #28]	; (8006848 <_kill_r+0x20>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	602b      	str	r3, [r5, #0]
 8006836:	f7fa faaf 	bl	8000d98 <_kill>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	d102      	bne.n	8006844 <_kill_r+0x1c>
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	b103      	cbz	r3, 8006844 <_kill_r+0x1c>
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	200005bc 	.word	0x200005bc

0800684c <_getpid_r>:
 800684c:	f7fa ba9c 	b.w	8000d88 <_getpid>

08006850 <_init>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr

0800685c <_fini>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr
