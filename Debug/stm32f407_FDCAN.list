
stm32f407_FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005074  08005074  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000029c  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000031c  2000031c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013fd1  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000259b  00000000  00000000  000340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c0  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cfa  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021cfe  00000000  00000000  0003841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000126d0  00000000  00000000  0005a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce3ca  00000000  00000000  0006c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004640  00000000  00000000  0013abb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0013f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005044 	.word	0x08005044

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08005044 	.word	0x08005044

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b46      	ldr	r3, [pc, #280]	; (80005f8 <MX_GPIO_Init+0x134>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a45      	ldr	r2, [pc, #276]	; (80005f8 <MX_GPIO_Init+0x134>)
 80004e4:	f043 0310 	orr.w	r3, r3, #16
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b43      	ldr	r3, [pc, #268]	; (80005f8 <MX_GPIO_Init+0x134>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0310 	and.w	r3, r3, #16
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <MX_GPIO_Init+0x134>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a3e      	ldr	r2, [pc, #248]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b3c      	ldr	r3, [pc, #240]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a37      	ldr	r2, [pc, #220]	; (80005f8 <MX_GPIO_Init+0x134>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b31      	ldr	r3, [pc, #196]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a30      	ldr	r2, [pc, #192]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <MX_GPIO_Init+0x134>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <MX_GPIO_Init+0x134>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	21c0      	movs	r1, #192	; 0xc0
 800056a:	4824      	ldr	r0, [pc, #144]	; (80005fc <MX_GPIO_Init+0x138>)
 800056c:	f000 ffc8 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000570:	2318      	movs	r3, #24
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000574:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	481e      	ldr	r0, [pc, #120]	; (8000600 <MX_GPIO_Init+0x13c>)
 8000586:	f000 fe1f 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800058a:	23c0      	movs	r3, #192	; 0xc0
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000592:	2301      	movs	r3, #1
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4816      	ldr	r0, [pc, #88]	; (80005fc <MX_GPIO_Init+0x138>)
 80005a2:	f000 fe11 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <MX_GPIO_Init+0x140>)
 80005bc:	f000 fe04 	bl	80011c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2009      	movs	r0, #9
 80005c6:	f000 fda6 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005ca:	2009      	movs	r0, #9
 80005cc:	f000 fdbf 	bl	800114e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 fd9e 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005da:	200a      	movs	r0, #10
 80005dc:	f000 fdb7 	bl	800114e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2017      	movs	r0, #23
 80005e6:	f000 fd96 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005ea:	2017      	movs	r0, #23
 80005ec:	f000 fdaf 	bl	800114e <HAL_NVIC_EnableIRQ>

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	; 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020000 	.word	0x40020000
 8000600:	40021000 	.word	0x40021000
 8000604:	40020400 	.word	0x40020400

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fc12 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f856 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f7ff ff56 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000618:	f000 fb82 	bl	8000d20 <MX_TIM14_Init>
  MX_SPI1_Init();
 800061c:	f000 f8ca 	bl	80007b4 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000620:	f000 fb48 	bl	8000cb4 <MX_TIM7_Init>
  MX_SPI2_Init();
 8000624:	f000 f8fc 	bl	8000820 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000628:	f000 f930 	bl	800088c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 800062c:	481c      	ldr	r0, [pc, #112]	; (80006a0 <main+0x98>)
 800062e:	f002 fcdf 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
//  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
//  HAL_SPI_Receive_IT(&hspi3, RX_Buffer, BUFFER_SIZE);
//  HAL_SPI_Receive_IT(&hspi3, RX_Buffer, BUFFER_SIZE);
  HAL_SPI_Transmit(&hspi2, TX_Buffer, sizeof(TX_Buffer), 1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	220a      	movs	r2, #10
 8000638:	491a      	ldr	r1, [pc, #104]	; (80006a4 <main+0x9c>)
 800063a:	481b      	ldr	r0, [pc, #108]	; (80006a8 <main+0xa0>)
 800063c:	f001 fc65 	bl	8001f0a <HAL_SPI_Transmit>
  HAL_SPI_Receive_IT(&hspi3, RX_Buffer, sizeof(RX_Buffer));
 8000640:	220a      	movs	r2, #10
 8000642:	491a      	ldr	r1, [pc, #104]	; (80006ac <main+0xa4>)
 8000644:	481a      	ldr	r0, [pc, #104]	; (80006b0 <main+0xa8>)
 8000646:	f001 ff3f 	bl	80024c8 <HAL_SPI_Receive_IT>


  DRV_SPI_Initialize();
 800064a:	f004 fbd5 	bl	8004df8 <DRV_SPI_Initialize>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
//	  HAL_Delay(100);
	  if (flag_send_frame == 1) {
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0xac>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1fb      	bne.n	800064e <main+0x46>
//		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//		  mcp2518fd_transpond();
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_HIGH);
 8000656:	2201      	movs	r2, #1
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	4817      	ldr	r0, [pc, #92]	; (80006b8 <main+0xb0>)
 800065c:	f000 ff50 	bl	8001500 <HAL_GPIO_WritePin>
//		  mcp2518fd_transmit();
//		  mcp2518fd_transpond();
//		  mcp2518fd_receive();
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <main+0xb4>)
 8000668:	f000 ff4a 	bl	8001500 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2,TX_Buffer, sizeof(TX_Buffer),1000);
 800066c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000670:	220a      	movs	r2, #10
 8000672:	490c      	ldr	r1, [pc, #48]	; (80006a4 <main+0x9c>)
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0xa0>)
 8000676:	f001 fc48 	bl	8001f0a <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	480e      	ldr	r0, [pc, #56]	; (80006bc <main+0xb4>)
 8000682:	f000 ff3d 	bl	8001500 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8000686:	20c8      	movs	r0, #200	; 0xc8
 8000688:	f000 fc46 	bl	8000f18 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_LOW);
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <main+0xb0>)
 8000692:	f000 ff35 	bl	8001500 <HAL_GPIO_WritePin>
		  flag_send_frame = 0;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <main+0xac>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
	  if (flag_send_frame == 1) {
 800069c:	e7d7      	b.n	800064e <main+0x46>
 800069e:	bf00      	nop
 80006a0:	20000208 	.word	0x20000208
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000100 	.word	0x20000100
 80006ac:	2000009c 	.word	0x2000009c
 80006b0:	20000158 	.word	0x20000158
 80006b4:	200000a6 	.word	0x200000a6
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fc8c 	bl	8004fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 ff33 	bl	80015b0 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f82a 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f994 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f813 	bl	80007a8 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
//			  //do nothing
//		  }
//
//	  }
//  }
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI1_Init+0x64>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI1_Init+0x64>)
 80007da:	2201      	movs	r2, #1
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e8:	2218      	movs	r2, #24
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI1_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI1_Init+0x64>)
 8000806:	f001 faf7 	bl	8001df8 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f7ff ffca 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000a8 	.word	0x200000a8
 800081c:	40013000 	.word	0x40013000

08000820 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_SPI2_Init+0x64>)
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <MX_SPI2_Init+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_SPI2_Init+0x64>)
 800082c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_SPI2_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_SPI2_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_SPI2_Init+0x64>)
 8000840:	2202      	movs	r2, #2
 8000842:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_SPI2_Init+0x64>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_SPI2_Init+0x64>)
 800084c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000850:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SPI2_Init+0x64>)
 8000854:	2208      	movs	r2, #8
 8000856:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_SPI2_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SPI2_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_SPI2_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_SPI2_Init+0x64>)
 800086c:	220a      	movs	r2, #10
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_SPI2_Init+0x64>)
 8000872:	f001 fac1 	bl	8001df8 <HAL_SPI_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800087c:	f7ff ff94 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000100 	.word	0x20000100
 8000888:	40003800 	.word	0x40003800

0800088c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_SPI3_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_SPI3_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI3_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI3_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008ce:	220a      	movs	r2, #10
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_SPI3_Init+0x5c>)
 80008d4:	f001 fa90 	bl	8001df8 <HAL_SPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 80008de:	f7ff ff63 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000158 	.word	0x20000158
 80008ec:	40003c00 	.word	0x40003c00

080008f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b090      	sub	sp, #64	; 0x40
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a72      	ldr	r2, [pc, #456]	; (8000ad8 <HAL_SPI_MspInit+0x1e8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d152      	bne.n	80009b8 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
 8000916:	4b71      	ldr	r3, [pc, #452]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a70      	ldr	r2, [pc, #448]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b6e      	ldr	r3, [pc, #440]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
 8000932:	4b6a      	ldr	r3, [pc, #424]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a69      	ldr	r2, [pc, #420]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b67      	ldr	r3, [pc, #412]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a62      	ldr	r2, [pc, #392]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b60      	ldr	r3, [pc, #384]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	623b      	str	r3, [r7, #32]
 8000964:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000966:	2310      	movs	r3, #16
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000976:	2305      	movs	r3, #5
 8000978:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097e:	4619      	mov	r1, r3
 8000980:	4857      	ldr	r0, [pc, #348]	; (8000ae0 <HAL_SPI_MspInit+0x1f0>)
 8000982:	f000 fc21 	bl	80011c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000986:	2338      	movs	r3, #56	; 0x38
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000996:	2305      	movs	r3, #5
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4850      	ldr	r0, [pc, #320]	; (8000ae4 <HAL_SPI_MspInit+0x1f4>)
 80009a2:	f000 fc11 	bl	80011c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2023      	movs	r0, #35	; 0x23
 80009ac:	f000 fbb3 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009b0:	2023      	movs	r0, #35	; 0x23
 80009b2:	f000 fbcc 	bl	800114e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b6:	e08b      	b.n	8000ad0 <HAL_SPI_MspInit+0x1e0>
  else if(spiHandle->Instance==SPI2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <HAL_SPI_MspInit+0x1f8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12d      	bne.n	8000a1e <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b42      	ldr	r3, [pc, #264]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	61fb      	str	r3, [r7, #28]
 80009dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a14:	4619      	mov	r1, r3
 8000a16:	4833      	ldr	r0, [pc, #204]	; (8000ae4 <HAL_SPI_MspInit+0x1f4>)
 8000a18:	f000 fbd6 	bl	80011c8 <HAL_GPIO_Init>
}
 8000a1c:	e058      	b.n	8000ad0 <HAL_SPI_MspInit+0x1e0>
  else if(spiHandle->Instance==SPI3)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a32      	ldr	r2, [pc, #200]	; (8000aec <HAL_SPI_MspInit+0x1fc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d153      	bne.n	8000ad0 <HAL_SPI_MspInit+0x1e0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_SPI_MspInit+0x1ec>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a96:	4619      	mov	r1, r3
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <HAL_SPI_MspInit+0x1f0>)
 8000a9a:	f000 fb95 	bl	80011c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <HAL_SPI_MspInit+0x200>)
 8000abc:	f000 fb84 	bl	80011c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2033      	movs	r0, #51	; 0x33
 8000ac6:	f000 fb26 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000aca:	2033      	movs	r0, #51	; 0x33
 8000acc:	f000 fb3f 	bl	800114e <HAL_NVIC_EnableIRQ>
}
 8000ad0:	bf00      	nop
 8000ad2:	3740      	adds	r7, #64	; 0x40
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013000 	.word	0x40013000
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40003800 	.word	0x40003800
 8000aec:	40003c00 	.word	0x40003c00
 8000af0:	40020800 	.word	0x40020800

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f9a2 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b9c:	2008      	movs	r0, #8
 8000b9e:	f000 fce3 	bl	8001568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000bac:	2010      	movs	r0, #16
 8000bae:	f000 fcdb 	bl	8001568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <EXTI4_IRQHandler+0x28>)
 8000bb6:	f000 fcbc 	bl	8001532 <HAL_GPIO_TogglePin>
  counter_btn++;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <EXTI4_IRQHandler+0x2c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <EXTI4_IRQHandler+0x2c>)
 8000bc2:	6013      	str	r3, [r2, #0]
  flag_send_frame = 1;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <EXTI4_IRQHandler+0x30>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	200001b8 	.word	0x200001b8
 8000bd8:	200000a6 	.word	0x200000a6

08000bdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000be0:	2080      	movs	r0, #128	; 0x80
 8000be2:	f000 fcc1 	bl	8001568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ext5_cnt++;
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <EXTI9_5_IRQHandler+0x18>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a01      	ldr	r2, [pc, #4]	; (8000bf4 <EXTI9_5_IRQHandler+0x18>)
 8000bee:	6013      	str	r3, [r2, #0]
//  mcp2518fd_receive();

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200001bc 	.word	0x200001bc

08000bf8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <SPI1_IRQHandler+0x18>)
 8000bfe:	f001 fd95 	bl	800272c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
 8000c02:	220a      	movs	r2, #10
 8000c04:	4903      	ldr	r1, [pc, #12]	; (8000c14 <SPI1_IRQHandler+0x1c>)
 8000c06:	4802      	ldr	r0, [pc, #8]	; (8000c10 <SPI1_IRQHandler+0x18>)
 8000c08:	f001 fc5e 	bl	80024c8 <HAL_SPI_Receive_IT>

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000a8 	.word	0x200000a8
 8000c14:	2000009c 	.word	0x2000009c

08000c18 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>)
 8000c1e:	f002 fa57 	bl	80030d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
	if(counter_timer >= 100000) {
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	490f      	ldr	r1, [pc, #60]	; (8000c68 <TIM8_TRG_COM_TIM14_IRQHandler+0x50>)
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	f173 0300 	sbcs.w	r3, r3, #0
 8000c30:	d30b      	bcc.n	8000c4a <TIM8_TRG_COM_TIM14_IRQHandler+0x32>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <TIM8_TRG_COM_TIM14_IRQHandler+0x54>)
 8000c36:	f000 fc7c 	bl	8001532 <HAL_GPIO_TogglePin>
	  counter_timer = 0;
 8000c3a:	490a      	ldr	r1, [pc, #40]	; (8000c64 <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c1 2300 	strd	r2, r3, [r1]
	else {
	  counter_timer++;
	}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c48:	e008      	b.n	8000c5c <TIM8_TRG_COM_TIM14_IRQHandler+0x44>
	  counter_timer++;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	1c54      	adds	r4, r2, #1
 8000c52:	f143 0500 	adc.w	r5, r3, #0
 8000c56:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <TIM8_TRG_COM_TIM14_IRQHandler+0x4c>)
 8000c58:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000c5c:	bf00      	nop
 8000c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c60:	20000208 	.word	0x20000208
 8000c64:	200001b0 	.word	0x200001b0
 8000c68:	000186a0 	.word	0x000186a0
 8000c6c:	40020000 	.word	0x40020000

08000c70 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <SPI3_IRQHandler+0x18>)
 8000c76:	f001 fd59 	bl	800272c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */
  HAL_SPI_Receive_IT(&hspi3, RX_Buffer, sizeof(RX_Buffer));
 8000c7a:	220a      	movs	r2, #10
 8000c7c:	4903      	ldr	r1, [pc, #12]	; (8000c8c <SPI3_IRQHandler+0x1c>)
 8000c7e:	4802      	ldr	r0, [pc, #8]	; (8000c88 <SPI3_IRQHandler+0x18>)
 8000c80:	f001 fc22 	bl	80024c8 <HAL_SPI_Receive_IT>

  /* USER CODE END SPI3_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000158 	.word	0x20000158
 8000c8c:	2000009c 	.word	0x2000009c

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000cc4:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <MX_TIM7_Init+0x68>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000ce4:	f002 f935 	bl	8002f52 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000cee:	f7ff fd5b 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_TIM7_Init+0x64>)
 8000d00:	f002 fbb6 	bl	8003470 <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000d0a:	f7ff fd4d 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200001c0 	.word	0x200001c0
 8000d1c:	40001400 	.word	0x40001400

08000d20 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <MX_TIM14_Init+0x40>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1-1;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 84-1;
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d38:	2253      	movs	r2, #83	; 0x53
 8000d3a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_TIM14_Init+0x3c>)
 8000d4a:	f002 f902 	bl	8002f52 <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000d54:	f7ff fd28 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000208 	.word	0x20000208
 8000d60:	40002000 	.word	0x40002000

08000d64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <HAL_TIM_Base_MspInit+0x70>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10e      	bne.n	8000d94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_Base_MspInit+0x74>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_TIM_Base_MspInit+0x74>)
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_Base_MspInit+0x74>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0320 	and.w	r3, r3, #32
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000d92:	e01a      	b.n	8000dca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_TIM_Base_MspInit+0x78>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d115      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_TIM_Base_MspInit+0x74>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_TIM_Base_MspInit+0x74>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_TIM_Base_MspInit+0x74>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	202d      	movs	r0, #45	; 0x2d
 8000dc0:	f000 f9a9 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000dc4:	202d      	movs	r0, #45	; 0x2d
 8000dc6:	f000 f9c2 	bl	800114e <HAL_NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40001400 	.word	0x40001400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40002000 	.word	0x40002000

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ff41 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f004 f8f5 	bl	8004ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fbf9 	bl	8000608 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e24:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8000e28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e2c:	2000031c 	.word	0x2000031c

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f94f 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fe44 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f967 	bl	800116a <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f92f 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000014 	.word	0x20000014
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000014 	.word	0x20000014
 8000efc:	20000250 	.word	0x20000250

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000250 	.word	0x20000250

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000014 	.word	0x20000014

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e00c      	b.n	80011ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2205      	movs	r2, #5
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e16b      	b.n	80014bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 815a 	bne.w	80014b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	2b02      	cmp	r3, #2
 8001218:	d130      	bne.n	800127c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80b4 	beq.w	80014b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <HAL_GPIO_Init+0x310>)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x314>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x226>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x318>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x222>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x31c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x21e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x320>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x21a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x324>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x216>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x328>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x212>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x20e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x20a>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00e      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013d2:	2308      	movs	r3, #8
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x310>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_GPIO_Init+0x334>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x334>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_GPIO_Init+0x334>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_GPIO_Init+0x334>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae90 	bls.w	80011e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001544:	887a      	ldrh	r2, [r7, #2]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	041a      	lsls	r2, r3, #16
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43d9      	mvns	r1, r3
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	400b      	ands	r3, r1
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f806 	bl	8001598 <HAL_GPIO_EXTI_Callback>
  }
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40013c00 	.word	0x40013c00

08001598 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e267      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d00c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b7e      	ldr	r3, [pc, #504]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e242      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a68      	ldr	r2, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fc4a 	bl	8000f00 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fc46 	bl	8000f00 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e207      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fc36 	bl	8000f00 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fc32 	bl	8000f00 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4937      	ldr	r1, [pc, #220]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fbeb 	bl	8000f00 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fbe7 	bl	8000f00 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a8      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fbca 	bl	8000f00 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fbc6 	bl	8000f00 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e187      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fbaa 	bl	8000f00 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fba6 	bl	8000f00 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e167      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb93 	bl	8000f00 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fb8f 	bl	8000f00 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d907      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e150      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8097 	beq.w	8001944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb4f 	bl	8000f00 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fb4b 	bl	8000f00 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e10c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ea>
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x30c>
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 80018bc:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fb10 	bl	8000f00 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb0c 	bl	8000f00 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0cb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ee      	beq.n	80018e4 <HAL_RCC_OscConfig+0x334>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fafa 	bl	8000f00 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff faf6 	bl	8000f00 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0b5      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d05c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d141      	bne.n	80019e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff faca 	bl	8000f00 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fac6 	bl	8000f00 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fa9f 	bl	8000f00 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fa9b 	bl	8000f00 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x416>
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa88 	bl	8000f00 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fa84 	bl	8000f00 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e038      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d028      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d121      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cc      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff f9b6 	bl	8000f00 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f9b2 	bl	8000f00 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f916 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	0800505c 	.word	0x0800505c
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000010 	.word	0x20000010

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b090      	sub	sp, #64	; 0x40
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d00d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f200 80a1 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9e:	e09b      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ca4:	e09b      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001caa:	e098      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d028      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd8:	fb03 f201 	mul.w	r2, r3, r1
 8001cdc:	2300      	movs	r3, #0
 8001cde:	fb00 f303 	mul.w	r3, r0, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a43      	ldr	r2, [pc, #268]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cec:	460a      	mov	r2, r1
 8001cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	61fa      	str	r2, [r7, #28]
 8001cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d06:	f7fe fa5f 	bl	80001c8 <__aeabi_uldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d12:	e053      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	617a      	str	r2, [r7, #20]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d26:	f04f 0b00 	mov.w	fp, #0
 8001d2a:	4652      	mov	r2, sl
 8001d2c:	465b      	mov	r3, fp
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	0159      	lsls	r1, r3, #5
 8001d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3c:	0150      	lsls	r0, r2, #5
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	ebb2 080a 	subs.w	r8, r2, sl
 8001d46:	eb63 090b 	sbc.w	r9, r3, fp
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d62:	eb63 0509 	sbc.w	r5, r3, r9
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	00eb      	lsls	r3, r5, #3
 8001d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d74:	00e2      	lsls	r2, r4, #3
 8001d76:	4614      	mov	r4, r2
 8001d78:	461d      	mov	r5, r3
 8001d7a:	eb14 030a 	adds.w	r3, r4, sl
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	eb45 030b 	adc.w	r3, r5, fp
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d92:	4629      	mov	r1, r5
 8001d94:	028b      	lsls	r3, r1, #10
 8001d96:	4621      	mov	r1, r4
 8001d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	028a      	lsls	r2, r1, #10
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	2200      	movs	r2, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db0:	f7fe fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3740      	adds	r7, #64	; 0x40
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	017d7840 	.word	0x017d7840

08001df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07b      	b.n	8001f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e1a:	d009      	beq.n	8001e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
 8001e22:	e005      	b.n	8001e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd50 	bl	80008f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0104 	and.w	r1, r3, #4
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f003 0210 	and.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_SPI_Transmit+0x22>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e126      	b.n	800217a <HAL_SPI_Transmit+0x270>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f34:	f7fe ffe4 	bl	8000f00 <HAL_GetTick>
 8001f38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d002      	beq.n	8001f50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f4e:	e10b      	b.n	8002168 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_SPI_Transmit+0x52>
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f60:	e102      	b.n	8002168 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	88fa      	ldrh	r2, [r7, #6]
 8001f80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa8:	d10f      	bne.n	8001fca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b40      	cmp	r3, #64	; 0x40
 8001fd6:	d007      	beq.n	8001fe8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ff0:	d14b      	bne.n	800208a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_SPI_Transmit+0xf6>
 8001ffa:	8afb      	ldrh	r3, [r7, #22]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d13e      	bne.n	800207e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	1c9a      	adds	r2, r3, #2
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002024:	e02b      	b.n	800207e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	d112      	bne.n	800205a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	1c9a      	adds	r2, r3, #2
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36
 8002058:	e011      	b.n	800207e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205a:	f7fe ff51 	bl	8000f00 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d803      	bhi.n	8002072 <HAL_SPI_Transmit+0x168>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d102      	bne.n	8002078 <HAL_SPI_Transmit+0x16e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800207c:	e074      	b.n	8002168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ce      	bne.n	8002026 <HAL_SPI_Transmit+0x11c>
 8002088:	e04c      	b.n	8002124 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_SPI_Transmit+0x18e>
 8002092:	8afb      	ldrh	r3, [r7, #22]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d140      	bne.n	800211a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	330c      	adds	r3, #12
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020be:	e02c      	b.n	800211a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d113      	bne.n	80020f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80020f4:	e011      	b.n	800211a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f6:	f7fe ff03 	bl	8000f00 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d803      	bhi.n	800210e <HAL_SPI_Transmit+0x204>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d102      	bne.n	8002114 <HAL_SPI_Transmit+0x20a>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002118:	e026      	b.n	8002168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1cd      	bne.n	80020c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fe1d 	bl	8002d68 <SPI_EndRxTxTransaction>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	77fb      	strb	r3, [r7, #31]
 8002164:	e000      	b.n	8002168 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002178:	7ffb      	ldrb	r3, [r7, #31]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08c      	sub	sp, #48	; 0x30
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002190:	2301      	movs	r3, #1
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x26>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e18a      	b.n	80024be <HAL_SPI_TransmitReceive+0x33c>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b0:	f7fe fea6 	bl	8000f00 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d00f      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0x70>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d8:	d107      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x68>
 80021e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d003      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021f0:	e15b      	b.n	80024aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x82>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x82>
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800220a:	e14e      	b.n	80024aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b04      	cmp	r3, #4
 8002216:	d003      	beq.n	8002220 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	887a      	ldrh	r2, [r7, #2]
 8002236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d007      	beq.n	8002274 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227c:	d178      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_SPI_TransmitReceive+0x10a>
 8002286:	8b7b      	ldrh	r3, [r7, #26]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d166      	bne.n	800235a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	881a      	ldrh	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	1c9a      	adds	r2, r3, #2
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b0:	e053      	b.n	800235a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11b      	bne.n	80022f8 <HAL_SPI_TransmitReceive+0x176>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_SPI_TransmitReceive+0x176>
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d113      	bne.n	80022f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	1c9a      	adds	r2, r3, #2
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d119      	bne.n	800233a <HAL_SPI_TransmitReceive+0x1b8>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d014      	beq.n	800233a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	b292      	uxth	r2, r2
 800231c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	1c9a      	adds	r2, r3, #2
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002336:	2301      	movs	r3, #1
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800233a:	f7fe fde1 	bl	8000f00 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002346:	429a      	cmp	r2, r3
 8002348:	d807      	bhi.n	800235a <HAL_SPI_TransmitReceive+0x1d8>
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d003      	beq.n	800235a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002358:	e0a7      	b.n	80024aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1a6      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x130>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1a1      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x130>
 800236e:	e07c      	b.n	800246a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_SPI_TransmitReceive+0x1fc>
 8002378:	8b7b      	ldrh	r3, [r7, #26]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d16b      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a4:	e057      	b.n	8002456 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d11c      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x26c>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d017      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x26c>
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d114      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	330c      	adds	r3, #12
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d119      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x2ae>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d014      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800242c:	2301      	movs	r3, #1
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002430:	f7fe fd66 	bl	8000f00 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800243c:	429a      	cmp	r2, r3
 800243e:	d803      	bhi.n	8002448 <HAL_SPI_TransmitReceive+0x2c6>
 8002440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d102      	bne.n	800244e <HAL_SPI_TransmitReceive+0x2cc>
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002454:	e029      	b.n	80024aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1a2      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x224>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d19d      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fc7a 	bl	8002d68 <SPI_EndRxTxTransaction>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002486:	e010      	b.n	80024aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	e000      	b.n	80024aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3730      	adds	r7, #48	; 0x30
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d110      	bne.n	8002504 <HAL_SPI_Receive_IT+0x3c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ea:	d10b      	bne.n	8002504 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2204      	movs	r2, #4
 80024f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f882 	bl	8002604 <HAL_SPI_TransmitReceive_IT>
 8002500:	4603      	mov	r3, r0
 8002502:	e076      	b.n	80025f2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_SPI_Receive_IT+0x4a>
 800250e:	2302      	movs	r3, #2
 8002510:	e06f      	b.n	80025f2 <HAL_SPI_Receive_IT+0x12a>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d002      	beq.n	800252c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800252a:	e05d      	b.n	80025e8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Receive_IT+0x70>
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800253c:	e054      	b.n	80025e8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2204      	movs	r2, #4
 8002542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_SPI_Receive_IT+0x134>)
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
 8002584:	e002      	b.n	800258c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <HAL_SPI_Receive_IT+0x138>)
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002594:	d10f      	bne.n	80025b6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80025c4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d008      	beq.n	80025e6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e000      	b.n	80025e8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80025e6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08002b45 	.word	0x08002b45
 8002600:	08002afb 	.word	0x08002afb

08002604 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_SPI_TransmitReceive_IT+0x20>
 8002620:	2302      	movs	r3, #2
 8002622:	e075      	b.n	8002710 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002632:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800263a:	7dbb      	ldrb	r3, [r7, #22]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d00d      	beq.n	800265c <HAL_SPI_TransmitReceive_IT+0x58>
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002646:	d106      	bne.n	8002656 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <HAL_SPI_TransmitReceive_IT+0x52>
 8002650:	7dbb      	ldrb	r3, [r7, #22]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800265a:	e054      	b.n	8002706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002672:	e048      	b.n	8002706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b04      	cmp	r3, #4
 800267e:	d003      	beq.n	8002688 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2205      	movs	r2, #5
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	887a      	ldrh	r2, [r7, #2]
 800269e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_SPI_TransmitReceive_IT+0x118>)
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
 80026c6:	e005      	b.n	80026d4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_SPI_TransmitReceive_IT+0x120>)
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_SPI_TransmitReceive_IT+0x124>)
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80026e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d008      	beq.n	8002704 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e000      	b.n	8002706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002704:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800270e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	08002a3d 	.word	0x08002a3d
 8002720:	08002a9d 	.word	0x08002a9d
 8002724:	08002979 	.word	0x08002979
 8002728:	080029dd 	.word	0x080029dd

0800272c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
    return;
 800276a:	e0ce      	b.n	800290a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_SPI_IRQHandler+0x5e>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
    return;
 8002788:	e0bf      	b.n	800290a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_SPI_IRQHandler+0x7e>
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80b0 	beq.w	800290a <HAL_SPI_IRQHandler+0x1de>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80aa 	beq.w	800290a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d011      	beq.n	80027f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	f043 0204 	orr.w	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	e00b      	b.n	8002808 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
        return;
 8002806:	e080      	b.n	800290a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d014      	beq.n	800283c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	2b00      	cmp	r3, #0
 8002866:	d04f      	beq.n	8002908 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002876:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <HAL_SPI_IRQHandler+0x168>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d034      	beq.n	80028fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0203 	bic.w	r2, r2, #3
 80028a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_SPI_IRQHandler+0x1e4>)
 80028b2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fc62 	bl	8001182 <HAL_DMA_Abort_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d016      	beq.n	8002906 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <HAL_SPI_IRQHandler+0x1e4>)
 80028de:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fc4c 	bl	8001182 <HAL_DMA_Abort_IT>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80028fc:	e003      	b.n	8002906 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f81c 	bl	800293c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002904:	e000      	b.n	8002908 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002906:	bf00      	nop
    return;
 8002908:	bf00      	nop
  }
}
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	08002951 	.word	0x08002951

08002914 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ffe6 	bl	800293c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f103 020c 	add.w	r2, r3, #12
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10f      	bne.n	80029d4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa0c 	bl	8002dec <SPI_CloseRxTx_ISR>
    }
  }
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a22:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9dc 	bl	8002dec <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	1c9a      	adds	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9ac 	bl	8002dec <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f97d 	bl	8002dec <SPI_CloseRxTx_ISR>
    }
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f103 020c 	add.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9cc 	bl	8002ed4 <SPI_CloseRx_ISR>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	b292      	uxth	r2, r2
 8002b58:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	1c9a      	adds	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f9a9 	bl	8002ed4 <SPI_CloseRx_ISR>
  }
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b9c:	f7fe f9b0 	bl	8000f00 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bac:	f7fe f9a8 	bl	8000f00 <HAL_GetTick>
 8002bb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	0d1b      	lsrs	r3, r3, #20
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc2:	e054      	b.n	8002c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d050      	beq.n	8002c6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bcc:	f7fe f998 	bl	8000f00 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d902      	bls.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d13d      	bne.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfa:	d111      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c04:	d004      	beq.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d107      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d10f      	bne.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e017      	b.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d19b      	bne.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb0:	d111      	bne.n	8002cd6 <SPI_EndRxTransaction+0x3a>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cba:	d004      	beq.n	8002cc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d107      	bne.n	8002cd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cde:	d12a      	bne.n	8002d36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d012      	beq.n	8002d10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ff49 	bl	8002b8c <SPI_WaitFlagStateUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02d      	beq.n	8002d5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e026      	b.n	8002d5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ff36 	bl	8002b8c <SPI_WaitFlagStateUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01a      	beq.n	8002d5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e013      	b.n	8002d5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2101      	movs	r1, #1
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ff23 	bl	8002b8c <SPI_WaitFlagStateUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <SPI_EndRxTxTransaction+0x7c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <SPI_EndRxTxTransaction+0x80>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0d5b      	lsrs	r3, r3, #21
 8002d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d92:	d112      	bne.n	8002dba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff fef4 	bl	8002b8c <SPI_WaitFlagStateUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e00f      	b.n	8002dda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d0f2      	beq.n	8002dba <SPI_EndRxTxTransaction+0x52>
 8002dd4:	e000      	b.n	8002dd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dd6:	bf00      	nop
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c
 8002de8:	165e9f81 	.word	0x165e9f81

08002dec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <SPI_CloseRxTx_ISR+0xe0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a35      	ldr	r2, [pc, #212]	; (8002ed0 <SPI_CloseRxTx_ISR+0xe4>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a5b      	lsrs	r3, r3, #9
 8002e00:	2264      	movs	r2, #100	; 0x64
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e08:	f7fe f87a 	bl	8000f00 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0220 	bic.w	r2, r2, #32
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e30:	e009      	b.n	8002e46 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0eb      	beq.n	8002e1e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	2164      	movs	r1, #100	; 0x64
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff8c 	bl	8002d68 <SPI_EndRxTxTransaction>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d115      	bne.n	8002eb4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d107      	bne.n	8002ea4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fd39 	bl	8002914 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002ea2:	e00e      	b.n	8002ec2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fd3b 	bl	8002928 <HAL_SPI_TxRxCpltCallback>
}
 8002eb2:	e006      	b.n	8002ec2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd3d 	bl	800293c <HAL_SPI_ErrorCallback>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c
 8002ed0:	057619f1 	.word	0x057619f1

08002ed4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002eec:	f7fe f808 	bl	8000f00 <HAL_GetTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2164      	movs	r1, #100	; 0x64
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fed0 	bl	8002c9c <SPI_EndRxTransaction>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fce9 	bl	8002914 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f42:	e002      	b.n	8002f4a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff fcf9 	bl	800293c <HAL_SPI_ErrorCallback>
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e041      	b.n	8002fe8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fd fef3 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f000 f9cd 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04e      	b.n	80030a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d01d      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_TIM_Base_Start_IT+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d111      	bne.n	8003094 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d010      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003092:	e007      	b.n	80030a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40010400 	.word	0x40010400
 80030c8:	40014000 	.word	0x40014000
 80030cc:	40001800 	.word	0x40001800

080030d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0202 	mvn.w	r2, #2
 80030fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8ee 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f8e0 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f8f1 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0204 	mvn.w	r2, #4
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8c4 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8b6 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8c7 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0208 	mvn.w	r2, #8
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f89a 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f88c 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f89d 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0210 	mvn.w	r2, #16
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2208      	movs	r2, #8
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f870 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f862 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f873 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0201 	mvn.w	r2, #1
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd faa0 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f97e 	bl	800357c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f838 	bl	800331c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0220 	mvn.w	r2, #32
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f948 	bl	8003568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a40      	ldr	r2, [pc, #256]	; (8003444 <TIM_Base_SetConfig+0x114>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <TIM_Base_SetConfig+0x118>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3c      	ldr	r2, [pc, #240]	; (800344c <TIM_Base_SetConfig+0x11c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <TIM_Base_SetConfig+0x120>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <TIM_Base_SetConfig+0x124>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <TIM_Base_SetConfig+0x114>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d027      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2c      	ldr	r2, [pc, #176]	; (8003448 <TIM_Base_SetConfig+0x118>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d023      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <TIM_Base_SetConfig+0x11c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <TIM_Base_SetConfig+0x120>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a29      	ldr	r2, [pc, #164]	; (8003454 <TIM_Base_SetConfig+0x124>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <TIM_Base_SetConfig+0x128>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a27      	ldr	r2, [pc, #156]	; (800345c <TIM_Base_SetConfig+0x12c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <TIM_Base_SetConfig+0x130>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <TIM_Base_SetConfig+0x134>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <TIM_Base_SetConfig+0x138>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <TIM_Base_SetConfig+0x13c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <TIM_Base_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0xf8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <TIM_Base_SetConfig+0x124>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40010000 	.word	0x40010000
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800
 8003450:	40000c00 	.word	0x40000c00
 8003454:	40010400 	.word	0x40010400
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	40001800 	.word	0x40001800
 8003468:	40001c00 	.word	0x40001c00
 800346c:	40002000 	.word	0x40002000

08003470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e05a      	b.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d01d      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10c      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	40014000 	.word	0x40014000
 8003564:	40001800 	.word	0x40001800

08003568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 800359a:	2302      	movs	r3, #2
 800359c:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <DRV_CANFDSPI_Reset+0x3c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <DRV_CANFDSPI_Reset+0x3c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	705a      	strb	r2, [r3, #1]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	79f8      	ldrb	r0, [r7, #7]
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <DRV_CANFDSPI_Reset+0x40>)
 80035b4:	4905      	ldr	r1, [pc, #20]	; (80035cc <DRV_CANFDSPI_Reset+0x3c>)
 80035b6:	f001 fce1 	bl	8004f7c <DRV_SPI_TransferData>
 80035ba:	4603      	mov	r3, r0
 80035bc:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80035be:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000254 	.word	0x20000254
 80035d0:	200002b8 	.word	0x200002b8

080035d4 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	603a      	str	r2, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
 80035e0:	460b      	mov	r3, r1
 80035e2:	80bb      	strh	r3, [r7, #4]
    uint16_t spiTransferSize = 3;
 80035e4:	2303      	movs	r3, #3
 80035e6:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80035ec:	88bb      	ldrh	r3, [r7, #4]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3330      	adds	r3, #48	; 0x30
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <DRV_CANFDSPI_ReadByte+0x60>)
 8003600:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003602:	88bb      	ldrh	r3, [r7, #4]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <DRV_CANFDSPI_ReadByte+0x60>)
 8003608:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = 0;
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <DRV_CANFDSPI_ReadByte+0x60>)
 800360c:	2200      	movs	r2, #0
 800360e:	709a      	strb	r2, [r3, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003610:	89fb      	ldrh	r3, [r7, #14]
 8003612:	79f8      	ldrb	r0, [r7, #7]
 8003614:	4a08      	ldr	r2, [pc, #32]	; (8003638 <DRV_CANFDSPI_ReadByte+0x64>)
 8003616:	4907      	ldr	r1, [pc, #28]	; (8003634 <DRV_CANFDSPI_ReadByte+0x60>)
 8003618:	f001 fcb0 	bl	8004f7c <DRV_SPI_TransferData>
 800361c:	4603      	mov	r3, r0
 800361e:	737b      	strb	r3, [r7, #13]

    // Update data
    *rxd = spiReceiveBuffer[2];
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <DRV_CANFDSPI_ReadByte+0x64>)
 8003622:	789a      	ldrb	r2, [r3, #2]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003628:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000254 	.word	0x20000254
 8003638:	200002b8 	.word	0x200002b8

0800363c <DRV_CANFDSPI_WriteByte>:

    return spiTransferError_ReadByte;
}

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
 8003646:	460b      	mov	r3, r1
 8003648:	80bb      	strh	r3, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	71bb      	strb	r3, [r7, #6]
    uint16_t spiTransferSize = 3;
 800364e:	2303      	movs	r3, #3
 8003650:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8003656:	88bb      	ldrh	r3, [r7, #4]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	b29b      	uxth	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3320      	adds	r3, #32
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <DRV_CANFDSPI_WriteByte+0x5c>)
 800366a:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800366c:	88bb      	ldrh	r3, [r7, #4]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003672:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = txd;
 8003674:	4a08      	ldr	r2, [pc, #32]	; (8003698 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003676:	79bb      	ldrb	r3, [r7, #6]
 8003678:	7093      	strb	r3, [r2, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 800367a:	89fb      	ldrh	r3, [r7, #14]
 800367c:	79f8      	ldrb	r0, [r7, #7]
 800367e:	4a07      	ldr	r2, [pc, #28]	; (800369c <DRV_CANFDSPI_WriteByte+0x60>)
 8003680:	4905      	ldr	r1, [pc, #20]	; (8003698 <DRV_CANFDSPI_WriteByte+0x5c>)
 8003682:	f001 fc7b 	bl	8004f7c <DRV_SPI_TransferData>
 8003686:	4603      	mov	r3, r0
 8003688:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 800368a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000254 	.word	0x20000254
 800369c:	200002b8 	.word	0x200002b8

080036a0 <DRV_CANFDSPI_WriteWord>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	603a      	str	r2, [r7, #0]
 80036aa:	71fb      	strb	r3, [r7, #7]
 80036ac:	460b      	mov	r3, r1
 80036ae:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 80036b0:	2306      	movs	r3, #6
 80036b2:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	72fb      	strb	r3, [r7, #11]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	b29b      	uxth	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	3320      	adds	r3, #32
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <DRV_CANFDSPI_WriteWord+0x78>)
 80036cc:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80036ce:	88bb      	ldrh	r3, [r7, #4]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <DRV_CANFDSPI_WriteWord+0x78>)
 80036d4:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e00b      	b.n	80036f4 <DRV_CANFDSPI_WriteWord+0x54>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	40da      	lsrs	r2, r3
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	3302      	adds	r3, #2
 80036e8:	b2d1      	uxtb	r1, r2
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <DRV_CANFDSPI_WriteWord+0x78>)
 80036ec:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	3301      	adds	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d9f0      	bls.n	80036dc <DRV_CANFDSPI_WriteWord+0x3c>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80036fa:	89bb      	ldrh	r3, [r7, #12]
 80036fc:	79f8      	ldrb	r0, [r7, #7]
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <DRV_CANFDSPI_WriteWord+0x7c>)
 8003700:	4905      	ldr	r1, [pc, #20]	; (8003718 <DRV_CANFDSPI_WriteWord+0x78>)
 8003702:	f001 fc3b 	bl	8004f7c <DRV_SPI_TransferData>
 8003706:	4603      	mov	r3, r0
 8003708:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 800370a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000254 	.word	0x20000254
 800371c:	200002b8 	.word	0x200002b8

08003720 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60ba      	str	r2, [r7, #8]
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	460b      	mov	r3, r1
 8003730:	81bb      	strh	r3, [r7, #12]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	3302      	adds	r3, #2
 800373a:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8003740:	89bb      	ldrh	r3, [r7, #12]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	b29b      	uxth	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	b2db      	uxtb	r3, r3
 800374e:	3320      	adds	r3, #32
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8003754:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003756:	89bb      	ldrh	r3, [r7, #12]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 800375c:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 2; i < spiTransferSize; i++) {
 800375e:	2302      	movs	r3, #2
 8003760:	82fb      	strh	r3, [r7, #22]
 8003762:	e00a      	b.n	800377a <DRV_CANFDSPI_WriteByteArray+0x5a>
        spiTransmitBuffer[i] = txd[i - 2];
 8003764:	8afb      	ldrh	r3, [r7, #22]
 8003766:	3b02      	subs	r3, #2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	441a      	add	r2, r3
 800376c:	8afb      	ldrh	r3, [r7, #22]
 800376e:	7811      	ldrb	r1, [r2, #0]
 8003770:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8003772:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003774:	8afb      	ldrh	r3, [r7, #22]
 8003776:	3301      	adds	r3, #1
 8003778:	82fb      	strh	r3, [r7, #22]
 800377a:	8afa      	ldrh	r2, [r7, #22]
 800377c:	8abb      	ldrh	r3, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3f0      	bcc.n	8003764 <DRV_CANFDSPI_WriteByteArray+0x44>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8003782:	8abb      	ldrh	r3, [r7, #20]
 8003784:	7bf8      	ldrb	r0, [r7, #15]
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <DRV_CANFDSPI_WriteByteArray+0x84>)
 8003788:	4905      	ldr	r1, [pc, #20]	; (80037a0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 800378a:	f001 fbf7 	bl	8004f7c <DRV_SPI_TransferData>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]

    return spiTransferError;
 8003792:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000254 	.word	0x20000254
 80037a4:	200002b8 	.word	0x200002b8

080037a8 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <DRV_CANFDSPI_Configure+0x118>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	7a3b      	ldrb	r3, [r7, #8]
 80037ca:	f362 0304 	bfi	r3, r2, #0, #5
 80037ce:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	7a3b      	ldrb	r3, [r7, #8]
 80037dc:	f362 1345 	bfi	r3, r2, #5, #1
 80037e0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	7a3b      	ldrb	r3, [r7, #8]
 80037ee:	f362 1386 	bfi	r3, r2, #6, #1
 80037f2:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	7a7b      	ldrb	r3, [r7, #9]
 8003800:	f362 0300 	bfi	r3, r2, #0, #1
 8003804:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	785b      	ldrb	r3, [r3, #1]
 800380a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800380e:	b2da      	uxtb	r2, r3
 8003810:	7a7b      	ldrb	r3, [r7, #9]
 8003812:	f362 0342 	bfi	r3, r2, #1, #2
 8003816:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	7a7b      	ldrb	r3, [r7, #9]
 8003824:	f362 1304 	bfi	r3, r2, #4, #1
 8003828:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	7abb      	ldrb	r3, [r7, #10]
 8003836:	f362 0300 	bfi	r3, r2, #0, #1
 800383a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	7abb      	ldrb	r3, [r7, #10]
 8003848:	f362 0341 	bfi	r3, r2, #1, #1
 800384c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	7abb      	ldrb	r3, [r7, #10]
 800385a:	f362 0382 	bfi	r3, r2, #2, #1
 800385e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	7abb      	ldrb	r3, [r7, #10]
 800386c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003870:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	7abb      	ldrb	r3, [r7, #10]
 800387e:	f362 1304 	bfi	r3, r2, #4, #1
 8003882:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	789b      	ldrb	r3, [r3, #2]
 8003888:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800388c:	b2da      	uxtb	r2, r3
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	f362 1307 	bfi	r3, r2, #4, #4
 8003894:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff feff 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <DRV_CANFDSPI_Configure+0x10c>
        return -1;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	e001      	b.n	80038b8 <DRV_CANFDSPI_Configure+0x110>
    }

    return spiTransferError;
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000018 	.word	0x20000018

080038c4 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80038cc:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 80038d2:	7b3b      	ldrb	r3, [r7, #12]
 80038d4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80038d8:	b2d9      	uxtb	r1, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	7813      	ldrb	r3, [r2, #0]
 80038de:	f361 0304 	bfi	r3, r1, #0, #5
 80038e2:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 80038e4:	7b3b      	ldrb	r3, [r7, #12]
 80038e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038ea:	b2d9      	uxtb	r1, r3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	7813      	ldrb	r3, [r2, #0]
 80038f0:	f361 1345 	bfi	r3, r1, #5, #1
 80038f4:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 80038f6:	7b3b      	ldrb	r3, [r7, #12]
 80038f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038fc:	b2d9      	uxtb	r1, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	7813      	ldrb	r3, [r2, #0]
 8003902:	f361 1386 	bfi	r3, r1, #6, #1
 8003906:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8003908:	7b7b      	ldrb	r3, [r7, #13]
 800390a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800390e:	b2d9      	uxtb	r1, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	7813      	ldrb	r3, [r2, #0]
 8003914:	f361 13c7 	bfi	r3, r1, #7, #1
 8003918:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 800391a:	7b7b      	ldrb	r3, [r7, #13]
 800391c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003920:	b2d9      	uxtb	r1, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	7853      	ldrb	r3, [r2, #1]
 8003926:	f361 0301 	bfi	r3, r1, #0, #2
 800392a:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 800392c:	7b7b      	ldrb	r3, [r7, #13]
 800392e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003932:	b2d9      	uxtb	r1, r3
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	7853      	ldrb	r3, [r2, #1]
 8003938:	f361 0382 	bfi	r3, r1, #2, #1
 800393c:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003944:	b2d9      	uxtb	r1, r3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	7853      	ldrb	r3, [r2, #1]
 800394a:	f361 03c3 	bfi	r3, r1, #3, #1
 800394e:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003956:	b2d9      	uxtb	r1, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	7853      	ldrb	r3, [r2, #1]
 800395c:	f361 1304 	bfi	r3, r1, #4, #1
 8003960:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003968:	b2d9      	uxtb	r1, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	7853      	ldrb	r3, [r2, #1]
 800396e:	f361 1345 	bfi	r3, r1, #5, #1
 8003972:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800397a:	b2d9      	uxtb	r1, r3
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	7853      	ldrb	r3, [r2, #1]
 8003980:	f361 1386 	bfi	r3, r1, #6, #1
 8003984:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800398c:	b2d9      	uxtb	r1, r3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	7853      	ldrb	r3, [r2, #1]
 8003992:	f361 13c7 	bfi	r3, r1, #7, #1
 8003996:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800399e:	b2d9      	uxtb	r1, r3
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	7893      	ldrb	r3, [r2, #2]
 80039a4:	f361 0303 	bfi	r3, r1, #0, #4
 80039a8:	7093      	strb	r3, [r2, #2]

    return 0;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20000018 	.word	0x20000018

080039bc <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	460a      	mov	r2, r1
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 80039d4:	f107 020e 	add.w	r2, r7, #14
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	2103      	movs	r1, #3
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fdf9 	bl	80035d4 <DRV_CANFDSPI_ReadByte>
 80039e2:	4603      	mov	r3, r0
 80039e4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	e01a      	b.n	8003a2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 80039fe:	7bba      	ldrb	r2, [r7, #14]
 8003a00:	79bb      	ldrb	r3, [r7, #6]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8003a08:	7bba      	ldrb	r2, [r7, #14]
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2103      	movs	r1, #3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fe14 	bl	800363c <DRV_CANFDSPI_WriteByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8003a20:	f06f 0301 	mvn.w	r3, #1
 8003a24:	e001      	b.n	8003a2a <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	603a      	str	r2, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	460b      	mov	r3, r1
 8003a42:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <DRV_CANFDSPI_TransmitChannelConfigure+0xb0>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.TxEnable = 1;
 8003a52:	7a3b      	ldrb	r3, [r7, #8]
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	7afb      	ldrb	r3, [r7, #11]
 8003a66:	f362 0304 	bfi	r3, r2, #0, #5
 8003a6a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	f362 1347 	bfi	r3, r2, #5, #3
 8003a7c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	7abb      	ldrb	r3, [r7, #10]
 8003a8a:	f362 1346 	bfi	r3, r2, #5, #2
 8003a8e:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	7abb      	ldrb	r3, [r7, #10]
 8003a9c:	f362 0304 	bfi	r3, r2, #0, #5
 8003aa0:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	7a3b      	ldrb	r3, [r7, #8]
 8003aae:	f362 1386 	bfi	r3, r2, #6, #1
 8003ab2:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003ab4:	79bb      	ldrb	r3, [r7, #6]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	0052      	lsls	r2, r2, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3350      	adds	r3, #80	; 0x50
 8003ac4:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	89b9      	ldrh	r1, [r7, #12]
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fde7 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000018 	.word	0x20000018

08003ae8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x78>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8003af6:	7b3b      	ldrb	r3, [r7, #12]
 8003af8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003afc:	b2d9      	uxtb	r1, r3
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	7813      	ldrb	r3, [r2, #0]
 8003b02:	f361 0300 	bfi	r3, r1, #0, #1
 8003b06:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8003b08:	7bbb      	ldrb	r3, [r7, #14]
 8003b0a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003b0e:	b2d9      	uxtb	r1, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	7813      	ldrb	r3, [r2, #0]
 8003b14:	f361 0345 	bfi	r3, r1, #1, #5
 8003b18:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8003b1a:	7bbb      	ldrb	r3, [r7, #14]
 8003b1c:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003b20:	b2d9      	uxtb	r1, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	7813      	ldrb	r3, [r2, #0]
 8003b26:	f361 1387 	bfi	r3, r1, #6, #2
 8003b2a:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003b32:	b2d9      	uxtb	r1, r3
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	7853      	ldrb	r3, [r2, #1]
 8003b38:	f361 0304 	bfi	r3, r1, #0, #5
 8003b3c:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003b44:	b2d9      	uxtb	r1, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	7853      	ldrb	r3, [r2, #1]
 8003b4a:	f361 1347 	bfi	r3, r1, #5, #3
 8003b4e:	7053      	strb	r3, [r2, #1]

    return 0;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000018 	.word	0x20000018

08003b64 <DRV_CANFDSPI_TransmitQueueConfigure>:

int8_t DRV_CANFDSPI_TransmitQueueConfigure(CANFDSPI_MODULE_ID index,
        CAN_TX_QUEUE_CONFIG* config)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	71fb      	strb	r3, [r7, #7]
#ifndef CAN_TXQUEUE_IMPLEMENTED
    config;
    return -100;
#else
    int8_t spiTransferError = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiTXQCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <DRV_CANFDSPI_TransmitQueueConfigure+0x8c>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8003b7e:	7a3b      	ldrb	r3, [r7, #8]
 8003b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b84:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	f362 0304 	bfi	r3, r2, #0, #5
 8003b96:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
 8003ba4:	f362 1347 	bfi	r3, r2, #5, #3
 8003ba8:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	7abb      	ldrb	r3, [r7, #10]
 8003bb6:	f362 1346 	bfi	r3, r2, #5, #2
 8003bba:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	7abb      	ldrb	r3, [r7, #10]
 8003bc8:	f362 0304 	bfi	r3, r2, #0, #5
 8003bcc:	72bb      	strb	r3, [r7, #10]

    a = cREGADDR_CiTXQCON;
 8003bce:	2350      	movs	r3, #80	; 0x50
 8003bd0:	81bb      	strh	r3, [r7, #12]
    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	89b9      	ldrh	r1, [r7, #12]
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fd61 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif    
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000018 	.word	0x20000018

08003bf4 <DRV_CANFDSPI_TransmitQueueConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONFIG* config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <DRV_CANFDSPI_TransmitQueueConfigureObjectReset+0x64>)
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	60fb      	str	r3, [r7, #12]

    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8003c02:	7bbb      	ldrb	r3, [r7, #14]
 8003c04:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003c08:	b2d9      	uxtb	r1, r3
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	7813      	ldrb	r3, [r2, #0]
 8003c0e:	f361 0304 	bfi	r3, r1, #0, #5
 8003c12:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003c1a:	b2d9      	uxtb	r1, r3
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	7813      	ldrb	r3, [r2, #0]
 8003c20:	f361 1346 	bfi	r3, r1, #5, #2
 8003c24:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003c2c:	b2d9      	uxtb	r1, r3
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	8813      	ldrh	r3, [r2, #0]
 8003c32:	f361 13cb 	bfi	r3, r1, #7, #5
 8003c36:	8013      	strh	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003c3e:	b2d9      	uxtb	r1, r3
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	7853      	ldrb	r3, [r2, #1]
 8003c44:	f361 1306 	bfi	r3, r1, #4, #3
 8003c48:	7053      	strb	r3, [r2, #1]

    return 0;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	20000018 	.word	0x20000018

08003c5c <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	603a      	str	r2, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	81bb      	strh	r3, [r7, #12]

#ifdef CAN_TXQUEUE_IMPLEMENTED
    if (channel == CAN_TXQUEUE_CH0) {
 8003c74:	79bb      	ldrb	r3, [r7, #6]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 8003c7a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003c7e:	e034      	b.n	8003cea <DRV_CANFDSPI_ReceiveChannelConfigure+0x8e>
    }
#endif

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canControlResetValues[cREGADDR_CiFIFOCON / 4 - 1];
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x98>)
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8003c86:	7a3b      	ldrb	r3, [r7, #8]
 8003c88:	f36f 13c7 	bfc	r3, #7, #1
 8003c8c:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	7afb      	ldrb	r3, [r7, #11]
 8003c9a:	f362 0304 	bfi	r3, r2, #0, #5
 8003c9e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	f362 1347 	bfi	r3, r2, #5, #3
 8003cb0:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	7a3b      	ldrb	r3, [r7, #8]
 8003cbe:	f362 1345 	bfi	r3, r2, #5, #1
 8003cc2:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003cc4:	79bb      	ldrb	r3, [r7, #6]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	0052      	lsls	r2, r2, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3350      	adds	r3, #80	; 0x50
 8003cd4:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	89b9      	ldrh	r1, [r7, #12]
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fcdf 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000018 	.word	0x20000018

08003cf8 <DRV_CANFDSPI_TefConfigure>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_TefConfigure(CANFDSPI_MODULE_ID index, CAN_TEF_CONFIG* config)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]

    // Setup FIFO
    REG_CiTEFCON ciTefCon;
    ciTefCon.word = canControlResetValues[cREGADDR_CiTEFCON / 4 - 1];
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <DRV_CANFDSPI_TefConfigure+0x58>)
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	60bb      	str	r3, [r7, #8]

    ciTefCon.bF.FifoSize = config->FifoSize;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f362 0304 	bfi	r3, r2, #0, #5
 8003d1e:	72fb      	strb	r3, [r7, #11]
    ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	7a3b      	ldrb	r3, [r7, #8]
 8003d2c:	f362 1345 	bfi	r3, r2, #5, #1
 8003d30:	723b      	strb	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTEFCON, ciTefCon.word);
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2140      	movs	r1, #64	; 0x40
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fcb1 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000018 	.word	0x20000018

08003d54 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8003d66:	f107 020e 	add.w	r2, r7, #14
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fc2f 	bl	80035d4 <DRV_CANFDSPI_ReadByte>
 8003d76:	4603      	mov	r3, r0
 8003d78:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	e015      	b.n	8003db4 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8003d88:	7bbb      	ldrb	r3, [r7, #14]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 8003d92:	7bba      	ldrb	r2, [r7, #14]
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fc4e 	bl	800363c <DRV_CANFDSPI_WriteByte>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8003dac:	f06f 0301 	mvn.w	r3, #1
 8003db0:	e000      	b.n	8003db4 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b09e      	sub	sp, #120	; 0x78
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	71fb      	strb	r3, [r7, #7]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH];
    uint32_t k;
    int8_t spiTransferError = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8003dd6:	e008      	b.n	8003dea <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8003dd8:	f107 020c 	add.w	r2, r7, #12
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dde:	4413      	add	r3, r2
 8003de0:	79ba      	ldrb	r2, [r7, #6]
 8003de2:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
 8003de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de6:	3301      	adds	r3, #1
 8003de8:	677b      	str	r3, [r7, #116]	; 0x74
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	2b63      	cmp	r3, #99	; 0x63
 8003dee:	d9f3      	bls.n	8003dd8 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8003df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
 8003df8:	2300      	movs	r3, #0
 8003dfa:	677b      	str	r3, [r7, #116]	; 0x74
 8003dfc:	e019      	b.n	8003e32 <DRV_CANFDSPI_RamInit+0x76>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH);
 8003dfe:	f107 020c 	add.w	r2, r7, #12
 8003e02:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8003e06:	79f8      	ldrb	r0, [r7, #7]
 8003e08:	2364      	movs	r3, #100	; 0x64
 8003e0a:	f7ff fc89 	bl	8003720 <DRV_CANFDSPI_WriteByteArray>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        if (spiTransferError) {
 8003e14:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <DRV_CANFDSPI_RamInit+0x66>
            return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	e00c      	b.n	8003e3c <DRV_CANFDSPI_RamInit+0x80>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH;
 8003e22:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003e26:	3364      	adds	r3, #100	; 0x64
 8003e28:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
 8003e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2e:	3301      	adds	r3, #1
 8003e30:	677b      	str	r3, [r7, #116]	; 0x74
 8003e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e34:	2b13      	cmp	r3, #19
 8003e36:	d9e2      	bls.n	8003dfe <DRV_CANFDSPI_RamInit+0x42>
    }

    return spiTransferError;
 8003e38:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3778      	adds	r7, #120	; 0x78
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <DRV_CANFDSPI_OscillatorControlSet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_OscillatorControlSet(CANFDSPI_MODULE_ID index,
        CAN_OSC_CTRL ctrl)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]

    REG_OSC osc;
    osc.word = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]

    osc.bF.PllEnable = ctrl.PllEnable;
 8003e58:	783b      	ldrb	r3, [r7, #0]
 8003e5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	7a3b      	ldrb	r3, [r7, #8]
 8003e62:	f362 0300 	bfi	r3, r2, #0, #1
 8003e66:	723b      	strb	r3, [r7, #8]
    osc.bF.OscDisable = ctrl.OscDisable;
 8003e68:	783b      	ldrb	r3, [r7, #0]
 8003e6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	7a3b      	ldrb	r3, [r7, #8]
 8003e72:	f362 0382 	bfi	r3, r2, #2, #1
 8003e76:	723b      	strb	r3, [r7, #8]
    osc.bF.SCLKDIV = ctrl.SclkDivide;
 8003e78:	783b      	ldrb	r3, [r7, #0]
 8003e7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	7a3b      	ldrb	r3, [r7, #8]
 8003e82:	f362 1304 	bfi	r3, r2, #4, #1
 8003e86:	723b      	strb	r3, [r7, #8]
    osc.bF.CLKODIV = ctrl.ClkOutDivide;
 8003e88:	783b      	ldrb	r3, [r7, #0]
 8003e8a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	7a3b      	ldrb	r3, [r7, #8]
 8003e92:	f362 1346 	bfi	r3, r2, #5, #2
 8003e96:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_OSC, osc.byte[0]);
 8003e98:	7a3a      	ldrb	r2, [r7, #8]
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fbcb 	bl	800363c <DRV_CANFDSPI_WriteByte>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <DRV_CANFDSPI_OscillatorControlObjectReset>:

int8_t DRV_CANFDSPI_OscillatorControlObjectReset(CAN_OSC_CTRL* ctrl)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    REG_OSC osc;
    osc.word = mcp2517ControlResetValues[0];
 8003ec0:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <DRV_CANFDSPI_OscillatorControlObjectReset+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]

    ctrl->PllEnable = osc.bF.PllEnable;
 8003ec6:	7b3b      	ldrb	r3, [r7, #12]
 8003ec8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ecc:	b2d9      	uxtb	r1, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	7813      	ldrb	r3, [r2, #0]
 8003ed2:	f361 0300 	bfi	r3, r1, #0, #1
 8003ed6:	7013      	strb	r3, [r2, #0]
    ctrl->OscDisable = osc.bF.OscDisable;
 8003ed8:	7b3b      	ldrb	r3, [r7, #12]
 8003eda:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ede:	b2d9      	uxtb	r1, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	7813      	ldrb	r3, [r2, #0]
 8003ee4:	f361 0341 	bfi	r3, r1, #1, #1
 8003ee8:	7013      	strb	r3, [r2, #0]
    ctrl->SclkDivide = osc.bF.SCLKDIV;
 8003eea:	7b3b      	ldrb	r3, [r7, #12]
 8003eec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ef0:	b2d9      	uxtb	r1, r3
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	7813      	ldrb	r3, [r2, #0]
 8003ef6:	f361 0382 	bfi	r3, r1, #2, #1
 8003efa:	7013      	strb	r3, [r2, #0]
    ctrl->ClkOutDivide = osc.bF.CLKODIV;
 8003efc:	7b3b      	ldrb	r3, [r7, #12]
 8003efe:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003f02:	b2d9      	uxtb	r1, r3
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	7813      	ldrb	r3, [r2, #0]
 8003f08:	f361 03c4 	bfi	r3, r1, #3, #2
 8003f0c:	7013      	strb	r3, [r2, #0]

    return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	20000068 	.word	0x20000068

08003f20 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4623      	mov	r3, r4
 8003f30:	71fb      	strb	r3, [r7, #7]
 8003f32:	4603      	mov	r3, r0
 8003f34:	71bb      	strb	r3, [r7, #6]
 8003f36:	460b      	mov	r3, r1
 8003f38:	717b      	strb	r3, [r7, #5]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8003f42:	793b      	ldrb	r3, [r7, #4]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d036      	beq.n	8003fb6 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	dc4c      	bgt.n	8003fe6 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d018      	beq.n	8003f86 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8003f54:	e047      	b.n	8003fe6 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8003f56:	79ba      	ldrb	r2, [r7, #6]
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f84b 	bl	8003ff8 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	e03d      	b.n	8003ff0 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8003f74:	797a      	ldrb	r2, [r7, #5]
 8003f76:	79b9      	ldrb	r1, [r7, #6]
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f8c4 	bl	8004108 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
            break;
 8003f84:	e032      	b.n	8003fec <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8003f86:	79ba      	ldrb	r2, [r7, #6]
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 faf3 	bl	8004578 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8003f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa2:	e025      	b.n	8003ff0 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8003fa4:	797a      	ldrb	r2, [r7, #5]
 8003fa6:	79b9      	ldrb	r1, [r7, #6]
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fb72 	bl	8004694 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]
            break;
 8003fb4:	e01a      	b.n	8003fec <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8003fb6:	79ba      	ldrb	r2, [r7, #6]
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fd13 	bl	80049e8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8003fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	e00d      	b.n	8003ff0 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8003fd4:	797a      	ldrb	r2, [r7, #5]
 8003fd6:	79b9      	ldrb	r1, [r7, #6]
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fd92 	bl	8004b04 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
            break;
 8003fe4:	e002      	b.n	8003fec <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8003fe6:	23ff      	movs	r3, #255	; 0xff
 8003fe8:	73fb      	strb	r3, [r7, #15]
            break;
 8003fea:	bf00      	nop
    }

    return spiTransferError;
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	460a      	mov	r2, r1
 8004002:	71fb      	strb	r3, [r7, #7]
 8004004:	4613      	mov	r3, r2
 8004006:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800400c:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x10c>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004012:	79bb      	ldrb	r3, [r7, #6]
 8004014:	2b11      	cmp	r3, #17
 8004016:	d863      	bhi.n	80040e0 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe8>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x28>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004069 	.word	0x08004069
 8004024:	08004069 	.word	0x08004069
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
 8004034:	08004069 	.word	0x08004069
 8004038:	08004069 	.word	0x08004069
 800403c:	08004069 	.word	0x08004069
 8004040:	08004087 	.word	0x08004087
 8004044:	08004087 	.word	0x08004087
 8004048:	08004087 	.word	0x08004087
 800404c:	08004087 	.word	0x08004087
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
 800405c:	080040a5 	.word	0x080040a5
 8004060:	080040a5 	.word	0x080040a5
 8004064:	080040c3 	.word	0x080040c3
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800406c:	233e      	movs	r3, #62	; 0x3e
 800406e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004070:	7a7b      	ldrb	r3, [r7, #9]
 8004072:	220f      	movs	r2, #15
 8004074:	f362 0306 	bfi	r3, r2, #0, #7
 8004078:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800407a:	7a3b      	ldrb	r3, [r7, #8]
 800407c:	220f      	movs	r2, #15
 800407e:	f362 0306 	bfi	r3, r2, #0, #7
 8004082:	723b      	strb	r3, [r7, #8]
            break;
 8004084:	e02f      	b.n	80040e6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800408a:	237e      	movs	r3, #126	; 0x7e
 800408c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800408e:	7a7b      	ldrb	r3, [r7, #9]
 8004090:	221f      	movs	r2, #31
 8004092:	f362 0306 	bfi	r3, r2, #0, #7
 8004096:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004098:	7a3b      	ldrb	r3, [r7, #8]
 800409a:	221f      	movs	r2, #31
 800409c:	f362 0306 	bfi	r3, r2, #0, #7
 80040a0:	723b      	strb	r3, [r7, #8]
            break;
 80040a2:	e020      	b.n	80040e6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80040a8:	231e      	movs	r3, #30
 80040aa:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80040ac:	7a7b      	ldrb	r3, [r7, #9]
 80040ae:	2207      	movs	r2, #7
 80040b0:	f362 0306 	bfi	r3, r2, #0, #7
 80040b4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80040b6:	7a3b      	ldrb	r3, [r7, #8]
 80040b8:	2207      	movs	r2, #7
 80040ba:	f362 0306 	bfi	r3, r2, #0, #7
 80040be:	723b      	strb	r3, [r7, #8]
            break;
 80040c0:	e011      	b.n	80040e6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 80040c6:	23fe      	movs	r3, #254	; 0xfe
 80040c8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 80040ca:	7a7b      	ldrb	r3, [r7, #9]
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	f362 0306 	bfi	r3, r2, #0, #7
 80040d2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 80040d4:	7a3b      	ldrb	r3, [r7, #8]
 80040d6:	223f      	movs	r2, #63	; 0x3f
 80040d8:	f362 0306 	bfi	r3, r2, #0, #7
 80040dc:	723b      	strb	r3, [r7, #8]
            break;
 80040de:	e002      	b.n	80040e6 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xee>

        default:
            return -1;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	e009      	b.n	80040fa <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x102>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	2104      	movs	r1, #4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fad7 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000018 	.word	0x20000018

08004108 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
 8004112:	460b      	mov	r3, r1
 8004114:	71bb      	strb	r3, [r7, #6]
 8004116:	4613      	mov	r3, r2
 8004118:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800411e:	4be2      	ldr	r3, [pc, #904]	; (80044a8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8004128:	7abb      	ldrb	r3, [r7, #10]
 800412a:	2202      	movs	r2, #2
 800412c:	f362 0301 	bfi	r3, r2, #0, #2
 8004130:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8004136:	79bb      	ldrb	r3, [r7, #6]
 8004138:	2b11      	cmp	r3, #17
 800413a:	f200 81f5 	bhi.w	8004528 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	0800418d 	.word	0x0800418d
 8004148:	080041cb 	.word	0x080041cb
 800414c:	08004209 	.word	0x08004209
 8004150:	08004247 	.word	0x08004247
 8004154:	08004285 	.word	0x08004285
 8004158:	080042c3 	.word	0x080042c3
 800415c:	080042fd 	.word	0x080042fd
 8004160:	08004331 	.word	0x08004331
 8004164:	08004363 	.word	0x08004363
 8004168:	080043a9 	.word	0x080043a9
 800416c:	080043ef 	.word	0x080043ef
 8004170:	0800442d 	.word	0x0800442d
 8004174:	0800446b 	.word	0x0800446b
 8004178:	080044ad 	.word	0x080044ad
 800417c:	080044eb 	.word	0x080044eb
 8004180:	08004247 	.word	0x08004247
 8004184:	080042fd 	.word	0x080042fd
 8004188:	08004363 	.word	0x08004363
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	221e      	movs	r2, #30
 8004194:	f362 0304 	bfi	r3, r2, #0, #5
 8004198:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	2207      	movs	r2, #7
 800419e:	f362 0303 	bfi	r3, r2, #0, #4
 80041a2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80041a4:	7b3b      	ldrb	r3, [r7, #12]
 80041a6:	2207      	movs	r2, #7
 80041a8:	f362 0303 	bfi	r3, r2, #0, #4
 80041ac:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80041ae:	7a7b      	ldrb	r3, [r7, #9]
 80041b0:	221f      	movs	r2, #31
 80041b2:	f362 0306 	bfi	r3, r2, #0, #7
 80041b6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	7a3b      	ldrb	r3, [r7, #8]
 80041c2:	f362 0305 	bfi	r3, r2, #0, #6
 80041c6:	723b      	strb	r3, [r7, #8]
            break;
 80041c8:	e1b1      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80041ce:	7bbb      	ldrb	r3, [r7, #14]
 80041d0:	220e      	movs	r2, #14
 80041d2:	f362 0304 	bfi	r3, r2, #0, #5
 80041d6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80041d8:	7b7b      	ldrb	r3, [r7, #13]
 80041da:	2203      	movs	r2, #3
 80041dc:	f362 0303 	bfi	r3, r2, #0, #4
 80041e0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80041e2:	7b3b      	ldrb	r3, [r7, #12]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f362 0303 	bfi	r3, r2, #0, #4
 80041ea:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80041ec:	7a7b      	ldrb	r3, [r7, #9]
 80041ee:	220f      	movs	r2, #15
 80041f0:	f362 0306 	bfi	r3, r2, #0, #7
 80041f4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	7a3b      	ldrb	r3, [r7, #8]
 8004200:	f362 0305 	bfi	r3, r2, #0, #6
 8004204:	723b      	strb	r3, [r7, #8]
            break;
 8004206:	e192      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	2208      	movs	r2, #8
 8004210:	f362 0304 	bfi	r3, r2, #0, #5
 8004214:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	2202      	movs	r2, #2
 800421a:	f362 0303 	bfi	r3, r2, #0, #4
 800421e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004220:	7b3b      	ldrb	r3, [r7, #12]
 8004222:	2202      	movs	r2, #2
 8004224:	f362 0303 	bfi	r3, r2, #0, #4
 8004228:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800422a:	7a7b      	ldrb	r3, [r7, #9]
 800422c:	2209      	movs	r2, #9
 800422e:	f362 0306 	bfi	r3, r2, #0, #7
 8004232:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423a:	b2da      	uxtb	r2, r3
 800423c:	7a3b      	ldrb	r3, [r7, #8]
 800423e:	f362 0305 	bfi	r3, r2, #0, #6
 8004242:	723b      	strb	r3, [r7, #8]
            break;
 8004244:	e173      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	2206      	movs	r2, #6
 800424e:	f362 0304 	bfi	r3, r2, #0, #5
 8004252:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004254:	7b7b      	ldrb	r3, [r7, #13]
 8004256:	2201      	movs	r2, #1
 8004258:	f362 0303 	bfi	r3, r2, #0, #4
 800425c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800425e:	7b3b      	ldrb	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f362 0303 	bfi	r3, r2, #0, #4
 8004266:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004268:	7a7b      	ldrb	r3, [r7, #9]
 800426a:	2207      	movs	r2, #7
 800426c:	f362 0306 	bfi	r3, r2, #0, #7
 8004270:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	b2da      	uxtb	r2, r3
 800427a:	7a3b      	ldrb	r3, [r7, #8]
 800427c:	f362 0305 	bfi	r3, r2, #0, #6
 8004280:	723b      	strb	r3, [r7, #8]
            break;
 8004282:	e154      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8004288:	7bbb      	ldrb	r3, [r7, #14]
 800428a:	2204      	movs	r2, #4
 800428c:	f362 0304 	bfi	r3, r2, #0, #5
 8004290:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004292:	7b7b      	ldrb	r3, [r7, #13]
 8004294:	2201      	movs	r2, #1
 8004296:	f362 0303 	bfi	r3, r2, #0, #4
 800429a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800429c:	7b3b      	ldrb	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f362 0303 	bfi	r3, r2, #0, #4
 80042a4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 80042a6:	7a7b      	ldrb	r3, [r7, #9]
 80042a8:	2205      	movs	r2, #5
 80042aa:	f362 0306 	bfi	r3, r2, #0, #7
 80042ae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	7a3b      	ldrb	r3, [r7, #8]
 80042ba:	f362 0305 	bfi	r3, r2, #0, #6
 80042be:	723b      	strb	r3, [r7, #8]
            break;
 80042c0:	e135      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 80042c6:	7bbb      	ldrb	r3, [r7, #14]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f362 0304 	bfi	r3, r2, #0, #5
 80042ce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80042d0:	7b7b      	ldrb	r3, [r7, #13]
 80042d2:	f36f 0303 	bfc	r3, #0, #4
 80042d6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80042d8:	7b3b      	ldrb	r3, [r7, #12]
 80042da:	f36f 0303 	bfc	r3, #0, #4
 80042de:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 80042e0:	7a7b      	ldrb	r3, [r7, #9]
 80042e2:	2204      	movs	r2, #4
 80042e4:	f362 0306 	bfi	r3, r2, #0, #7
 80042e8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	7a3b      	ldrb	r3, [r7, #8]
 80042f4:	f362 0305 	bfi	r3, r2, #0, #6
 80042f8:	723b      	strb	r3, [r7, #8]
            break;
 80042fa:	e118      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	2202      	movs	r2, #2
 8004304:	f362 0304 	bfi	r3, r2, #0, #5
 8004308:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800430a:	7b7b      	ldrb	r3, [r7, #13]
 800430c:	f36f 0303 	bfc	r3, #0, #4
 8004310:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004312:	7b3b      	ldrb	r3, [r7, #12]
 8004314:	f36f 0303 	bfc	r3, #0, #4
 8004318:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800431a:	7a7b      	ldrb	r3, [r7, #9]
 800431c:	2203      	movs	r2, #3
 800431e:	f362 0306 	bfi	r3, r2, #0, #7
 8004322:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8004324:	7a3b      	ldrb	r3, [r7, #8]
 8004326:	2201      	movs	r2, #1
 8004328:	f362 0305 	bfi	r3, r2, #0, #6
 800432c:	723b      	strb	r3, [r7, #8]
            break;
 800432e:	e0fe      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	2201      	movs	r2, #1
 8004338:	f362 0304 	bfi	r3, r2, #0, #5
 800433c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800433e:	7b7b      	ldrb	r3, [r7, #13]
 8004340:	f36f 0303 	bfc	r3, #0, #4
 8004344:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004346:	7b3b      	ldrb	r3, [r7, #12]
 8004348:	f36f 0303 	bfc	r3, #0, #4
 800434c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 800434e:	7a7b      	ldrb	r3, [r7, #9]
 8004350:	2202      	movs	r2, #2
 8004352:	f362 0306 	bfi	r3, r2, #0, #7
 8004356:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8004358:	7a3b      	ldrb	r3, [r7, #8]
 800435a:	f36f 0305 	bfc	r3, #0, #6
 800435e:	723b      	strb	r3, [r7, #8]
            break;
 8004360:	e0e5      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004366:	7bbb      	ldrb	r3, [r7, #14]
 8004368:	221e      	movs	r2, #30
 800436a:	f362 0304 	bfi	r3, r2, #0, #5
 800436e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004370:	7b7b      	ldrb	r3, [r7, #13]
 8004372:	2207      	movs	r2, #7
 8004374:	f362 0303 	bfi	r3, r2, #0, #4
 8004378:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800437a:	7b3b      	ldrb	r3, [r7, #12]
 800437c:	2207      	movs	r2, #7
 800437e:	f362 0303 	bfi	r3, r2, #0, #4
 8004382:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004384:	7a7b      	ldrb	r3, [r7, #9]
 8004386:	221f      	movs	r2, #31
 8004388:	f362 0306 	bfi	r3, r2, #0, #7
 800438c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004394:	b2da      	uxtb	r2, r3
 8004396:	7a3b      	ldrb	r3, [r7, #8]
 8004398:	f362 0305 	bfi	r3, r2, #0, #6
 800439c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800439e:	7abb      	ldrb	r3, [r7, #10]
 80043a0:	f36f 0301 	bfc	r3, #0, #2
 80043a4:	72bb      	strb	r3, [r7, #10]
            break;
 80043a6:	e0c2      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80043ac:	7bbb      	ldrb	r3, [r7, #14]
 80043ae:	2211      	movs	r2, #17
 80043b0:	f362 0304 	bfi	r3, r2, #0, #5
 80043b4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80043b6:	7b7b      	ldrb	r3, [r7, #13]
 80043b8:	2204      	movs	r2, #4
 80043ba:	f362 0303 	bfi	r3, r2, #0, #4
 80043be:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80043c0:	7b3b      	ldrb	r3, [r7, #12]
 80043c2:	2204      	movs	r2, #4
 80043c4:	f362 0303 	bfi	r3, r2, #0, #4
 80043c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80043ca:	7a7b      	ldrb	r3, [r7, #9]
 80043cc:	2212      	movs	r2, #18
 80043ce:	f362 0306 	bfi	r3, r2, #0, #7
 80043d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	7a3b      	ldrb	r3, [r7, #8]
 80043de:	f362 0305 	bfi	r3, r2, #0, #6
 80043e2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80043e4:	7abb      	ldrb	r3, [r7, #10]
 80043e6:	f36f 0301 	bfc	r3, #0, #2
 80043ea:	72bb      	strb	r3, [r7, #10]
            break;
 80043ec:	e09f      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 80043f2:	7bbb      	ldrb	r3, [r7, #14]
 80043f4:	221e      	movs	r2, #30
 80043f6:	f362 0304 	bfi	r3, r2, #0, #5
 80043fa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 80043fc:	7b7b      	ldrb	r3, [r7, #13]
 80043fe:	2207      	movs	r2, #7
 8004400:	f362 0303 	bfi	r3, r2, #0, #4
 8004404:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004406:	7b3b      	ldrb	r3, [r7, #12]
 8004408:	2207      	movs	r2, #7
 800440a:	f362 0303 	bfi	r3, r2, #0, #4
 800440e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004410:	7a7b      	ldrb	r3, [r7, #9]
 8004412:	221f      	movs	r2, #31
 8004414:	f362 0306 	bfi	r3, r2, #0, #7
 8004418:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004420:	b2da      	uxtb	r2, r3
 8004422:	7a3b      	ldrb	r3, [r7, #8]
 8004424:	f362 0305 	bfi	r3, r2, #0, #6
 8004428:	723b      	strb	r3, [r7, #8]
            break;
 800442a:	e080      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8004430:	7bbb      	ldrb	r3, [r7, #14]
 8004432:	2212      	movs	r2, #18
 8004434:	f362 0304 	bfi	r3, r2, #0, #5
 8004438:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 800443a:	7b7b      	ldrb	r3, [r7, #13]
 800443c:	2205      	movs	r2, #5
 800443e:	f362 0303 	bfi	r3, r2, #0, #4
 8004442:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8004444:	7b3b      	ldrb	r3, [r7, #12]
 8004446:	2205      	movs	r2, #5
 8004448:	f362 0303 	bfi	r3, r2, #0, #4
 800444c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 800444e:	7a7b      	ldrb	r3, [r7, #9]
 8004450:	2213      	movs	r2, #19
 8004452:	f362 0306 	bfi	r3, r2, #0, #7
 8004456:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800445e:	b2da      	uxtb	r2, r3
 8004460:	7a3b      	ldrb	r3, [r7, #8]
 8004462:	f362 0305 	bfi	r3, r2, #0, #6
 8004466:	723b      	strb	r3, [r7, #8]
            break;
 8004468:	e061      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	220e      	movs	r2, #14
 8004472:	f362 0304 	bfi	r3, r2, #0, #5
 8004476:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004478:	7b7b      	ldrb	r3, [r7, #13]
 800447a:	2203      	movs	r2, #3
 800447c:	f362 0303 	bfi	r3, r2, #0, #4
 8004480:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004482:	7b3b      	ldrb	r3, [r7, #12]
 8004484:	2203      	movs	r2, #3
 8004486:	f362 0303 	bfi	r3, r2, #0, #4
 800448a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800448c:	7a7b      	ldrb	r3, [r7, #9]
 800448e:	220f      	movs	r2, #15
 8004490:	f362 0306 	bfi	r3, r2, #0, #7
 8004494:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449c:	b2da      	uxtb	r2, r3
 800449e:	7a3b      	ldrb	r3, [r7, #8]
 80044a0:	f362 0305 	bfi	r3, r2, #0, #6
 80044a4:	723b      	strb	r3, [r7, #8]
            break;
 80044a6:	e042      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 80044a8:	20000018 	.word	0x20000018
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80044b0:	7bbb      	ldrb	r3, [r7, #14]
 80044b2:	2208      	movs	r2, #8
 80044b4:	f362 0304 	bfi	r3, r2, #0, #5
 80044b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80044ba:	7b7b      	ldrb	r3, [r7, #13]
 80044bc:	2202      	movs	r2, #2
 80044be:	f362 0303 	bfi	r3, r2, #0, #4
 80044c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80044c4:	7b3b      	ldrb	r3, [r7, #12]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f362 0303 	bfi	r3, r2, #0, #4
 80044cc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80044ce:	7a7b      	ldrb	r3, [r7, #9]
 80044d0:	2209      	movs	r2, #9
 80044d2:	f362 0306 	bfi	r3, r2, #0, #7
 80044d6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	7a3b      	ldrb	r3, [r7, #8]
 80044e2:	f362 0305 	bfi	r3, r2, #0, #6
 80044e6:	723b      	strb	r3, [r7, #8]
            break;
 80044e8:	e021      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	2206      	movs	r2, #6
 80044f2:	f362 0304 	bfi	r3, r2, #0, #5
 80044f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80044f8:	7b7b      	ldrb	r3, [r7, #13]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f362 0303 	bfi	r3, r2, #0, #4
 8004500:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004502:	7b3b      	ldrb	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f362 0303 	bfi	r3, r2, #0, #4
 800450a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800450c:	7a7b      	ldrb	r3, [r7, #9]
 800450e:	2207      	movs	r2, #7
 8004510:	f362 0306 	bfi	r3, r2, #0, #7
 8004514:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800451c:	b2da      	uxtb	r2, r3
 800451e:	7a3b      	ldrb	r3, [r7, #8]
 8004520:	f362 0305 	bfi	r3, r2, #0, #6
 8004524:	723b      	strb	r3, [r7, #8]
            break;
 8004526:	e002      	b.n	800452e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	e01f      	b.n	800456e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	2108      	movs	r1, #8
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f8b3 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 800453a:	4603      	mov	r3, r0
 800453c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800453e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8004546:	f06f 0301 	mvn.w	r3, #1
 800454a:	e010      	b.n	800456e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	210c      	movs	r1, #12
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff f8a4 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800455c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8004564:	f06f 0302 	mvn.w	r3, #2
 8004568:	e001      	b.n	800456e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 800456a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop

08004578 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	460a      	mov	r2, r1
 8004582:	71fb      	strb	r3, [r7, #7]
 8004584:	4613      	mov	r3, r2
 8004586:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800458c:	4b40      	ldr	r3, [pc, #256]	; (8004690 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x118>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004592:	79bb      	ldrb	r3, [r7, #6]
 8004594:	2b11      	cmp	r3, #17
 8004596:	d863      	bhi.n	8004660 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe8>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x28>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045e9 	.word	0x080045e9
 80045a8:	08004661 	.word	0x08004661
 80045ac:	080045e9 	.word	0x080045e9
 80045b0:	080045e9 	.word	0x080045e9
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080045e9 	.word	0x080045e9
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	08004607 	.word	0x08004607
 80045c4:	08004607 	.word	0x08004607
 80045c8:	08004607 	.word	0x08004607
 80045cc:	08004607 	.word	0x08004607
 80045d0:	08004607 	.word	0x08004607
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004607 	.word	0x08004607
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004643 	.word	0x08004643
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80045ec:	231e      	movs	r3, #30
 80045ee:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80045f0:	7a7b      	ldrb	r3, [r7, #9]
 80045f2:	2207      	movs	r2, #7
 80045f4:	f362 0306 	bfi	r3, r2, #0, #7
 80045f8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80045fa:	7a3b      	ldrb	r3, [r7, #8]
 80045fc:	2207      	movs	r2, #7
 80045fe:	f362 0306 	bfi	r3, r2, #0, #7
 8004602:	723b      	strb	r3, [r7, #8]
            break;
 8004604:	e02f      	b.n	8004666 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800460a:	233e      	movs	r3, #62	; 0x3e
 800460c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800460e:	7a7b      	ldrb	r3, [r7, #9]
 8004610:	220f      	movs	r2, #15
 8004612:	f362 0306 	bfi	r3, r2, #0, #7
 8004616:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004618:	7a3b      	ldrb	r3, [r7, #8]
 800461a:	220f      	movs	r2, #15
 800461c:	f362 0306 	bfi	r3, r2, #0, #7
 8004620:	723b      	strb	r3, [r7, #8]
            break;
 8004622:	e020      	b.n	8004666 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8004628:	230e      	movs	r3, #14
 800462a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 800462c:	7a7b      	ldrb	r3, [r7, #9]
 800462e:	2203      	movs	r2, #3
 8004630:	f362 0306 	bfi	r3, r2, #0, #7
 8004634:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8004636:	7a3b      	ldrb	r3, [r7, #8]
 8004638:	2203      	movs	r2, #3
 800463a:	f362 0306 	bfi	r3, r2, #0, #7
 800463e:	723b      	strb	r3, [r7, #8]
            break;
 8004640:	e011      	b.n	8004666 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8004646:	237e      	movs	r3, #126	; 0x7e
 8004648:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800464a:	7a7b      	ldrb	r3, [r7, #9]
 800464c:	221f      	movs	r2, #31
 800464e:	f362 0306 	bfi	r3, r2, #0, #7
 8004652:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004654:	7a3b      	ldrb	r3, [r7, #8]
 8004656:	221f      	movs	r2, #31
 8004658:	f362 0306 	bfi	r3, r2, #0, #7
 800465c:	723b      	strb	r3, [r7, #8]
            break;
 800465e:	e002      	b.n	8004666 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xee>

        default:
            return -1;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	e010      	b.n	8004688 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x110>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2104      	movs	r1, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f817 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8004672:	4603      	mov	r3, r0
 8004674:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
        return -2;
 800467e:	f06f 0301 	mvn.w	r3, #1
 8004682:	e001      	b.n	8004688 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x110>
    }

    return spiTransferError;
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000018 	.word	0x20000018

08004694 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	460b      	mov	r3, r1
 80046a0:	71bb      	strb	r3, [r7, #6]
 80046a2:	4613      	mov	r3, r2
 80046a4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80046aa:	4bce      	ldr	r3, [pc, #824]	; (80049e4 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80046b4:	7abb      	ldrb	r3, [r7, #10]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f362 0301 	bfi	r3, r2, #0, #2
 80046bc:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	2b11      	cmp	r3, #17
 80046c6:	f200 8165 	bhi.w	8004994 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004757 	.word	0x08004757
 80046d8:	08004995 	.word	0x08004995
 80046dc:	08004795 	.word	0x08004795
 80046e0:	080047cf 	.word	0x080047cf
 80046e4:	08004809 	.word	0x08004809
 80046e8:	08004809 	.word	0x08004809
 80046ec:	08004809 	.word	0x08004809
 80046f0:	0800480f 	.word	0x0800480f
 80046f4:	08004855 	.word	0x08004855
 80046f8:	0800489b 	.word	0x0800489b
 80046fc:	080048d9 	.word	0x080048d9
 8004700:	08004917 	.word	0x08004917
 8004704:	08004955 	.word	0x08004955
 8004708:	0800495b 	.word	0x0800495b
 800470c:	08004795 	.word	0x08004795
 8004710:	08004809 	.word	0x08004809
 8004714:	0800480f 	.word	0x0800480f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800471c:	7bbb      	ldrb	r3, [r7, #14]
 800471e:	220e      	movs	r2, #14
 8004720:	f362 0304 	bfi	r3, r2, #0, #5
 8004724:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004726:	7b7b      	ldrb	r3, [r7, #13]
 8004728:	2203      	movs	r2, #3
 800472a:	f362 0303 	bfi	r3, r2, #0, #4
 800472e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004730:	7b3b      	ldrb	r3, [r7, #12]
 8004732:	2203      	movs	r2, #3
 8004734:	f362 0303 	bfi	r3, r2, #0, #4
 8004738:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800473a:	7a7b      	ldrb	r3, [r7, #9]
 800473c:	220f      	movs	r2, #15
 800473e:	f362 0306 	bfi	r3, r2, #0, #7
 8004742:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474a:	b2da      	uxtb	r2, r3
 800474c:	7a3b      	ldrb	r3, [r7, #8]
 800474e:	f362 0305 	bfi	r3, r2, #0, #6
 8004752:	723b      	strb	r3, [r7, #8]
            break;
 8004754:	e121      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800475a:	7bbb      	ldrb	r3, [r7, #14]
 800475c:	2206      	movs	r2, #6
 800475e:	f362 0304 	bfi	r3, r2, #0, #5
 8004762:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004764:	7b7b      	ldrb	r3, [r7, #13]
 8004766:	2201      	movs	r2, #1
 8004768:	f362 0303 	bfi	r3, r2, #0, #4
 800476c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800476e:	7b3b      	ldrb	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f362 0303 	bfi	r3, r2, #0, #4
 8004776:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004778:	7a7b      	ldrb	r3, [r7, #9]
 800477a:	2207      	movs	r2, #7
 800477c:	f362 0306 	bfi	r3, r2, #0, #7
 8004780:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004788:	b2da      	uxtb	r2, r3
 800478a:	7a3b      	ldrb	r3, [r7, #8]
 800478c:	f362 0305 	bfi	r3, r2, #0, #6
 8004790:	723b      	strb	r3, [r7, #8]
            break;
 8004792:	e102      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004798:	7bbb      	ldrb	r3, [r7, #14]
 800479a:	2202      	movs	r2, #2
 800479c:	f362 0304 	bfi	r3, r2, #0, #5
 80047a0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80047a2:	7b7b      	ldrb	r3, [r7, #13]
 80047a4:	f36f 0303 	bfc	r3, #0, #4
 80047a8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80047aa:	7b3b      	ldrb	r3, [r7, #12]
 80047ac:	f36f 0303 	bfc	r3, #0, #4
 80047b0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80047b2:	7a7b      	ldrb	r3, [r7, #9]
 80047b4:	2203      	movs	r2, #3
 80047b6:	f362 0306 	bfi	r3, r2, #0, #7
 80047ba:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	7a3b      	ldrb	r3, [r7, #8]
 80047c6:	f362 0305 	bfi	r3, r2, #0, #6
 80047ca:	723b      	strb	r3, [r7, #8]
            break;
 80047cc:	e0e5      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80047d2:	7bbb      	ldrb	r3, [r7, #14]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f362 0304 	bfi	r3, r2, #0, #5
 80047da:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80047dc:	7b7b      	ldrb	r3, [r7, #13]
 80047de:	f36f 0303 	bfc	r3, #0, #4
 80047e2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80047e4:	7b3b      	ldrb	r3, [r7, #12]
 80047e6:	f36f 0303 	bfc	r3, #0, #4
 80047ea:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 80047ec:	7a7b      	ldrb	r3, [r7, #9]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f362 0306 	bfi	r3, r2, #0, #7
 80047f4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	7a3b      	ldrb	r3, [r7, #8]
 8004800:	f362 0305 	bfi	r3, r2, #0, #6
 8004804:	723b      	strb	r3, [r7, #8]
            break;
 8004806:	e0c8      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e0e5      	b.n	80049da <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>


        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004812:	7bbb      	ldrb	r3, [r7, #14]
 8004814:	221e      	movs	r2, #30
 8004816:	f362 0304 	bfi	r3, r2, #0, #5
 800481a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800481c:	7b7b      	ldrb	r3, [r7, #13]
 800481e:	2207      	movs	r2, #7
 8004820:	f362 0303 	bfi	r3, r2, #0, #4
 8004824:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004826:	7b3b      	ldrb	r3, [r7, #12]
 8004828:	2207      	movs	r2, #7
 800482a:	f362 0303 	bfi	r3, r2, #0, #4
 800482e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004830:	7a7b      	ldrb	r3, [r7, #9]
 8004832:	221f      	movs	r2, #31
 8004834:	f362 0306 	bfi	r3, r2, #0, #7
 8004838:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004840:	b2da      	uxtb	r2, r3
 8004842:	7a3b      	ldrb	r3, [r7, #8]
 8004844:	f362 0305 	bfi	r3, r2, #0, #6
 8004848:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800484a:	7abb      	ldrb	r3, [r7, #10]
 800484c:	f36f 0301 	bfc	r3, #0, #2
 8004850:	72bb      	strb	r3, [r7, #10]
            break;
 8004852:	e0a2      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8004858:	7bbb      	ldrb	r3, [r7, #14]
 800485a:	2211      	movs	r2, #17
 800485c:	f362 0304 	bfi	r3, r2, #0, #5
 8004860:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8004862:	7b7b      	ldrb	r3, [r7, #13]
 8004864:	2204      	movs	r2, #4
 8004866:	f362 0303 	bfi	r3, r2, #0, #4
 800486a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 800486c:	7b3b      	ldrb	r3, [r7, #12]
 800486e:	2204      	movs	r2, #4
 8004870:	f362 0303 	bfi	r3, r2, #0, #4
 8004874:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8004876:	7a7b      	ldrb	r3, [r7, #9]
 8004878:	2212      	movs	r2, #18
 800487a:	f362 0306 	bfi	r3, r2, #0, #7
 800487e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004886:	b2da      	uxtb	r2, r3
 8004888:	7a3b      	ldrb	r3, [r7, #8]
 800488a:	f362 0305 	bfi	r3, r2, #0, #6
 800488e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004890:	7abb      	ldrb	r3, [r7, #10]
 8004892:	f36f 0301 	bfc	r3, #0, #2
 8004896:	72bb      	strb	r3, [r7, #10]
            break;
 8004898:	e07f      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	220e      	movs	r2, #14
 80048a2:	f362 0304 	bfi	r3, r2, #0, #5
 80048a6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80048a8:	7b7b      	ldrb	r3, [r7, #13]
 80048aa:	2203      	movs	r2, #3
 80048ac:	f362 0303 	bfi	r3, r2, #0, #4
 80048b0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80048b2:	7b3b      	ldrb	r3, [r7, #12]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f362 0303 	bfi	r3, r2, #0, #4
 80048ba:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80048bc:	7a7b      	ldrb	r3, [r7, #9]
 80048be:	220f      	movs	r2, #15
 80048c0:	f362 0306 	bfi	r3, r2, #0, #7
 80048c4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	7a3b      	ldrb	r3, [r7, #8]
 80048d0:	f362 0305 	bfi	r3, r2, #0, #6
 80048d4:	723b      	strb	r3, [r7, #8]
            break;
 80048d6:	e060      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80048dc:	7bbb      	ldrb	r3, [r7, #14]
 80048de:	2208      	movs	r2, #8
 80048e0:	f362 0304 	bfi	r3, r2, #0, #5
 80048e4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80048e6:	7b7b      	ldrb	r3, [r7, #13]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f362 0303 	bfi	r3, r2, #0, #4
 80048ee:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80048f0:	7b3b      	ldrb	r3, [r7, #12]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f362 0303 	bfi	r3, r2, #0, #4
 80048f8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80048fa:	7a7b      	ldrb	r3, [r7, #9]
 80048fc:	2209      	movs	r2, #9
 80048fe:	f362 0306 	bfi	r3, r2, #0, #7
 8004902:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490a:	b2da      	uxtb	r2, r3
 800490c:	7a3b      	ldrb	r3, [r7, #8]
 800490e:	f362 0305 	bfi	r3, r2, #0, #6
 8004912:	723b      	strb	r3, [r7, #8]
            break;
 8004914:	e041      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800491a:	7bbb      	ldrb	r3, [r7, #14]
 800491c:	2206      	movs	r2, #6
 800491e:	f362 0304 	bfi	r3, r2, #0, #5
 8004922:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004924:	7b7b      	ldrb	r3, [r7, #13]
 8004926:	2201      	movs	r2, #1
 8004928:	f362 0303 	bfi	r3, r2, #0, #4
 800492c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800492e:	7b3b      	ldrb	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f362 0303 	bfi	r3, r2, #0, #4
 8004936:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004938:	7a7b      	ldrb	r3, [r7, #9]
 800493a:	2207      	movs	r2, #7
 800493c:	f362 0306 	bfi	r3, r2, #0, #7
 8004940:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004948:	b2da      	uxtb	r2, r3
 800494a:	7a3b      	ldrb	r3, [r7, #8]
 800494c:	f362 0305 	bfi	r3, r2, #0, #6
 8004950:	723b      	strb	r3, [r7, #8]
            break;
 8004952:	e022      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	e03f      	b.n	80049da <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>

        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800495e:	7bbb      	ldrb	r3, [r7, #14]
 8004960:	2202      	movs	r2, #2
 8004962:	f362 0304 	bfi	r3, r2, #0, #5
 8004966:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004968:	7b7b      	ldrb	r3, [r7, #13]
 800496a:	f36f 0303 	bfc	r3, #0, #4
 800496e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004970:	7b3b      	ldrb	r3, [r7, #12]
 8004972:	f36f 0303 	bfc	r3, #0, #4
 8004976:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004978:	7a7b      	ldrb	r3, [r7, #9]
 800497a:	2203      	movs	r2, #3
 800497c:	f362 0306 	bfi	r3, r2, #0, #7
 8004980:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004988:	b2da      	uxtb	r2, r3
 800498a:	7a3b      	ldrb	r3, [r7, #8]
 800498c:	f362 0305 	bfi	r3, r2, #0, #6
 8004990:	723b      	strb	r3, [r7, #8]
            break;
 8004992:	e002      	b.n	800499a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	e01f      	b.n	80049da <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	2108      	movs	r1, #8
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fe7d 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80049aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 80049b2:	f06f 0301 	mvn.w	r3, #1
 80049b6:	e010      	b.n	80049da <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	210c      	movs	r1, #12
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fe6e 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80049c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 80049d0:	f06f 0302 	mvn.w	r3, #2
 80049d4:	e001      	b.n	80049da <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 80049d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000018 	.word	0x20000018

080049e8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	460a      	mov	r2, r1
 80049f2:	71fb      	strb	r3, [r7, #7]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80049fc:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x118>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004a02:	79bb      	ldrb	r3, [r7, #6]
 8004a04:	2b11      	cmp	r3, #17
 8004a06:	d863      	bhi.n	8004ad0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe8>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x28>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a59 	.word	0x08004a59
 8004a18:	08004ad1 	.word	0x08004ad1
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a77 	.word	0x08004a77
 8004a34:	08004a77 	.word	0x08004a77
 8004a38:	08004a77 	.word	0x08004a77
 8004a3c:	08004a77 	.word	0x08004a77
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004a95 	.word	0x08004a95
 8004a54:	08004ab3 	.word	0x08004ab3
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8004a5c:	230e      	movs	r3, #14
 8004a5e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8004a60:	7a7b      	ldrb	r3, [r7, #9]
 8004a62:	2203      	movs	r2, #3
 8004a64:	f362 0306 	bfi	r3, r2, #0, #7
 8004a68:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8004a6a:	7a3b      	ldrb	r3, [r7, #8]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	f362 0306 	bfi	r3, r2, #0, #7
 8004a72:	723b      	strb	r3, [r7, #8]
            break;
 8004a74:	e02f      	b.n	8004ad6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004a7a:	231e      	movs	r3, #30
 8004a7c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8004a7e:	7a7b      	ldrb	r3, [r7, #9]
 8004a80:	2207      	movs	r2, #7
 8004a82:	f362 0306 	bfi	r3, r2, #0, #7
 8004a86:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004a88:	7a3b      	ldrb	r3, [r7, #8]
 8004a8a:	2207      	movs	r2, #7
 8004a8c:	f362 0306 	bfi	r3, r2, #0, #7
 8004a90:	723b      	strb	r3, [r7, #8]
            break;
 8004a92:	e020      	b.n	8004ad6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8004a98:	2307      	movs	r3, #7
 8004a9a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8004a9c:	7a7b      	ldrb	r3, [r7, #9]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f362 0306 	bfi	r3, r2, #0, #7
 8004aa4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8004aa6:	7a3b      	ldrb	r3, [r7, #8]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f362 0306 	bfi	r3, r2, #0, #7
 8004aae:	723b      	strb	r3, [r7, #8]
            break;
 8004ab0:	e011      	b.n	8004ad6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8004ab6:	233e      	movs	r3, #62	; 0x3e
 8004ab8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004aba:	7a7b      	ldrb	r3, [r7, #9]
 8004abc:	220f      	movs	r2, #15
 8004abe:	f362 0306 	bfi	r3, r2, #0, #7
 8004ac2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004ac4:	7a3b      	ldrb	r3, [r7, #8]
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	f362 0306 	bfi	r3, r2, #0, #7
 8004acc:	723b      	strb	r3, [r7, #8]
            break;
 8004ace:	e002      	b.n	8004ad6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xee>

        default:
            return -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	e010      	b.n	8004af8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x110>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2104      	movs	r1, #4
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe fddf 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
        return -2;
 8004aee:	f06f 0301 	mvn.w	r3, #1
 8004af2:	e001      	b.n	8004af8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x110>
    }

    return spiTransferError;
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000018 	.word	0x20000018

08004b04 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	71bb      	strb	r3, [r7, #6]
 8004b12:	4613      	mov	r3, r2
 8004b14:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004b1a:	4b92      	ldr	r3, [pc, #584]	; (8004d64 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8004b24:	7abb      	ldrb	r3, [r7, #10]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f362 0301 	bfi	r3, r2, #0, #2
 8004b2c:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8004b32:	79bb      	ldrb	r3, [r7, #6]
 8004b34:	2b11      	cmp	r3, #17
 8004b36:	f200 80ee 	bhi.w	8004d16 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b89 	.word	0x08004b89
 8004b44:	08004bc7 	.word	0x08004bc7
 8004b48:	08004d17 	.word	0x08004d17
 8004b4c:	08004c01 	.word	0x08004c01
 8004b50:	08004c01 	.word	0x08004c01
 8004b54:	08004c01 	.word	0x08004c01
 8004b58:	08004c01 	.word	0x08004c01
 8004b5c:	08004c01 	.word	0x08004c01
 8004b60:	08004c07 	.word	0x08004c07
 8004b64:	08004c4d 	.word	0x08004c4d
 8004b68:	08004c93 	.word	0x08004c93
 8004b6c:	08004cd1 	.word	0x08004cd1
 8004b70:	08004cd7 	.word	0x08004cd7
 8004b74:	08004d11 	.word	0x08004d11
 8004b78:	08004d11 	.word	0x08004d11
 8004b7c:	08004c01 	.word	0x08004c01
 8004b80:	08004c01 	.word	0x08004c01
 8004b84:	08004c07 	.word	0x08004c07
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004b8c:	7bbb      	ldrb	r3, [r7, #14]
 8004b8e:	2206      	movs	r2, #6
 8004b90:	f362 0304 	bfi	r3, r2, #0, #5
 8004b94:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004b96:	7b7b      	ldrb	r3, [r7, #13]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f362 0303 	bfi	r3, r2, #0, #4
 8004b9e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004ba0:	7b3b      	ldrb	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f362 0303 	bfi	r3, r2, #0, #4
 8004ba8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004baa:	7a7b      	ldrb	r3, [r7, #9]
 8004bac:	2207      	movs	r2, #7
 8004bae:	f362 0306 	bfi	r3, r2, #0, #7
 8004bb2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	7a3b      	ldrb	r3, [r7, #8]
 8004bbe:	f362 0305 	bfi	r3, r2, #0, #6
 8004bc2:	723b      	strb	r3, [r7, #8]
            break;
 8004bc4:	e0aa      	b.n	8004d1c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004bca:	7bbb      	ldrb	r3, [r7, #14]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f362 0304 	bfi	r3, r2, #0, #5
 8004bd2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004bd4:	7b7b      	ldrb	r3, [r7, #13]
 8004bd6:	f36f 0303 	bfc	r3, #0, #4
 8004bda:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004bdc:	7b3b      	ldrb	r3, [r7, #12]
 8004bde:	f36f 0303 	bfc	r3, #0, #4
 8004be2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004be4:	7a7b      	ldrb	r3, [r7, #9]
 8004be6:	2203      	movs	r2, #3
 8004be8:	f362 0306 	bfi	r3, r2, #0, #7
 8004bec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	7a3b      	ldrb	r3, [r7, #8]
 8004bf8:	f362 0305 	bfi	r3, r2, #0, #6
 8004bfc:	723b      	strb	r3, [r7, #8]
            break;
 8004bfe:	e08d      	b.n	8004d1c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
 8004c04:	e0aa      	b.n	8004d5c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>


        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	220e      	movs	r2, #14
 8004c0e:	f362 0304 	bfi	r3, r2, #0, #5
 8004c12:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004c14:	7b7b      	ldrb	r3, [r7, #13]
 8004c16:	2203      	movs	r2, #3
 8004c18:	f362 0303 	bfi	r3, r2, #0, #4
 8004c1c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004c1e:	7b3b      	ldrb	r3, [r7, #12]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f362 0303 	bfi	r3, r2, #0, #4
 8004c26:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004c28:	7a7b      	ldrb	r3, [r7, #9]
 8004c2a:	220f      	movs	r2, #15
 8004c2c:	f362 0306 	bfi	r3, r2, #0, #7
 8004c30:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	7a3b      	ldrb	r3, [r7, #8]
 8004c3c:	f362 0305 	bfi	r3, r2, #0, #6
 8004c40:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004c42:	7abb      	ldrb	r3, [r7, #10]
 8004c44:	f36f 0301 	bfc	r3, #0, #2
 8004c48:	72bb      	strb	r3, [r7, #10]
            break;
 8004c4a:	e067      	b.n	8004d1c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8004c50:	7bbb      	ldrb	r3, [r7, #14]
 8004c52:	2207      	movs	r2, #7
 8004c54:	f362 0304 	bfi	r3, r2, #0, #5
 8004c58:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004c5a:	7b7b      	ldrb	r3, [r7, #13]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f362 0303 	bfi	r3, r2, #0, #4
 8004c62:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004c64:	7b3b      	ldrb	r3, [r7, #12]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f362 0303 	bfi	r3, r2, #0, #4
 8004c6c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 8004c6e:	7a7b      	ldrb	r3, [r7, #9]
 8004c70:	2208      	movs	r2, #8
 8004c72:	f362 0306 	bfi	r3, r2, #0, #7
 8004c76:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	7a3b      	ldrb	r3, [r7, #8]
 8004c82:	f362 0305 	bfi	r3, r2, #0, #6
 8004c86:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004c88:	7abb      	ldrb	r3, [r7, #10]
 8004c8a:	f36f 0301 	bfc	r3, #0, #2
 8004c8e:	72bb      	strb	r3, [r7, #10]
            break;
 8004c90:	e044      	b.n	8004d1c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
 8004c98:	2206      	movs	r2, #6
 8004c9a:	f362 0304 	bfi	r3, r2, #0, #5
 8004c9e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004ca0:	7b7b      	ldrb	r3, [r7, #13]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f362 0303 	bfi	r3, r2, #0, #4
 8004ca8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004caa:	7b3b      	ldrb	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f362 0303 	bfi	r3, r2, #0, #4
 8004cb2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004cb4:	7a7b      	ldrb	r3, [r7, #9]
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	f362 0306 	bfi	r3, r2, #0, #7
 8004cbc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	7a3b      	ldrb	r3, [r7, #8]
 8004cc8:	f362 0305 	bfi	r3, r2, #0, #6
 8004ccc:	723b      	strb	r3, [r7, #8]
            break;
 8004cce:	e025      	b.n	8004d1c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	e042      	b.n	8004d5c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>

        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f362 0304 	bfi	r3, r2, #0, #5
 8004ce2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004ce4:	7b7b      	ldrb	r3, [r7, #13]
 8004ce6:	f36f 0303 	bfc	r3, #0, #4
 8004cea:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004cec:	7b3b      	ldrb	r3, [r7, #12]
 8004cee:	f36f 0303 	bfc	r3, #0, #4
 8004cf2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004cf4:	7a7b      	ldrb	r3, [r7, #9]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	f362 0306 	bfi	r3, r2, #0, #7
 8004cfc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	7a3b      	ldrb	r3, [r7, #8]
 8004d08:	f362 0305 	bfi	r3, r2, #0, #6
 8004d0c:	723b      	strb	r3, [r7, #8]
            break;
 8004d0e:	e005      	b.n	8004d1c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	e022      	b.n	8004d5c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>


        default:
            return -1;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	e01f      	b.n	8004d5c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>

    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	2108      	movs	r1, #8
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fcbc 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8004d34:	f06f 0301 	mvn.w	r3, #1
 8004d38:	e010      	b.n	8004d5c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	210c      	movs	r1, #12
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe fcad 	bl	80036a0 <DRV_CANFDSPI_WriteWord>
 8004d46:	4603      	mov	r3, r0
 8004d48:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8004d52:	f06f 0302 	mvn.w	r3, #2
 8004d56:	e001      	b.n	8004d5c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8004d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000018 	.word	0x20000018

08004d68 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
 8004d72:	460b      	mov	r3, r1
 8004d74:	71bb      	strb	r3, [r7, #6]
 8004d76:	4613      	mov	r3, r2
 8004d78:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8004d82:	f640 6307 	movw	r3, #3591	; 0xe07
 8004d86:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	1cda      	adds	r2, r3, #3
 8004d92:	89b9      	ldrh	r1, [r7, #12]
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fc1c 	bl	80035d4 <DRV_CANFDSPI_ReadByte>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	e020      	b.n	8004df0 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8004dae:	79bb      	ldrb	r3, [r7, #6]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	f362 0300 	bfi	r3, r2, #0, #1
 8004dbc:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8004dbe:	797b      	ldrb	r3, [r7, #5]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	f362 0341 	bfi	r3, r2, #1, #1
 8004dcc:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8004dce:	7afa      	ldrb	r2, [r7, #11]
 8004dd0:	89b9      	ldrh	r1, [r7, #12]
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fe fc31 	bl	800363c <DRV_CANFDSPI_WriteByte>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]
//	DRV_CANFDSPI_WriteByte(index, a - 2, 0x03);
//	DRV_CANFDSPI_WriteByte(index, a - 3, 0x00);
//	//test
	
	
    if (spiTransferError) {
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8004de6:	f06f 0301 	mvn.w	r3, #1
 8004dea:	e001      	b.n	8004df0 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8004dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <DRV_SPI_Initialize>:
	/* Any new structure entries should be placed below the comment */
	uint32_t tstamp;
};

void DRV_SPI_Initialize(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f7fe fbc6 	bl	8003590 <DRV_CANFDSPI_Reset>

    CAN_OSC_CTRL oscCtrl;
    DRV_CANFDSPI_OscillatorControlObjectReset(&oscCtrl);
 8004e04:	f107 0314 	add.w	r3, r7, #20
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff f855 	bl	8003eb8 <DRV_CANFDSPI_OscillatorControlObjectReset>
    oscCtrl.ClkOutDivide = OSC_CLKO_DIV10;
 8004e0e:	7d3b      	ldrb	r3, [r7, #20]
 8004e10:	f043 0318 	orr.w	r3, r3, #24
 8004e14:	753b      	strb	r3, [r7, #20]
    DRV_CANFDSPI_OscillatorControlSet(DRV_CANFDSPI_INDEX_0, oscCtrl);
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f7ff f813 	bl	8003e44 <DRV_CANFDSPI_OscillatorControlSet>

    DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_0, GPIO_MODE_INT, GPIO_MODE_INT);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2100      	movs	r1, #0
 8004e22:	2000      	movs	r0, #0
 8004e24:	f7ff ffa0 	bl	8004d68 <DRV_CANFDSPI_GpioModeConfigure>
    CAN_CONFIG config;
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fd49 	bl	80038c4 <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 8004e32:	7c3b      	ldrb	r3, [r7, #16]
 8004e34:	f043 0320 	orr.w	r3, r3, #32
 8004e38:	743b      	strb	r3, [r7, #16]
    config.StoreInTEF = 1;
 8004e3a:	7c7b      	ldrb	r3, [r7, #17]
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e40:	747b      	strb	r3, [r7, #17]
    config.TXQEnable = 1;
 8004e42:	7c7b      	ldrb	r3, [r7, #17]
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	747b      	strb	r3, [r7, #17]
    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 8004e4a:	f107 0310 	add.w	r3, r7, #16
 8004e4e:	4619      	mov	r1, r3
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7fe fca9 	bl	80037a8 <DRV_CANFDSPI_Configure>
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8004e56:	2300      	movs	r3, #0
 8004e58:	2202      	movs	r2, #2
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7ff f85f 	bl	8003f20 <DRV_CANFDSPI_BitTimeConfigure>
    CAN_TEF_CONFIG tefConfig;
    tefConfig.FifoSize = 11;
 8004e62:	7b3b      	ldrb	r3, [r7, #12]
 8004e64:	220b      	movs	r2, #11
 8004e66:	f362 0345 	bfi	r3, r2, #1, #5
 8004e6a:	733b      	strb	r3, [r7, #12]
    tefConfig.TimeStampEnable = 1;
 8004e6c:	7b3b      	ldrb	r3, [r7, #12]
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	733b      	strb	r3, [r7, #12]
    DRV_CANFDSPI_TefConfigure(DRV_CANFDSPI_INDEX_0, &tefConfig);
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	4619      	mov	r1, r3
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7fe ff3c 	bl	8003cf8 <DRV_CANFDSPI_TefConfigure>
    CAN_TX_QUEUE_CONFIG txqConfig;
    DRV_CANFDSPI_TransmitQueueConfigureObjectReset(&txqConfig);
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe feb5 	bl	8003bf4 <DRV_CANFDSPI_TransmitQueueConfigureObjectReset>
    txqConfig.TxPriority = 1;
 8004e8a:	7a3b      	ldrb	r3, [r7, #8]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f362 0304 	bfi	r3, r2, #0, #5
 8004e92:	723b      	strb	r3, [r7, #8]
    txqConfig.FifoSize = 7;
 8004e94:	893b      	ldrh	r3, [r7, #8]
 8004e96:	2207      	movs	r2, #7
 8004e98:	f362 13cb 	bfi	r3, r2, #7, #5
 8004e9c:	813b      	strh	r3, [r7, #8]
    txqConfig.PayLoadSize = CAN_PLSIZE_32;
 8004e9e:	7a7b      	ldrb	r3, [r7, #9]
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f362 1306 	bfi	r3, r2, #4, #3
 8004ea6:	727b      	strb	r3, [r7, #9]
    DRV_CANFDSPI_TransmitQueueConfigure(DRV_CANFDSPI_INDEX_0, &txqConfig);
 8004ea8:	f107 0308 	add.w	r3, r7, #8
 8004eac:	4619      	mov	r1, r3
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7fe fe58 	bl	8003b64 <DRV_CANFDSPI_TransmitQueueConfigure>

    CAN_TX_FIFO_CONFIG txfConfig;
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txfConfig);
 8004eb4:	1d3b      	adds	r3, r7, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fe16 	bl	8003ae8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txfConfig.FifoSize = 4;
 8004ebc:	797b      	ldrb	r3, [r7, #5]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	f362 0304 	bfi	r3, r2, #0, #5
 8004ec4:	717b      	strb	r3, [r7, #5]
    txfConfig.PayLoadSize = CAN_PLSIZE_64;
 8004ec6:	797b      	ldrb	r3, [r7, #5]
 8004ec8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004ecc:	717b      	strb	r3, [r7, #5]
    txfConfig.TxPriority = 0;
 8004ece:	793b      	ldrb	r3, [r7, #4]
 8004ed0:	f36f 0345 	bfc	r3, #1, #5
 8004ed4:	713b      	strb	r3, [r7, #4]
    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, CAN_FIFO_CH1, &txfConfig);
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2101      	movs	r1, #1
 8004edc:	2000      	movs	r0, #0
 8004ede:	f7fe fda9 	bl	8003a34 <DRV_CANFDSPI_TransmitChannelConfigure>

    CAN_RX_FIFO_CONFIG rxfConfig;
    rxfConfig.FifoSize = 15;
 8004ee2:	783b      	ldrb	r3, [r7, #0]
 8004ee4:	220f      	movs	r2, #15
 8004ee6:	f362 0345 	bfi	r3, r2, #1, #5
 8004eea:	703b      	strb	r3, [r7, #0]
    rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 8004eec:	883b      	ldrh	r3, [r7, #0]
 8004eee:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8004ef2:	803b      	strh	r3, [r7, #0]
    rxfConfig.RxTimeStampEnable = 1;
 8004ef4:	783b      	ldrb	r3, [r7, #0]
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	703b      	strb	r3, [r7, #0]
    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_0, CAN_FIFO_CH2, &rxfConfig);
 8004efc:	463b      	mov	r3, r7
 8004efe:	461a      	mov	r2, r3
 8004f00:	2102      	movs	r1, #2
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7fe feaa 	bl	8003c5c <DRV_CANFDSPI_ReceiveChannelConfigure>

    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f7fe ff23 	bl	8003d54 <DRV_CANFDSPI_EccEnable>
    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 8004f0e:	21ff      	movs	r1, #255	; 0xff
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fe ff53 	bl	8003dbc <DRV_CANFDSPI_RamInit>
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 8004f16:	2100      	movs	r1, #0
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7fe fd4f 	bl	80039bc <DRV_CANFDSPI_OperationModeSelect>

}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <DRV_SPI_ChipSelectAssert>:
  * @param  spiSlaveDeviceIndex: ��·SPIѡ��Ҫ����оƬ�ͺ����жϿɳ���·
  * @param  assert: �Ƿ�ѡ��ģ�顣true�������ͣ�false��������
  * @retval -1����Ƭѡʧ�ܣ�0����Ƭѡ���
  */
int8_t DRV_SPI_ChipSelectAssert(uint8_t spiSlaveDeviceIndex, bool assert)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460a      	mov	r2, r1
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71bb      	strb	r3, [r7, #6]
    int8_t error = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]

    // Select Chip Select
    switch (spiSlaveDeviceIndex) {
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d110      	bne.n	8004f64 <DRV_SPI_ChipSelectAssert+0x3c>
        case DRV_CANFDSPI_INDEX_0:
            if (assert)
 8004f42:	79bb      	ldrb	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <DRV_SPI_ChipSelectAssert+0x2e>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f4e:	480a      	ldr	r0, [pc, #40]	; (8004f78 <DRV_SPI_ChipSelectAssert+0x50>)
 8004f50:	f7fc fad6 	bl	8001500 <HAL_GPIO_WritePin>
            else
                HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_SET);
            break;
 8004f54:	e009      	b.n	8004f6a <DRV_SPI_ChipSelectAssert+0x42>
                HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_SET);
 8004f56:	2201      	movs	r2, #1
 8004f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f5c:	4806      	ldr	r0, [pc, #24]	; (8004f78 <DRV_SPI_ChipSelectAssert+0x50>)
 8004f5e:	f7fc facf 	bl	8001500 <HAL_GPIO_WritePin>
            break;
 8004f62:	e002      	b.n	8004f6a <DRV_SPI_ChipSelectAssert+0x42>
        default:
            error = -1;
 8004f64:	23ff      	movs	r3, #255	; 0xff
 8004f66:	73fb      	strb	r3, [r7, #15]
            break;
 8004f68:	bf00      	nop
    }
    return error;
 8004f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40020400 	.word	0x40020400

08004f7c <DRV_SPI_TransferData>:
  * @param  SpiRxData: ���յ�����
  * @param  spiTransferSize: �������ݵĳ���
  * @retval Ƭѡ�ź�״̬  -1����Ƭѡʧ�ܣ�0����Ƭѡ�ɹ�
  */
int8_t DRV_SPI_TransferData(uint8_t spiSlaveDeviceIndex, uint8_t *SpiTxData, uint8_t *SpiRxData, uint16_t spiTransferSize)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	461a      	mov	r2, r3
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	81bb      	strh	r3, [r7, #12]
    int8_t error = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]
    // Assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, true);
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ffc5 	bl	8004f28 <DRV_SPI_ChipSelectAssert>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
    if (error != 0)
 8004fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <DRV_SPI_TransferData+0x34>
        return error;
 8004faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fae:	e016      	b.n	8004fde <DRV_SPI_TransferData+0x62>

    switch (spiSlaveDeviceIndex){
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <DRV_SPI_TransferData+0x4e>
        case DRV_CANFDSPI_INDEX_0:
            HAL_SPI_TransmitReceive(&hspi2,SpiTxData,SpiRxData,spiTransferSize,1000);
 8004fb6:	89bb      	ldrh	r3, [r7, #12]
 8004fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fbc:	9200      	str	r2, [sp, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4809      	ldr	r0, [pc, #36]	; (8004fe8 <DRV_SPI_TransferData+0x6c>)
 8004fc4:	f7fd f8dd 	bl	8002182 <HAL_SPI_TransmitReceive>
            break;
 8004fc8:	e000      	b.n	8004fcc <DRV_SPI_TransferData+0x50>
        default:
            break;
 8004fca:	bf00      	nop
    }
    // De�\assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, false);
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ffa9 	bl	8004f28 <DRV_SPI_ChipSelectAssert>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]

    return error;
 8004fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
} 
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000100 	.word	0x20000100

08004fec <memset>:
 8004fec:	4402      	add	r2, r0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <__libc_init_array>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4d0d      	ldr	r5, [pc, #52]	; (8005034 <__libc_init_array+0x38>)
 8005000:	4c0d      	ldr	r4, [pc, #52]	; (8005038 <__libc_init_array+0x3c>)
 8005002:	1b64      	subs	r4, r4, r5
 8005004:	10a4      	asrs	r4, r4, #2
 8005006:	2600      	movs	r6, #0
 8005008:	42a6      	cmp	r6, r4
 800500a:	d109      	bne.n	8005020 <__libc_init_array+0x24>
 800500c:	4d0b      	ldr	r5, [pc, #44]	; (800503c <__libc_init_array+0x40>)
 800500e:	4c0c      	ldr	r4, [pc, #48]	; (8005040 <__libc_init_array+0x44>)
 8005010:	f000 f818 	bl	8005044 <_init>
 8005014:	1b64      	subs	r4, r4, r5
 8005016:	10a4      	asrs	r4, r4, #2
 8005018:	2600      	movs	r6, #0
 800501a:	42a6      	cmp	r6, r4
 800501c:	d105      	bne.n	800502a <__libc_init_array+0x2e>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	f855 3b04 	ldr.w	r3, [r5], #4
 8005024:	4798      	blx	r3
 8005026:	3601      	adds	r6, #1
 8005028:	e7ee      	b.n	8005008 <__libc_init_array+0xc>
 800502a:	f855 3b04 	ldr.w	r3, [r5], #4
 800502e:	4798      	blx	r3
 8005030:	3601      	adds	r6, #1
 8005032:	e7f2      	b.n	800501a <__libc_init_array+0x1e>
 8005034:	08005074 	.word	0x08005074
 8005038:	08005074 	.word	0x08005074
 800503c:	08005074 	.word	0x08005074
 8005040:	08005078 	.word	0x08005078

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
